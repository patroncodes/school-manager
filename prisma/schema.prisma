generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id
  username String @unique
  name String
  surname String
}

model Student {
   id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  birthday DateTime
  bloodType String

  sex UserSex @default(MALE)
  createdAt DateTime @default(now())
  parentId String
  parent Parent @relation(fields: [parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results Result[]
  fees Fee[]
  transactions Transaction[]
}

model Teacher {
   id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  img String?
  bloodType String
  birthday DateTime
  sex UserSex
  createdAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
  // attendances Attendance[]
}

model Parent {
   id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  sex UserSex
  createdAt DateTime @default(now())

  students Student[]

  @@index([name, surname])
}

model Grade {
  id Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}

model Class {
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int

  supervisorId String?
  supervisor Teacher? @relation(fields: [supervisorId], references: [id])
  lessons Lesson[]
  students Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  events Event[]
  announcements Announcement[]
  fees Fee[]
}

model Subject {
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson {
   id Int @id @default(autoincrement())
  name String
  description String?
  day Day
  startTime DateTime
  endTime DateTime
  objectives String[]
  materials String[]

  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
   id Int @id @default(autoincrement())
   title String
   startTime DateTime
   endTime DateTime

   lessonId Int
   lesson Lesson @relation(fields: [lessonId], references: [id])
   results Result[]
}

model Assignment {
   id Int @id @default(autoincrement())
   title String
   startDate DateTime
   dueDate DateTime

   lessonId Int
   lesson Lesson @relation(fields: [lessonId], references: [id])
   results Result[]
}

model Result {
  id Int @id @default(autoincrement())
  score Int

  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  // TODO: Add the uploadedAt field
}

model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime

  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime

  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

model Attendance {
   id Int @id @default(autoincrement())
   date DateTime
   present Boolean

   studentId String
   student Student @relation(fields: [studentId], references: [id])

   lessonId Int
   lesson Lesson @relation(fields: [lessonId], references: [id])

   @@unique([studentId, lessonId])
}

model Transaction {
  id    Int       @id @default(autoincrement())
  amount  Float
  reference String @unique
  date DateTime  @default(now())

  feeId Int
  fee Fee       @relation(fields: [feeId], references: [id])

  studentId  String
  student  Student   @relation(fields: [studentId], references: [id])
}

model Fee {
  id            Int @id @default(autoincrement())
  amount        Float
  description   String
  dueDate       DateTime?
  createdAt     DateTime    @default(now())
  
  classId  Int?
  class  Class? @relation(fields: [classId], references: [id])
  studentId String?
  student Student? @relation(fields: [studentId], references: [id])

  transactions  Transaction[]
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}