
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SalaryPayment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SalaryPayment
 * 
 */
export type SalaryPaymentModel = runtime.Types.Result.DefaultSelection<Prisma.$SalaryPaymentPayload>

export type AggregateSalaryPayment = {
  _count: SalaryPaymentCountAggregateOutputType | null
  _avg: SalaryPaymentAvgAggregateOutputType | null
  _sum: SalaryPaymentSumAggregateOutputType | null
  _min: SalaryPaymentMinAggregateOutputType | null
  _max: SalaryPaymentMaxAggregateOutputType | null
}

export type SalaryPaymentAvgAggregateOutputType = {
  totalAmount: number | null
  deductions: number | null
  amountPaid: runtime.Decimal | null
}

export type SalaryPaymentSumAggregateOutputType = {
  totalAmount: number | null
  deductions: number | null
  amountPaid: runtime.Decimal | null
}

export type SalaryPaymentMinAggregateOutputType = {
  id: string | null
  totalAmount: number | null
  deductions: number | null
  deductionReason: string | null
  amountPaid: runtime.Decimal | null
  payPeriod: string | null
  status: $Enums.PaymentStatus | null
  paymentDate: Date | null
  reference: string | null
  schoolId: string | null
  staffId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SalaryPaymentMaxAggregateOutputType = {
  id: string | null
  totalAmount: number | null
  deductions: number | null
  deductionReason: string | null
  amountPaid: runtime.Decimal | null
  payPeriod: string | null
  status: $Enums.PaymentStatus | null
  paymentDate: Date | null
  reference: string | null
  schoolId: string | null
  staffId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SalaryPaymentCountAggregateOutputType = {
  id: number
  totalAmount: number
  deductions: number
  deductionReason: number
  amountPaid: number
  payPeriod: number
  status: number
  paymentDate: number
  reference: number
  schoolId: number
  staffId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SalaryPaymentAvgAggregateInputType = {
  totalAmount?: true
  deductions?: true
  amountPaid?: true
}

export type SalaryPaymentSumAggregateInputType = {
  totalAmount?: true
  deductions?: true
  amountPaid?: true
}

export type SalaryPaymentMinAggregateInputType = {
  id?: true
  totalAmount?: true
  deductions?: true
  deductionReason?: true
  amountPaid?: true
  payPeriod?: true
  status?: true
  paymentDate?: true
  reference?: true
  schoolId?: true
  staffId?: true
  createdAt?: true
  updatedAt?: true
}

export type SalaryPaymentMaxAggregateInputType = {
  id?: true
  totalAmount?: true
  deductions?: true
  deductionReason?: true
  amountPaid?: true
  payPeriod?: true
  status?: true
  paymentDate?: true
  reference?: true
  schoolId?: true
  staffId?: true
  createdAt?: true
  updatedAt?: true
}

export type SalaryPaymentCountAggregateInputType = {
  id?: true
  totalAmount?: true
  deductions?: true
  deductionReason?: true
  amountPaid?: true
  payPeriod?: true
  status?: true
  paymentDate?: true
  reference?: true
  schoolId?: true
  staffId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SalaryPaymentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SalaryPayment to aggregate.
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SalaryPayments to fetch.
   */
  orderBy?: Prisma.SalaryPaymentOrderByWithRelationInput | Prisma.SalaryPaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SalaryPaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SalaryPayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SalaryPayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SalaryPayments
  **/
  _count?: true | SalaryPaymentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SalaryPaymentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SalaryPaymentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SalaryPaymentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SalaryPaymentMaxAggregateInputType
}

export type GetSalaryPaymentAggregateType<T extends SalaryPaymentAggregateArgs> = {
      [P in keyof T & keyof AggregateSalaryPayment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSalaryPayment[P]>
    : Prisma.GetScalarType<T[P], AggregateSalaryPayment[P]>
}




export type SalaryPaymentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SalaryPaymentWhereInput
  orderBy?: Prisma.SalaryPaymentOrderByWithAggregationInput | Prisma.SalaryPaymentOrderByWithAggregationInput[]
  by: Prisma.SalaryPaymentScalarFieldEnum[] | Prisma.SalaryPaymentScalarFieldEnum
  having?: Prisma.SalaryPaymentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SalaryPaymentCountAggregateInputType | true
  _avg?: SalaryPaymentAvgAggregateInputType
  _sum?: SalaryPaymentSumAggregateInputType
  _min?: SalaryPaymentMinAggregateInputType
  _max?: SalaryPaymentMaxAggregateInputType
}

export type SalaryPaymentGroupByOutputType = {
  id: string
  totalAmount: number
  deductions: number
  deductionReason: string | null
  amountPaid: runtime.Decimal
  payPeriod: string
  status: $Enums.PaymentStatus
  paymentDate: Date
  reference: string
  schoolId: string
  staffId: string
  createdAt: Date
  updatedAt: Date
  _count: SalaryPaymentCountAggregateOutputType | null
  _avg: SalaryPaymentAvgAggregateOutputType | null
  _sum: SalaryPaymentSumAggregateOutputType | null
  _min: SalaryPaymentMinAggregateOutputType | null
  _max: SalaryPaymentMaxAggregateOutputType | null
}

type GetSalaryPaymentGroupByPayload<T extends SalaryPaymentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SalaryPaymentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SalaryPaymentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SalaryPaymentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SalaryPaymentGroupByOutputType[P]>
      }
    >
  >



export type SalaryPaymentWhereInput = {
  AND?: Prisma.SalaryPaymentWhereInput | Prisma.SalaryPaymentWhereInput[]
  OR?: Prisma.SalaryPaymentWhereInput[]
  NOT?: Prisma.SalaryPaymentWhereInput | Prisma.SalaryPaymentWhereInput[]
  id?: Prisma.StringFilter<"SalaryPayment"> | string
  totalAmount?: Prisma.IntFilter<"SalaryPayment"> | number
  deductions?: Prisma.IntFilter<"SalaryPayment"> | number
  deductionReason?: Prisma.StringNullableFilter<"SalaryPayment"> | string | null
  amountPaid?: Prisma.DecimalFilter<"SalaryPayment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFilter<"SalaryPayment"> | string
  status?: Prisma.EnumPaymentStatusFilter<"SalaryPayment"> | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  reference?: Prisma.StringFilter<"SalaryPayment"> | string
  schoolId?: Prisma.StringFilter<"SalaryPayment"> | string
  staffId?: Prisma.StringFilter<"SalaryPayment"> | string
  createdAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}

export type SalaryPaymentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  deductionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  payPeriod?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  staff?: Prisma.StaffOrderByWithRelationInput
}

export type SalaryPaymentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_reference?: Prisma.SalaryPaymentSchoolIdReferenceCompoundUniqueInput
  AND?: Prisma.SalaryPaymentWhereInput | Prisma.SalaryPaymentWhereInput[]
  OR?: Prisma.SalaryPaymentWhereInput[]
  NOT?: Prisma.SalaryPaymentWhereInput | Prisma.SalaryPaymentWhereInput[]
  totalAmount?: Prisma.IntFilter<"SalaryPayment"> | number
  deductions?: Prisma.IntFilter<"SalaryPayment"> | number
  deductionReason?: Prisma.StringNullableFilter<"SalaryPayment"> | string | null
  amountPaid?: Prisma.DecimalFilter<"SalaryPayment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFilter<"SalaryPayment"> | string
  status?: Prisma.EnumPaymentStatusFilter<"SalaryPayment"> | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  reference?: Prisma.StringFilter<"SalaryPayment"> | string
  schoolId?: Prisma.StringFilter<"SalaryPayment"> | string
  staffId?: Prisma.StringFilter<"SalaryPayment"> | string
  createdAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}, "id" | "schoolId_reference">

export type SalaryPaymentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  deductionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  payPeriod?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SalaryPaymentCountOrderByAggregateInput
  _avg?: Prisma.SalaryPaymentAvgOrderByAggregateInput
  _max?: Prisma.SalaryPaymentMaxOrderByAggregateInput
  _min?: Prisma.SalaryPaymentMinOrderByAggregateInput
  _sum?: Prisma.SalaryPaymentSumOrderByAggregateInput
}

export type SalaryPaymentScalarWhereWithAggregatesInput = {
  AND?: Prisma.SalaryPaymentScalarWhereWithAggregatesInput | Prisma.SalaryPaymentScalarWhereWithAggregatesInput[]
  OR?: Prisma.SalaryPaymentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SalaryPaymentScalarWhereWithAggregatesInput | Prisma.SalaryPaymentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SalaryPayment"> | string
  totalAmount?: Prisma.IntWithAggregatesFilter<"SalaryPayment"> | number
  deductions?: Prisma.IntWithAggregatesFilter<"SalaryPayment"> | number
  deductionReason?: Prisma.StringNullableWithAggregatesFilter<"SalaryPayment"> | string | null
  amountPaid?: Prisma.DecimalWithAggregatesFilter<"SalaryPayment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringWithAggregatesFilter<"SalaryPayment"> | string
  status?: Prisma.EnumPaymentStatusWithAggregatesFilter<"SalaryPayment"> | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeWithAggregatesFilter<"SalaryPayment"> | Date | string
  reference?: Prisma.StringWithAggregatesFilter<"SalaryPayment"> | string
  schoolId?: Prisma.StringWithAggregatesFilter<"SalaryPayment"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"SalaryPayment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SalaryPayment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SalaryPayment"> | Date | string
}

export type SalaryPaymentCreateInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutSalaryPaymentsInput
  staff: Prisma.StaffCreateNestedOneWithoutSalariesInput
}

export type SalaryPaymentUncheckedCreateInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  schoolId: string
  staffId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutSalaryPaymentsNestedInput
  staff?: Prisma.StaffUpdateOneRequiredWithoutSalariesNestedInput
}

export type SalaryPaymentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentCreateManyInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  schoolId: string
  staffId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentListRelationFilter = {
  every?: Prisma.SalaryPaymentWhereInput
  some?: Prisma.SalaryPaymentWhereInput
  none?: Prisma.SalaryPaymentWhereInput
}

export type SalaryPaymentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SalaryPaymentSchoolIdReferenceCompoundUniqueInput = {
  schoolId: string
  reference: string
}

export type SalaryPaymentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  deductionReason?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  payPeriod?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SalaryPaymentAvgOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type SalaryPaymentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  deductionReason?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  payPeriod?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SalaryPaymentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  deductionReason?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  payPeriod?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentDate?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SalaryPaymentSumOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
  deductions?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type SalaryPaymentCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput> | Prisma.SalaryPaymentCreateWithoutSchoolInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput | Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.SalaryPaymentCreateManySchoolInputEnvelope
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
}

export type SalaryPaymentUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput> | Prisma.SalaryPaymentCreateWithoutSchoolInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput | Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.SalaryPaymentCreateManySchoolInputEnvelope
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
}

export type SalaryPaymentUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput> | Prisma.SalaryPaymentCreateWithoutSchoolInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput | Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.SalaryPaymentCreateManySchoolInputEnvelope
  set?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  disconnect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  delete?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  update?: Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.SalaryPaymentUpdateManyWithWhereWithoutSchoolInput | Prisma.SalaryPaymentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
}

export type SalaryPaymentUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput> | Prisma.SalaryPaymentCreateWithoutSchoolInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput | Prisma.SalaryPaymentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.SalaryPaymentCreateManySchoolInputEnvelope
  set?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  disconnect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  delete?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  update?: Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.SalaryPaymentUpdateManyWithWhereWithoutSchoolInput | Prisma.SalaryPaymentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
}

export type SalaryPaymentCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput> | Prisma.SalaryPaymentCreateWithoutStaffInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput | Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.SalaryPaymentCreateManyStaffInputEnvelope
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
}

export type SalaryPaymentUncheckedCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput> | Prisma.SalaryPaymentCreateWithoutStaffInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput | Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.SalaryPaymentCreateManyStaffInputEnvelope
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
}

export type SalaryPaymentUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput> | Prisma.SalaryPaymentCreateWithoutStaffInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput | Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutStaffInput | Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.SalaryPaymentCreateManyStaffInputEnvelope
  set?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  disconnect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  delete?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  update?: Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutStaffInput | Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.SalaryPaymentUpdateManyWithWhereWithoutStaffInput | Prisma.SalaryPaymentUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
}

export type SalaryPaymentUncheckedUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput> | Prisma.SalaryPaymentCreateWithoutStaffInput[] | Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput | Prisma.SalaryPaymentCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutStaffInput | Prisma.SalaryPaymentUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.SalaryPaymentCreateManyStaffInputEnvelope
  set?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  disconnect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  delete?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  connect?: Prisma.SalaryPaymentWhereUniqueInput | Prisma.SalaryPaymentWhereUniqueInput[]
  update?: Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutStaffInput | Prisma.SalaryPaymentUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.SalaryPaymentUpdateManyWithWhereWithoutStaffInput | Prisma.SalaryPaymentUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
}

export type SalaryPaymentCreateWithoutSchoolInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  createdAt?: Date | string
  updatedAt?: Date | string
  staff: Prisma.StaffCreateNestedOneWithoutSalariesInput
}

export type SalaryPaymentUncheckedCreateWithoutSchoolInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  staffId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput>
}

export type SalaryPaymentCreateManySchoolInputEnvelope = {
  data: Prisma.SalaryPaymentCreateManySchoolInput | Prisma.SalaryPaymentCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type SalaryPaymentUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.SalaryPaymentUpdateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedCreateWithoutSchoolInput>
}

export type SalaryPaymentUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateWithoutSchoolInput, Prisma.SalaryPaymentUncheckedUpdateWithoutSchoolInput>
}

export type SalaryPaymentUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.SalaryPaymentScalarWhereInput
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateManyMutationInput, Prisma.SalaryPaymentUncheckedUpdateManyWithoutSchoolInput>
}

export type SalaryPaymentScalarWhereInput = {
  AND?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
  OR?: Prisma.SalaryPaymentScalarWhereInput[]
  NOT?: Prisma.SalaryPaymentScalarWhereInput | Prisma.SalaryPaymentScalarWhereInput[]
  id?: Prisma.StringFilter<"SalaryPayment"> | string
  totalAmount?: Prisma.IntFilter<"SalaryPayment"> | number
  deductions?: Prisma.IntFilter<"SalaryPayment"> | number
  deductionReason?: Prisma.StringNullableFilter<"SalaryPayment"> | string | null
  amountPaid?: Prisma.DecimalFilter<"SalaryPayment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFilter<"SalaryPayment"> | string
  status?: Prisma.EnumPaymentStatusFilter<"SalaryPayment"> | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  reference?: Prisma.StringFilter<"SalaryPayment"> | string
  schoolId?: Prisma.StringFilter<"SalaryPayment"> | string
  staffId?: Prisma.StringFilter<"SalaryPayment"> | string
  createdAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SalaryPayment"> | Date | string
}

export type SalaryPaymentCreateWithoutStaffInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutSalaryPaymentsInput
}

export type SalaryPaymentUncheckedCreateWithoutStaffInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  schoolId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentCreateOrConnectWithoutStaffInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput>
}

export type SalaryPaymentCreateManyStaffInputEnvelope = {
  data: Prisma.SalaryPaymentCreateManyStaffInput | Prisma.SalaryPaymentCreateManyStaffInput[]
  skipDuplicates?: boolean
}

export type SalaryPaymentUpsertWithWhereUniqueWithoutStaffInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.SalaryPaymentUpdateWithoutStaffInput, Prisma.SalaryPaymentUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.SalaryPaymentCreateWithoutStaffInput, Prisma.SalaryPaymentUncheckedCreateWithoutStaffInput>
}

export type SalaryPaymentUpdateWithWhereUniqueWithoutStaffInput = {
  where: Prisma.SalaryPaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateWithoutStaffInput, Prisma.SalaryPaymentUncheckedUpdateWithoutStaffInput>
}

export type SalaryPaymentUpdateManyWithWhereWithoutStaffInput = {
  where: Prisma.SalaryPaymentScalarWhereInput
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateManyMutationInput, Prisma.SalaryPaymentUncheckedUpdateManyWithoutStaffInput>
}

export type SalaryPaymentCreateManySchoolInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  staffId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  staff?: Prisma.StaffUpdateOneRequiredWithoutSalariesNestedInput
}

export type SalaryPaymentUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentCreateManyStaffInput = {
  id?: string
  totalAmount: number
  deductions: number
  deductionReason?: string | null
  amountPaid: runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod: string
  status?: $Enums.PaymentStatus
  paymentDate: Date | string
  reference: string
  schoolId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SalaryPaymentUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutSalaryPaymentsNestedInput
}

export type SalaryPaymentUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SalaryPaymentUncheckedUpdateManyWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.IntFieldUpdateOperationsInput | number
  deductions?: Prisma.IntFieldUpdateOperationsInput | number
  deductionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amountPaid?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payPeriod?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SalaryPaymentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalAmount?: boolean
  deductions?: boolean
  deductionReason?: boolean
  amountPaid?: boolean
  payPeriod?: boolean
  status?: boolean
  paymentDate?: boolean
  reference?: boolean
  schoolId?: boolean
  staffId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["salaryPayment"]>

export type SalaryPaymentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalAmount?: boolean
  deductions?: boolean
  deductionReason?: boolean
  amountPaid?: boolean
  payPeriod?: boolean
  status?: boolean
  paymentDate?: boolean
  reference?: boolean
  schoolId?: boolean
  staffId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["salaryPayment"]>

export type SalaryPaymentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalAmount?: boolean
  deductions?: boolean
  deductionReason?: boolean
  amountPaid?: boolean
  payPeriod?: boolean
  status?: boolean
  paymentDate?: boolean
  reference?: boolean
  schoolId?: boolean
  staffId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["salaryPayment"]>

export type SalaryPaymentSelectScalar = {
  id?: boolean
  totalAmount?: boolean
  deductions?: boolean
  deductionReason?: boolean
  amountPaid?: boolean
  payPeriod?: boolean
  status?: boolean
  paymentDate?: boolean
  reference?: boolean
  schoolId?: boolean
  staffId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SalaryPaymentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "totalAmount" | "deductions" | "deductionReason" | "amountPaid" | "payPeriod" | "status" | "paymentDate" | "reference" | "schoolId" | "staffId" | "createdAt" | "updatedAt", ExtArgs["result"]["salaryPayment"]>
export type SalaryPaymentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type SalaryPaymentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type SalaryPaymentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}

export type $SalaryPaymentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SalaryPayment"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    staff: Prisma.$StaffPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    totalAmount: number
    deductions: number
    deductionReason: string | null
    amountPaid: runtime.Decimal
    payPeriod: string
    status: $Enums.PaymentStatus
    paymentDate: Date
    reference: string
    schoolId: string
    staffId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["salaryPayment"]>
  composites: {}
}

export type SalaryPaymentGetPayload<S extends boolean | null | undefined | SalaryPaymentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload, S>

export type SalaryPaymentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SalaryPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SalaryPaymentCountAggregateInputType | true
  }

export interface SalaryPaymentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryPayment'], meta: { name: 'SalaryPayment' } }
  /**
   * Find zero or one SalaryPayment that matches the filter.
   * @param {SalaryPaymentFindUniqueArgs} args - Arguments to find a SalaryPayment
   * @example
   * // Get one SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SalaryPaymentFindUniqueArgs>(args: Prisma.SelectSubset<T, SalaryPaymentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SalaryPayment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SalaryPaymentFindUniqueOrThrowArgs} args - Arguments to find a SalaryPayment
   * @example
   * // Get one SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SalaryPaymentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SalaryPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SalaryPayment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentFindFirstArgs} args - Arguments to find a SalaryPayment
   * @example
   * // Get one SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SalaryPaymentFindFirstArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentFindFirstArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SalaryPayment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentFindFirstOrThrowArgs} args - Arguments to find a SalaryPayment
   * @example
   * // Get one SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SalaryPaymentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SalaryPayments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SalaryPayments
   * const salaryPayments = await prisma.salaryPayment.findMany()
   * 
   * // Get first 10 SalaryPayments
   * const salaryPayments = await prisma.salaryPayment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const salaryPaymentWithIdOnly = await prisma.salaryPayment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SalaryPaymentFindManyArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SalaryPayment.
   * @param {SalaryPaymentCreateArgs} args - Arguments to create a SalaryPayment.
   * @example
   * // Create one SalaryPayment
   * const SalaryPayment = await prisma.salaryPayment.create({
   *   data: {
   *     // ... data to create a SalaryPayment
   *   }
   * })
   * 
   */
  create<T extends SalaryPaymentCreateArgs>(args: Prisma.SelectSubset<T, SalaryPaymentCreateArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SalaryPayments.
   * @param {SalaryPaymentCreateManyArgs} args - Arguments to create many SalaryPayments.
   * @example
   * // Create many SalaryPayments
   * const salaryPayment = await prisma.salaryPayment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SalaryPaymentCreateManyArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SalaryPayments and returns the data saved in the database.
   * @param {SalaryPaymentCreateManyAndReturnArgs} args - Arguments to create many SalaryPayments.
   * @example
   * // Create many SalaryPayments
   * const salaryPayment = await prisma.salaryPayment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SalaryPayments and only return the `id`
   * const salaryPaymentWithIdOnly = await prisma.salaryPayment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SalaryPaymentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SalaryPayment.
   * @param {SalaryPaymentDeleteArgs} args - Arguments to delete one SalaryPayment.
   * @example
   * // Delete one SalaryPayment
   * const SalaryPayment = await prisma.salaryPayment.delete({
   *   where: {
   *     // ... filter to delete one SalaryPayment
   *   }
   * })
   * 
   */
  delete<T extends SalaryPaymentDeleteArgs>(args: Prisma.SelectSubset<T, SalaryPaymentDeleteArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SalaryPayment.
   * @param {SalaryPaymentUpdateArgs} args - Arguments to update one SalaryPayment.
   * @example
   * // Update one SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SalaryPaymentUpdateArgs>(args: Prisma.SelectSubset<T, SalaryPaymentUpdateArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SalaryPayments.
   * @param {SalaryPaymentDeleteManyArgs} args - Arguments to filter SalaryPayments to delete.
   * @example
   * // Delete a few SalaryPayments
   * const { count } = await prisma.salaryPayment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SalaryPaymentDeleteManyArgs>(args?: Prisma.SelectSubset<T, SalaryPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SalaryPayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SalaryPayments
   * const salaryPayment = await prisma.salaryPayment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SalaryPaymentUpdateManyArgs>(args: Prisma.SelectSubset<T, SalaryPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SalaryPayments and returns the data updated in the database.
   * @param {SalaryPaymentUpdateManyAndReturnArgs} args - Arguments to update many SalaryPayments.
   * @example
   * // Update many SalaryPayments
   * const salaryPayment = await prisma.salaryPayment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SalaryPayments and only return the `id`
   * const salaryPaymentWithIdOnly = await prisma.salaryPayment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SalaryPaymentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SalaryPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SalaryPayment.
   * @param {SalaryPaymentUpsertArgs} args - Arguments to update or create a SalaryPayment.
   * @example
   * // Update or create a SalaryPayment
   * const salaryPayment = await prisma.salaryPayment.upsert({
   *   create: {
   *     // ... data to create a SalaryPayment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SalaryPayment we want to update
   *   }
   * })
   */
  upsert<T extends SalaryPaymentUpsertArgs>(args: Prisma.SelectSubset<T, SalaryPaymentUpsertArgs<ExtArgs>>): Prisma.Prisma__SalaryPaymentClient<runtime.Types.Result.GetResult<Prisma.$SalaryPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SalaryPayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentCountArgs} args - Arguments to filter SalaryPayments to count.
   * @example
   * // Count the number of SalaryPayments
   * const count = await prisma.salaryPayment.count({
   *   where: {
   *     // ... the filter for the SalaryPayments we want to count
   *   }
   * })
  **/
  count<T extends SalaryPaymentCountArgs>(
    args?: Prisma.Subset<T, SalaryPaymentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SalaryPaymentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SalaryPayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SalaryPaymentAggregateArgs>(args: Prisma.Subset<T, SalaryPaymentAggregateArgs>): Prisma.PrismaPromise<GetSalaryPaymentAggregateType<T>>

  /**
   * Group by SalaryPayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalaryPaymentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SalaryPaymentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SalaryPaymentGroupByArgs['orderBy'] }
      : { orderBy?: SalaryPaymentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SalaryPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SalaryPayment model
 */
readonly fields: SalaryPaymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SalaryPayment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SalaryPaymentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  staff<T extends Prisma.StaffDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StaffDefaultArgs<ExtArgs>>): Prisma.Prisma__StaffClient<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SalaryPayment model
 */
export interface SalaryPaymentFieldRefs {
  readonly id: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly totalAmount: Prisma.FieldRef<"SalaryPayment", 'Int'>
  readonly deductions: Prisma.FieldRef<"SalaryPayment", 'Int'>
  readonly deductionReason: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly amountPaid: Prisma.FieldRef<"SalaryPayment", 'Decimal'>
  readonly payPeriod: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly status: Prisma.FieldRef<"SalaryPayment", 'PaymentStatus'>
  readonly paymentDate: Prisma.FieldRef<"SalaryPayment", 'DateTime'>
  readonly reference: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly schoolId: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly staffId: Prisma.FieldRef<"SalaryPayment", 'String'>
  readonly createdAt: Prisma.FieldRef<"SalaryPayment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SalaryPayment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SalaryPayment findUnique
 */
export type SalaryPaymentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter, which SalaryPayment to fetch.
   */
  where: Prisma.SalaryPaymentWhereUniqueInput
}

/**
 * SalaryPayment findUniqueOrThrow
 */
export type SalaryPaymentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter, which SalaryPayment to fetch.
   */
  where: Prisma.SalaryPaymentWhereUniqueInput
}

/**
 * SalaryPayment findFirst
 */
export type SalaryPaymentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter, which SalaryPayment to fetch.
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SalaryPayments to fetch.
   */
  orderBy?: Prisma.SalaryPaymentOrderByWithRelationInput | Prisma.SalaryPaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SalaryPayments.
   */
  cursor?: Prisma.SalaryPaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SalaryPayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SalaryPayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SalaryPayments.
   */
  distinct?: Prisma.SalaryPaymentScalarFieldEnum | Prisma.SalaryPaymentScalarFieldEnum[]
}

/**
 * SalaryPayment findFirstOrThrow
 */
export type SalaryPaymentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter, which SalaryPayment to fetch.
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SalaryPayments to fetch.
   */
  orderBy?: Prisma.SalaryPaymentOrderByWithRelationInput | Prisma.SalaryPaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SalaryPayments.
   */
  cursor?: Prisma.SalaryPaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SalaryPayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SalaryPayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SalaryPayments.
   */
  distinct?: Prisma.SalaryPaymentScalarFieldEnum | Prisma.SalaryPaymentScalarFieldEnum[]
}

/**
 * SalaryPayment findMany
 */
export type SalaryPaymentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter, which SalaryPayments to fetch.
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SalaryPayments to fetch.
   */
  orderBy?: Prisma.SalaryPaymentOrderByWithRelationInput | Prisma.SalaryPaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SalaryPayments.
   */
  cursor?: Prisma.SalaryPaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SalaryPayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SalaryPayments.
   */
  skip?: number
  distinct?: Prisma.SalaryPaymentScalarFieldEnum | Prisma.SalaryPaymentScalarFieldEnum[]
}

/**
 * SalaryPayment create
 */
export type SalaryPaymentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * The data needed to create a SalaryPayment.
   */
  data: Prisma.XOR<Prisma.SalaryPaymentCreateInput, Prisma.SalaryPaymentUncheckedCreateInput>
}

/**
 * SalaryPayment createMany
 */
export type SalaryPaymentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SalaryPayments.
   */
  data: Prisma.SalaryPaymentCreateManyInput | Prisma.SalaryPaymentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SalaryPayment createManyAndReturn
 */
export type SalaryPaymentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * The data used to create many SalaryPayments.
   */
  data: Prisma.SalaryPaymentCreateManyInput | Prisma.SalaryPaymentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SalaryPayment update
 */
export type SalaryPaymentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * The data needed to update a SalaryPayment.
   */
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateInput, Prisma.SalaryPaymentUncheckedUpdateInput>
  /**
   * Choose, which SalaryPayment to update.
   */
  where: Prisma.SalaryPaymentWhereUniqueInput
}

/**
 * SalaryPayment updateMany
 */
export type SalaryPaymentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SalaryPayments.
   */
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateManyMutationInput, Prisma.SalaryPaymentUncheckedUpdateManyInput>
  /**
   * Filter which SalaryPayments to update
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * Limit how many SalaryPayments to update.
   */
  limit?: number
}

/**
 * SalaryPayment updateManyAndReturn
 */
export type SalaryPaymentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * The data used to update SalaryPayments.
   */
  data: Prisma.XOR<Prisma.SalaryPaymentUpdateManyMutationInput, Prisma.SalaryPaymentUncheckedUpdateManyInput>
  /**
   * Filter which SalaryPayments to update
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * Limit how many SalaryPayments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SalaryPayment upsert
 */
export type SalaryPaymentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * The filter to search for the SalaryPayment to update in case it exists.
   */
  where: Prisma.SalaryPaymentWhereUniqueInput
  /**
   * In case the SalaryPayment found by the `where` argument doesn't exist, create a new SalaryPayment with this data.
   */
  create: Prisma.XOR<Prisma.SalaryPaymentCreateInput, Prisma.SalaryPaymentUncheckedCreateInput>
  /**
   * In case the SalaryPayment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SalaryPaymentUpdateInput, Prisma.SalaryPaymentUncheckedUpdateInput>
}

/**
 * SalaryPayment delete
 */
export type SalaryPaymentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
  /**
   * Filter which SalaryPayment to delete.
   */
  where: Prisma.SalaryPaymentWhereUniqueInput
}

/**
 * SalaryPayment deleteMany
 */
export type SalaryPaymentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SalaryPayments to delete
   */
  where?: Prisma.SalaryPaymentWhereInput
  /**
   * Limit how many SalaryPayments to delete.
   */
  limit?: number
}

/**
 * SalaryPayment without action
 */
export type SalaryPaymentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SalaryPayment
   */
  select?: Prisma.SalaryPaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SalaryPayment
   */
  omit?: Prisma.SalaryPaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SalaryPaymentInclude<ExtArgs> | null
}
