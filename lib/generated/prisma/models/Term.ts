
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Term` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Term
 * 
 */
export type TermModel = runtime.Types.Result.DefaultSelection<Prisma.$TermPayload>

export type AggregateTerm = {
  _count: TermCountAggregateOutputType | null
  _avg: TermAvgAggregateOutputType | null
  _sum: TermSumAggregateOutputType | null
  _min: TermMinAggregateOutputType | null
  _max: TermMaxAggregateOutputType | null
}

export type TermAvgAggregateOutputType = {
  term: number | null
}

export type TermSumAggregateOutputType = {
  term: number | null
}

export type TermMinAggregateOutputType = {
  id: string | null
  term: number | null
  startDate: Date | null
  endDate: Date | null
  isCurrent: boolean | null
  schoolId: string | null
  academicYearId: string | null
}

export type TermMaxAggregateOutputType = {
  id: string | null
  term: number | null
  startDate: Date | null
  endDate: Date | null
  isCurrent: boolean | null
  schoolId: string | null
  academicYearId: string | null
}

export type TermCountAggregateOutputType = {
  id: number
  term: number
  startDate: number
  endDate: number
  isCurrent: number
  schoolId: number
  academicYearId: number
  _all: number
}


export type TermAvgAggregateInputType = {
  term?: true
}

export type TermSumAggregateInputType = {
  term?: true
}

export type TermMinAggregateInputType = {
  id?: true
  term?: true
  startDate?: true
  endDate?: true
  isCurrent?: true
  schoolId?: true
  academicYearId?: true
}

export type TermMaxAggregateInputType = {
  id?: true
  term?: true
  startDate?: true
  endDate?: true
  isCurrent?: true
  schoolId?: true
  academicYearId?: true
}

export type TermCountAggregateInputType = {
  id?: true
  term?: true
  startDate?: true
  endDate?: true
  isCurrent?: true
  schoolId?: true
  academicYearId?: true
  _all?: true
}

export type TermAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Term to aggregate.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Terms
  **/
  _count?: true | TermCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TermAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TermSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TermMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TermMaxAggregateInputType
}

export type GetTermAggregateType<T extends TermAggregateArgs> = {
      [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTerm[P]>
    : Prisma.GetScalarType<T[P], AggregateTerm[P]>
}




export type TermGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermWhereInput
  orderBy?: Prisma.TermOrderByWithAggregationInput | Prisma.TermOrderByWithAggregationInput[]
  by: Prisma.TermScalarFieldEnum[] | Prisma.TermScalarFieldEnum
  having?: Prisma.TermScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TermCountAggregateInputType | true
  _avg?: TermAvgAggregateInputType
  _sum?: TermSumAggregateInputType
  _min?: TermMinAggregateInputType
  _max?: TermMaxAggregateInputType
}

export type TermGroupByOutputType = {
  id: string
  term: number
  startDate: Date
  endDate: Date | null
  isCurrent: boolean
  schoolId: string
  academicYearId: string
  _count: TermCountAggregateOutputType | null
  _avg: TermAvgAggregateOutputType | null
  _sum: TermSumAggregateOutputType | null
  _min: TermMinAggregateOutputType | null
  _max: TermMaxAggregateOutputType | null
}

type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TermGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TermGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TermGroupByOutputType[P]>
      }
    >
  >



export type TermWhereInput = {
  AND?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  OR?: Prisma.TermWhereInput[]
  NOT?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  id?: Prisma.StringFilter<"Term"> | string
  term?: Prisma.IntFilter<"Term"> | number
  startDate?: Prisma.DateTimeFilter<"Term"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Term"> | Date | string | null
  isCurrent?: Prisma.BoolFilter<"Term"> | boolean
  schoolId?: Prisma.StringFilter<"Term"> | string
  academicYearId?: Prisma.StringFilter<"Term"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
  exams?: Prisma.ExamListRelationFilter
  assignments?: Prisma.AssignmentListRelationFilter
  events?: Prisma.EventListRelationFilter
  studentAttendances?: Prisma.StudentAttendanceListRelationFilter
  staffAttendances?: Prisma.StaffAttendanceListRelationFilter
  announcements?: Prisma.AnnouncementListRelationFilter
  invoices?: Prisma.InvoiceListRelationFilter
  termlyResults?: Prisma.TermlyResultListRelationFilter
}

export type TermOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  term?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  academicYear?: Prisma.AcademicYearOrderByWithRelationInput
  exams?: Prisma.ExamOrderByRelationAggregateInput
  assignments?: Prisma.AssignmentOrderByRelationAggregateInput
  events?: Prisma.EventOrderByRelationAggregateInput
  studentAttendances?: Prisma.StudentAttendanceOrderByRelationAggregateInput
  staffAttendances?: Prisma.StaffAttendanceOrderByRelationAggregateInput
  announcements?: Prisma.AnnouncementOrderByRelationAggregateInput
  invoices?: Prisma.InvoiceOrderByRelationAggregateInput
  termlyResults?: Prisma.TermlyResultOrderByRelationAggregateInput
}

export type TermWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_academicYearId_term?: Prisma.TermSchoolIdAcademicYearIdTermCompoundUniqueInput
  AND?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  OR?: Prisma.TermWhereInput[]
  NOT?: Prisma.TermWhereInput | Prisma.TermWhereInput[]
  term?: Prisma.IntFilter<"Term"> | number
  startDate?: Prisma.DateTimeFilter<"Term"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Term"> | Date | string | null
  isCurrent?: Prisma.BoolFilter<"Term"> | boolean
  schoolId?: Prisma.StringFilter<"Term"> | string
  academicYearId?: Prisma.StringFilter<"Term"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  academicYear?: Prisma.XOR<Prisma.AcademicYearScalarRelationFilter, Prisma.AcademicYearWhereInput>
  exams?: Prisma.ExamListRelationFilter
  assignments?: Prisma.AssignmentListRelationFilter
  events?: Prisma.EventListRelationFilter
  studentAttendances?: Prisma.StudentAttendanceListRelationFilter
  staffAttendances?: Prisma.StaffAttendanceListRelationFilter
  announcements?: Prisma.AnnouncementListRelationFilter
  invoices?: Prisma.InvoiceListRelationFilter
  termlyResults?: Prisma.TermlyResultListRelationFilter
}, "id" | "schoolId_academicYearId_term">

export type TermOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  term?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
  _count?: Prisma.TermCountOrderByAggregateInput
  _avg?: Prisma.TermAvgOrderByAggregateInput
  _max?: Prisma.TermMaxOrderByAggregateInput
  _min?: Prisma.TermMinOrderByAggregateInput
  _sum?: Prisma.TermSumOrderByAggregateInput
}

export type TermScalarWhereWithAggregatesInput = {
  AND?: Prisma.TermScalarWhereWithAggregatesInput | Prisma.TermScalarWhereWithAggregatesInput[]
  OR?: Prisma.TermScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TermScalarWhereWithAggregatesInput | Prisma.TermScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Term"> | string
  term?: Prisma.IntWithAggregatesFilter<"Term"> | number
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Term"> | Date | string
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Term"> | Date | string | null
  isCurrent?: Prisma.BoolWithAggregatesFilter<"Term"> | boolean
  schoolId?: Prisma.StringWithAggregatesFilter<"Term"> | string
  academicYearId?: Prisma.StringWithAggregatesFilter<"Term"> | string
}

export type TermCreateInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateManyInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
}

export type TermUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TermUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TermListRelationFilter = {
  every?: Prisma.TermWhereInput
  some?: Prisma.TermWhereInput
  none?: Prisma.TermWhereInput
}

export type TermOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TermSchoolIdAcademicYearIdTermCompoundUniqueInput = {
  schoolId: string
  academicYearId: string
  term: number
}

export type TermCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  term?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TermAvgOrderByAggregateInput = {
  term?: Prisma.SortOrder
}

export type TermMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  term?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TermMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  term?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  isCurrent?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  academicYearId?: Prisma.SortOrder
}

export type TermSumOrderByAggregateInput = {
  term?: Prisma.SortOrder
}

export type TermScalarRelationFilter = {
  is?: Prisma.TermWhereInput
  isNot?: Prisma.TermWhereInput
}

export type TermCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput> | Prisma.TermCreateWithoutSchoolInput[] | Prisma.TermUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutSchoolInput | Prisma.TermCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TermCreateManySchoolInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput> | Prisma.TermCreateWithoutSchoolInput[] | Prisma.TermUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutSchoolInput | Prisma.TermCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TermCreateManySchoolInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput> | Prisma.TermCreateWithoutSchoolInput[] | Prisma.TermUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutSchoolInput | Prisma.TermCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TermUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TermCreateManySchoolInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TermUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutSchoolInput | Prisma.TermUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput> | Prisma.TermCreateWithoutSchoolInput[] | Prisma.TermUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutSchoolInput | Prisma.TermCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TermUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TermCreateManySchoolInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TermUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutSchoolInput | Prisma.TermUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput> | Prisma.TermCreateWithoutAcademicYearInput[] | Prisma.TermUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAcademicYearInput | Prisma.TermCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.TermCreateManyAcademicYearInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUncheckedCreateNestedManyWithoutAcademicYearInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput> | Prisma.TermCreateWithoutAcademicYearInput[] | Prisma.TermUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAcademicYearInput | Prisma.TermCreateOrConnectWithoutAcademicYearInput[]
  createMany?: Prisma.TermCreateManyAcademicYearInputEnvelope
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
}

export type TermUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput> | Prisma.TermCreateWithoutAcademicYearInput[] | Prisma.TermUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAcademicYearInput | Prisma.TermCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.TermUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.TermCreateManyAcademicYearInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.TermUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutAcademicYearInput | Prisma.TermUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type TermUncheckedUpdateManyWithoutAcademicYearNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput> | Prisma.TermCreateWithoutAcademicYearInput[] | Prisma.TermUncheckedCreateWithoutAcademicYearInput[]
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAcademicYearInput | Prisma.TermCreateOrConnectWithoutAcademicYearInput[]
  upsert?: Prisma.TermUpsertWithWhereUniqueWithoutAcademicYearInput | Prisma.TermUpsertWithWhereUniqueWithoutAcademicYearInput[]
  createMany?: Prisma.TermCreateManyAcademicYearInputEnvelope
  set?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  disconnect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  delete?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  connect?: Prisma.TermWhereUniqueInput | Prisma.TermWhereUniqueInput[]
  update?: Prisma.TermUpdateWithWhereUniqueWithoutAcademicYearInput | Prisma.TermUpdateWithWhereUniqueWithoutAcademicYearInput[]
  updateMany?: Prisma.TermUpdateManyWithWhereWithoutAcademicYearInput | Prisma.TermUpdateManyWithWhereWithoutAcademicYearInput[]
  deleteMany?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TermCreateNestedOneWithoutExamsInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutExamsInput, Prisma.TermUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutExamsInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutExamsNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutExamsInput, Prisma.TermUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutExamsInput
  upsert?: Prisma.TermUpsertWithoutExamsInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutExamsInput, Prisma.TermUpdateWithoutExamsInput>, Prisma.TermUncheckedUpdateWithoutExamsInput>
}

export type TermCreateNestedOneWithoutAssignmentsInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAssignmentsInput, Prisma.TermUncheckedCreateWithoutAssignmentsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAssignmentsInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutAssignmentsNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAssignmentsInput, Prisma.TermUncheckedCreateWithoutAssignmentsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAssignmentsInput
  upsert?: Prisma.TermUpsertWithoutAssignmentsInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutAssignmentsInput, Prisma.TermUpdateWithoutAssignmentsInput>, Prisma.TermUncheckedUpdateWithoutAssignmentsInput>
}

export type TermCreateNestedOneWithoutStudentAttendancesInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutStudentAttendancesInput, Prisma.TermUncheckedCreateWithoutStudentAttendancesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutStudentAttendancesInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutStudentAttendancesNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutStudentAttendancesInput, Prisma.TermUncheckedCreateWithoutStudentAttendancesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutStudentAttendancesInput
  upsert?: Prisma.TermUpsertWithoutStudentAttendancesInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutStudentAttendancesInput, Prisma.TermUpdateWithoutStudentAttendancesInput>, Prisma.TermUncheckedUpdateWithoutStudentAttendancesInput>
}

export type TermCreateNestedOneWithoutStaffAttendancesInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutStaffAttendancesInput, Prisma.TermUncheckedCreateWithoutStaffAttendancesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutStaffAttendancesInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutStaffAttendancesNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutStaffAttendancesInput, Prisma.TermUncheckedCreateWithoutStaffAttendancesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutStaffAttendancesInput
  upsert?: Prisma.TermUpsertWithoutStaffAttendancesInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutStaffAttendancesInput, Prisma.TermUpdateWithoutStaffAttendancesInput>, Prisma.TermUncheckedUpdateWithoutStaffAttendancesInput>
}

export type TermCreateNestedOneWithoutTermlyResultsInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermlyResultsInput, Prisma.TermUncheckedCreateWithoutTermlyResultsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermlyResultsInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutTermlyResultsNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutTermlyResultsInput, Prisma.TermUncheckedCreateWithoutTermlyResultsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutTermlyResultsInput
  upsert?: Prisma.TermUpsertWithoutTermlyResultsInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutTermlyResultsInput, Prisma.TermUpdateWithoutTermlyResultsInput>, Prisma.TermUncheckedUpdateWithoutTermlyResultsInput>
}

export type TermCreateNestedOneWithoutInvoicesInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutInvoicesInput, Prisma.TermUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutInvoicesInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutInvoicesNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutInvoicesInput, Prisma.TermUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutInvoicesInput
  upsert?: Prisma.TermUpsertWithoutInvoicesInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutInvoicesInput, Prisma.TermUpdateWithoutInvoicesInput>, Prisma.TermUncheckedUpdateWithoutInvoicesInput>
}

export type TermCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutEventsInput, Prisma.TermUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutEventsInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutEventsInput, Prisma.TermUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutEventsInput
  upsert?: Prisma.TermUpsertWithoutEventsInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutEventsInput, Prisma.TermUpdateWithoutEventsInput>, Prisma.TermUncheckedUpdateWithoutEventsInput>
}

export type TermCreateNestedOneWithoutAnnouncementsInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAnnouncementsInput, Prisma.TermUncheckedCreateWithoutAnnouncementsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAnnouncementsInput
  connect?: Prisma.TermWhereUniqueInput
}

export type TermUpdateOneRequiredWithoutAnnouncementsNestedInput = {
  create?: Prisma.XOR<Prisma.TermCreateWithoutAnnouncementsInput, Prisma.TermUncheckedCreateWithoutAnnouncementsInput>
  connectOrCreate?: Prisma.TermCreateOrConnectWithoutAnnouncementsInput
  upsert?: Prisma.TermUpsertWithoutAnnouncementsInput
  connect?: Prisma.TermWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TermUpdateToOneWithWhereWithoutAnnouncementsInput, Prisma.TermUpdateWithoutAnnouncementsInput>, Prisma.TermUncheckedUpdateWithoutAnnouncementsInput>
}

export type TermCreateWithoutSchoolInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutSchoolInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutSchoolInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput>
}

export type TermCreateManySchoolInputEnvelope = {
  data: Prisma.TermCreateManySchoolInput | Prisma.TermCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type TermUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TermWhereUniqueInput
  update: Prisma.XOR<Prisma.TermUpdateWithoutSchoolInput, Prisma.TermUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutSchoolInput, Prisma.TermUncheckedCreateWithoutSchoolInput>
}

export type TermUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TermWhereUniqueInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutSchoolInput, Prisma.TermUncheckedUpdateWithoutSchoolInput>
}

export type TermUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.TermScalarWhereInput
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyWithoutSchoolInput>
}

export type TermScalarWhereInput = {
  AND?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
  OR?: Prisma.TermScalarWhereInput[]
  NOT?: Prisma.TermScalarWhereInput | Prisma.TermScalarWhereInput[]
  id?: Prisma.StringFilter<"Term"> | string
  term?: Prisma.IntFilter<"Term"> | number
  startDate?: Prisma.DateTimeFilter<"Term"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Term"> | Date | string | null
  isCurrent?: Prisma.BoolFilter<"Term"> | boolean
  schoolId?: Prisma.StringFilter<"Term"> | string
  academicYearId?: Prisma.StringFilter<"Term"> | string
}

export type TermCreateWithoutAcademicYearInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutAcademicYearInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutAcademicYearInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput>
}

export type TermCreateManyAcademicYearInputEnvelope = {
  data: Prisma.TermCreateManyAcademicYearInput | Prisma.TermCreateManyAcademicYearInput[]
  skipDuplicates?: boolean
}

export type TermUpsertWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.TermWhereUniqueInput
  update: Prisma.XOR<Prisma.TermUpdateWithoutAcademicYearInput, Prisma.TermUncheckedUpdateWithoutAcademicYearInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutAcademicYearInput, Prisma.TermUncheckedCreateWithoutAcademicYearInput>
}

export type TermUpdateWithWhereUniqueWithoutAcademicYearInput = {
  where: Prisma.TermWhereUniqueInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutAcademicYearInput, Prisma.TermUncheckedUpdateWithoutAcademicYearInput>
}

export type TermUpdateManyWithWhereWithoutAcademicYearInput = {
  where: Prisma.TermScalarWhereInput
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyWithoutAcademicYearInput>
}

export type TermCreateWithoutExamsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutExamsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutExamsInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutExamsInput, Prisma.TermUncheckedCreateWithoutExamsInput>
}

export type TermUpsertWithoutExamsInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutExamsInput, Prisma.TermUncheckedUpdateWithoutExamsInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutExamsInput, Prisma.TermUncheckedCreateWithoutExamsInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutExamsInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutExamsInput, Prisma.TermUncheckedUpdateWithoutExamsInput>
}

export type TermUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutAssignmentsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutAssignmentsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutAssignmentsInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutAssignmentsInput, Prisma.TermUncheckedCreateWithoutAssignmentsInput>
}

export type TermUpsertWithoutAssignmentsInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutAssignmentsInput, Prisma.TermUncheckedUpdateWithoutAssignmentsInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutAssignmentsInput, Prisma.TermUncheckedCreateWithoutAssignmentsInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutAssignmentsInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutAssignmentsInput, Prisma.TermUncheckedUpdateWithoutAssignmentsInput>
}

export type TermUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutStudentAttendancesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutStudentAttendancesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutStudentAttendancesInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutStudentAttendancesInput, Prisma.TermUncheckedCreateWithoutStudentAttendancesInput>
}

export type TermUpsertWithoutStudentAttendancesInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutStudentAttendancesInput, Prisma.TermUncheckedUpdateWithoutStudentAttendancesInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutStudentAttendancesInput, Prisma.TermUncheckedCreateWithoutStudentAttendancesInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutStudentAttendancesInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutStudentAttendancesInput, Prisma.TermUncheckedUpdateWithoutStudentAttendancesInput>
}

export type TermUpdateWithoutStudentAttendancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutStudentAttendancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutStaffAttendancesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutStaffAttendancesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutStaffAttendancesInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutStaffAttendancesInput, Prisma.TermUncheckedCreateWithoutStaffAttendancesInput>
}

export type TermUpsertWithoutStaffAttendancesInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutStaffAttendancesInput, Prisma.TermUncheckedUpdateWithoutStaffAttendancesInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutStaffAttendancesInput, Prisma.TermUncheckedCreateWithoutStaffAttendancesInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutStaffAttendancesInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutStaffAttendancesInput, Prisma.TermUncheckedUpdateWithoutStaffAttendancesInput>
}

export type TermUpdateWithoutStaffAttendancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutStaffAttendancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutTermlyResultsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutTermlyResultsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutTermlyResultsInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutTermlyResultsInput, Prisma.TermUncheckedCreateWithoutTermlyResultsInput>
}

export type TermUpsertWithoutTermlyResultsInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutTermlyResultsInput, Prisma.TermUncheckedUpdateWithoutTermlyResultsInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutTermlyResultsInput, Prisma.TermUncheckedCreateWithoutTermlyResultsInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutTermlyResultsInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutTermlyResultsInput, Prisma.TermUncheckedUpdateWithoutTermlyResultsInput>
}

export type TermUpdateWithoutTermlyResultsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutTermlyResultsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutInvoicesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutInvoicesInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutInvoicesInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutInvoicesInput, Prisma.TermUncheckedCreateWithoutInvoicesInput>
}

export type TermUpsertWithoutInvoicesInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutInvoicesInput, Prisma.TermUncheckedUpdateWithoutInvoicesInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutInvoicesInput, Prisma.TermUncheckedCreateWithoutInvoicesInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutInvoicesInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutInvoicesInput, Prisma.TermUncheckedUpdateWithoutInvoicesInput>
}

export type TermUpdateWithoutInvoicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutInvoicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutEventsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutEventsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutEventsInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutEventsInput, Prisma.TermUncheckedCreateWithoutEventsInput>
}

export type TermUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutEventsInput, Prisma.TermUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutEventsInput, Prisma.TermUncheckedCreateWithoutEventsInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutEventsInput, Prisma.TermUncheckedUpdateWithoutEventsInput>
}

export type TermUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateWithoutAnnouncementsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutTermsInput
  academicYear: Prisma.AcademicYearCreateNestedOneWithoutTermsInput
  exams?: Prisma.ExamCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutTermInput
  events?: Prisma.EventCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultCreateNestedManyWithoutTermInput
}

export type TermUncheckedCreateWithoutAnnouncementsInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
  academicYearId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutTermInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutTermInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutTermInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedCreateNestedManyWithoutTermInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedCreateNestedManyWithoutTermInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutTermInput
  termlyResults?: Prisma.TermlyResultUncheckedCreateNestedManyWithoutTermInput
}

export type TermCreateOrConnectWithoutAnnouncementsInput = {
  where: Prisma.TermWhereUniqueInput
  create: Prisma.XOR<Prisma.TermCreateWithoutAnnouncementsInput, Prisma.TermUncheckedCreateWithoutAnnouncementsInput>
}

export type TermUpsertWithoutAnnouncementsInput = {
  update: Prisma.XOR<Prisma.TermUpdateWithoutAnnouncementsInput, Prisma.TermUncheckedUpdateWithoutAnnouncementsInput>
  create: Prisma.XOR<Prisma.TermCreateWithoutAnnouncementsInput, Prisma.TermUncheckedCreateWithoutAnnouncementsInput>
  where?: Prisma.TermWhereInput
}

export type TermUpdateToOneWithWhereWithoutAnnouncementsInput = {
  where?: Prisma.TermWhereInput
  data: Prisma.XOR<Prisma.TermUpdateWithoutAnnouncementsInput, Prisma.TermUncheckedUpdateWithoutAnnouncementsInput>
}

export type TermUpdateWithoutAnnouncementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutAnnouncementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermCreateManySchoolInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  academicYearId: string
}

export type TermUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  academicYear?: Prisma.AcademicYearUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  academicYearId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TermCreateManyAcademicYearInput = {
  id?: string
  term: number
  startDate: Date | string
  endDate?: Date | string | null
  isCurrent?: boolean
  schoolId: string
}

export type TermUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutTermsNestedInput
  exams?: Prisma.ExamUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutTermNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutTermNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutTermNestedInput
  studentAttendances?: Prisma.StudentAttendanceUncheckedUpdateManyWithoutTermNestedInput
  staffAttendances?: Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutTermNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutTermNestedInput
  termlyResults?: Prisma.TermlyResultUncheckedUpdateManyWithoutTermNestedInput
}

export type TermUncheckedUpdateManyWithoutAcademicYearInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  term?: Prisma.IntFieldUpdateOperationsInput | number
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isCurrent?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TermCountOutputType
 */

export type TermCountOutputType = {
  exams: number
  assignments: number
  events: number
  studentAttendances: number
  staffAttendances: number
  announcements: number
  invoices: number
  termlyResults: number
}

export type TermCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  exams?: boolean | TermCountOutputTypeCountExamsArgs
  assignments?: boolean | TermCountOutputTypeCountAssignmentsArgs
  events?: boolean | TermCountOutputTypeCountEventsArgs
  studentAttendances?: boolean | TermCountOutputTypeCountStudentAttendancesArgs
  staffAttendances?: boolean | TermCountOutputTypeCountStaffAttendancesArgs
  announcements?: boolean | TermCountOutputTypeCountAnnouncementsArgs
  invoices?: boolean | TermCountOutputTypeCountInvoicesArgs
  termlyResults?: boolean | TermCountOutputTypeCountTermlyResultsArgs
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TermCountOutputType
   */
  select?: Prisma.TermCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountExamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssignmentWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountStudentAttendancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StudentAttendanceWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountStaffAttendancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffAttendanceWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountAnnouncementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnnouncementWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountInvoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvoiceWhereInput
}

/**
 * TermCountOutputType without action
 */
export type TermCountOutputTypeCountTermlyResultsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TermlyResultWhereInput
}


export type TermSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  term?: boolean
  startDate?: boolean
  endDate?: boolean
  isCurrent?: boolean
  schoolId?: boolean
  academicYearId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  exams?: boolean | Prisma.Term$examsArgs<ExtArgs>
  assignments?: boolean | Prisma.Term$assignmentsArgs<ExtArgs>
  events?: boolean | Prisma.Term$eventsArgs<ExtArgs>
  studentAttendances?: boolean | Prisma.Term$studentAttendancesArgs<ExtArgs>
  staffAttendances?: boolean | Prisma.Term$staffAttendancesArgs<ExtArgs>
  announcements?: boolean | Prisma.Term$announcementsArgs<ExtArgs>
  invoices?: boolean | Prisma.Term$invoicesArgs<ExtArgs>
  termlyResults?: boolean | Prisma.Term$termlyResultsArgs<ExtArgs>
  _count?: boolean | Prisma.TermCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  term?: boolean
  startDate?: boolean
  endDate?: boolean
  isCurrent?: boolean
  schoolId?: boolean
  academicYearId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  term?: boolean
  startDate?: boolean
  endDate?: boolean
  isCurrent?: boolean
  schoolId?: boolean
  academicYearId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}, ExtArgs["result"]["term"]>

export type TermSelectScalar = {
  id?: boolean
  term?: boolean
  startDate?: boolean
  endDate?: boolean
  isCurrent?: boolean
  schoolId?: boolean
  academicYearId?: boolean
}

export type TermOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "term" | "startDate" | "endDate" | "isCurrent" | "schoolId" | "academicYearId", ExtArgs["result"]["term"]>
export type TermInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
  exams?: boolean | Prisma.Term$examsArgs<ExtArgs>
  assignments?: boolean | Prisma.Term$assignmentsArgs<ExtArgs>
  events?: boolean | Prisma.Term$eventsArgs<ExtArgs>
  studentAttendances?: boolean | Prisma.Term$studentAttendancesArgs<ExtArgs>
  staffAttendances?: boolean | Prisma.Term$staffAttendancesArgs<ExtArgs>
  announcements?: boolean | Prisma.Term$announcementsArgs<ExtArgs>
  invoices?: boolean | Prisma.Term$invoicesArgs<ExtArgs>
  termlyResults?: boolean | Prisma.Term$termlyResultsArgs<ExtArgs>
  _count?: boolean | Prisma.TermCountOutputTypeDefaultArgs<ExtArgs>
}
export type TermIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}
export type TermIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  academicYear?: boolean | Prisma.AcademicYearDefaultArgs<ExtArgs>
}

export type $TermPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Term"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    academicYear: Prisma.$AcademicYearPayload<ExtArgs>
    exams: Prisma.$ExamPayload<ExtArgs>[]
    assignments: Prisma.$AssignmentPayload<ExtArgs>[]
    events: Prisma.$EventPayload<ExtArgs>[]
    studentAttendances: Prisma.$StudentAttendancePayload<ExtArgs>[]
    staffAttendances: Prisma.$StaffAttendancePayload<ExtArgs>[]
    announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
    invoices: Prisma.$InvoicePayload<ExtArgs>[]
    termlyResults: Prisma.$TermlyResultPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    term: number
    startDate: Date
    endDate: Date | null
    isCurrent: boolean
    schoolId: string
    academicYearId: string
  }, ExtArgs["result"]["term"]>
  composites: {}
}

export type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TermPayload, S>

export type TermCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TermCountAggregateInputType | true
  }

export interface TermDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
  /**
   * Find zero or one Term that matches the filter.
   * @param {TermFindUniqueArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TermFindUniqueArgs>(args: Prisma.SelectSubset<T, TermFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Term that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Term that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindFirstArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TermFindFirstArgs>(args?: Prisma.SelectSubset<T, TermFindFirstArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Term that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
   * @example
   * // Get one Term
   * const term = await prisma.term.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TermFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Terms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Terms
   * const terms = await prisma.term.findMany()
   * 
   * // Get first 10 Terms
   * const terms = await prisma.term.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TermFindManyArgs>(args?: Prisma.SelectSubset<T, TermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Term.
   * @param {TermCreateArgs} args - Arguments to create a Term.
   * @example
   * // Create one Term
   * const Term = await prisma.term.create({
   *   data: {
   *     // ... data to create a Term
   *   }
   * })
   * 
   */
  create<T extends TermCreateArgs>(args: Prisma.SelectSubset<T, TermCreateArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Terms.
   * @param {TermCreateManyArgs} args - Arguments to create many Terms.
   * @example
   * // Create many Terms
   * const term = await prisma.term.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TermCreateManyArgs>(args?: Prisma.SelectSubset<T, TermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Terms and returns the data saved in the database.
   * @param {TermCreateManyAndReturnArgs} args - Arguments to create many Terms.
   * @example
   * // Create many Terms
   * const term = await prisma.term.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Terms and only return the `id`
   * const termWithIdOnly = await prisma.term.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TermCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TermCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Term.
   * @param {TermDeleteArgs} args - Arguments to delete one Term.
   * @example
   * // Delete one Term
   * const Term = await prisma.term.delete({
   *   where: {
   *     // ... filter to delete one Term
   *   }
   * })
   * 
   */
  delete<T extends TermDeleteArgs>(args: Prisma.SelectSubset<T, TermDeleteArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Term.
   * @param {TermUpdateArgs} args - Arguments to update one Term.
   * @example
   * // Update one Term
   * const term = await prisma.term.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TermUpdateArgs>(args: Prisma.SelectSubset<T, TermUpdateArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Terms.
   * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
   * @example
   * // Delete a few Terms
   * const { count } = await prisma.term.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TermDeleteManyArgs>(args?: Prisma.SelectSubset<T, TermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Terms
   * const term = await prisma.term.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TermUpdateManyArgs>(args: Prisma.SelectSubset<T, TermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terms and returns the data updated in the database.
   * @param {TermUpdateManyAndReturnArgs} args - Arguments to update many Terms.
   * @example
   * // Update many Terms
   * const term = await prisma.term.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Terms and only return the `id`
   * const termWithIdOnly = await prisma.term.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TermUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TermUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Term.
   * @param {TermUpsertArgs} args - Arguments to update or create a Term.
   * @example
   * // Update or create a Term
   * const term = await prisma.term.upsert({
   *   create: {
   *     // ... data to create a Term
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Term we want to update
   *   }
   * })
   */
  upsert<T extends TermUpsertArgs>(args: Prisma.SelectSubset<T, TermUpsertArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermCountArgs} args - Arguments to filter Terms to count.
   * @example
   * // Count the number of Terms
   * const count = await prisma.term.count({
   *   where: {
   *     // ... the filter for the Terms we want to count
   *   }
   * })
  **/
  count<T extends TermCountArgs>(
    args?: Prisma.Subset<T, TermCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TermCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Term.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TermAggregateArgs>(args: Prisma.Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

  /**
   * Group by Term.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TermGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TermGroupByArgs['orderBy'] }
      : { orderBy?: TermGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Term model
 */
readonly fields: TermFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Term.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TermClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  academicYear<T extends Prisma.AcademicYearDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AcademicYearDefaultArgs<ExtArgs>>): Prisma.Prisma__AcademicYearClient<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exams<T extends Prisma.Term$examsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$examsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  assignments<T extends Prisma.Term$assignmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  events<T extends Prisma.Term$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  studentAttendances<T extends Prisma.Term$studentAttendancesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$studentAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  staffAttendances<T extends Prisma.Term$staffAttendancesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$staffAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  announcements<T extends Prisma.Term$announcementsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  invoices<T extends Prisma.Term$invoicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  termlyResults<T extends Prisma.Term$termlyResultsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Term$termlyResultsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TermlyResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Term model
 */
export interface TermFieldRefs {
  readonly id: Prisma.FieldRef<"Term", 'String'>
  readonly term: Prisma.FieldRef<"Term", 'Int'>
  readonly startDate: Prisma.FieldRef<"Term", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Term", 'DateTime'>
  readonly isCurrent: Prisma.FieldRef<"Term", 'Boolean'>
  readonly schoolId: Prisma.FieldRef<"Term", 'String'>
  readonly academicYearId: Prisma.FieldRef<"Term", 'String'>
}
    

// Custom InputTypes
/**
 * Term findUnique
 */
export type TermFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term findUniqueOrThrow
 */
export type TermFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term findFirst
 */
export type TermFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terms.
   */
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term findFirstOrThrow
 */
export type TermFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Term to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terms.
   */
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term findMany
 */
export type TermFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter, which Terms to fetch.
   */
  where?: Prisma.TermWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terms to fetch.
   */
  orderBy?: Prisma.TermOrderByWithRelationInput | Prisma.TermOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Terms.
   */
  cursor?: Prisma.TermWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terms.
   */
  skip?: number
  distinct?: Prisma.TermScalarFieldEnum | Prisma.TermScalarFieldEnum[]
}

/**
 * Term create
 */
export type TermCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The data needed to create a Term.
   */
  data: Prisma.XOR<Prisma.TermCreateInput, Prisma.TermUncheckedCreateInput>
}

/**
 * Term createMany
 */
export type TermCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Terms.
   */
  data: Prisma.TermCreateManyInput | Prisma.TermCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Term createManyAndReturn
 */
export type TermCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * The data used to create many Terms.
   */
  data: Prisma.TermCreateManyInput | Prisma.TermCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Term update
 */
export type TermUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The data needed to update a Term.
   */
  data: Prisma.XOR<Prisma.TermUpdateInput, Prisma.TermUncheckedUpdateInput>
  /**
   * Choose, which Term to update.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term updateMany
 */
export type TermUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Terms.
   */
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyInput>
  /**
   * Filter which Terms to update
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to update.
   */
  limit?: number
}

/**
 * Term updateManyAndReturn
 */
export type TermUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * The data used to update Terms.
   */
  data: Prisma.XOR<Prisma.TermUpdateManyMutationInput, Prisma.TermUncheckedUpdateManyInput>
  /**
   * Filter which Terms to update
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Term upsert
 */
export type TermUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * The filter to search for the Term to update in case it exists.
   */
  where: Prisma.TermWhereUniqueInput
  /**
   * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
   */
  create: Prisma.XOR<Prisma.TermCreateInput, Prisma.TermUncheckedCreateInput>
  /**
   * In case the Term was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TermUpdateInput, Prisma.TermUncheckedUpdateInput>
}

/**
 * Term delete
 */
export type TermDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
  /**
   * Filter which Term to delete.
   */
  where: Prisma.TermWhereUniqueInput
}

/**
 * Term deleteMany
 */
export type TermDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Terms to delete
   */
  where?: Prisma.TermWhereInput
  /**
   * Limit how many Terms to delete.
   */
  limit?: number
}

/**
 * Term.exams
 */
export type Term$examsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  cursor?: Prisma.ExamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Term.assignments
 */
export type Term$assignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  where?: Prisma.AssignmentWhereInput
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  cursor?: Prisma.AssignmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssignmentScalarFieldEnum | Prisma.AssignmentScalarFieldEnum[]
}

/**
 * Term.events
 */
export type Term$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  where?: Prisma.EventWhereInput
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  cursor?: Prisma.EventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Term.studentAttendances
 */
export type Term$studentAttendancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentAttendance
   */
  select?: Prisma.StudentAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentAttendance
   */
  omit?: Prisma.StudentAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentAttendanceInclude<ExtArgs> | null
  where?: Prisma.StudentAttendanceWhereInput
  orderBy?: Prisma.StudentAttendanceOrderByWithRelationInput | Prisma.StudentAttendanceOrderByWithRelationInput[]
  cursor?: Prisma.StudentAttendanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StudentAttendanceScalarFieldEnum | Prisma.StudentAttendanceScalarFieldEnum[]
}

/**
 * Term.staffAttendances
 */
export type Term$staffAttendancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  where?: Prisma.StaffAttendanceWhereInput
  orderBy?: Prisma.StaffAttendanceOrderByWithRelationInput | Prisma.StaffAttendanceOrderByWithRelationInput[]
  cursor?: Prisma.StaffAttendanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StaffAttendanceScalarFieldEnum | Prisma.StaffAttendanceScalarFieldEnum[]
}

/**
 * Term.announcements
 */
export type Term$announcementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnnouncementInclude<ExtArgs> | null
  where?: Prisma.AnnouncementWhereInput
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  cursor?: Prisma.AnnouncementWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnnouncementScalarFieldEnum | Prisma.AnnouncementScalarFieldEnum[]
}

/**
 * Term.invoices
 */
export type Term$invoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  where?: Prisma.InvoiceWhereInput
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  cursor?: Prisma.InvoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
}

/**
 * Term.termlyResults
 */
export type Term$termlyResultsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TermlyResult
   */
  select?: Prisma.TermlyResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TermlyResult
   */
  omit?: Prisma.TermlyResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermlyResultInclude<ExtArgs> | null
  where?: Prisma.TermlyResultWhereInput
  orderBy?: Prisma.TermlyResultOrderByWithRelationInput | Prisma.TermlyResultOrderByWithRelationInput[]
  cursor?: Prisma.TermlyResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TermlyResultScalarFieldEnum | Prisma.TermlyResultScalarFieldEnum[]
}

/**
 * Term without action
 */
export type TermDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Term
   */
  select?: Prisma.TermSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Term
   */
  omit?: Prisma.TermOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermInclude<ExtArgs> | null
}
