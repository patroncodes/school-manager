
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ParentStudent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ParentStudent
 * 
 */
export type ParentStudentModel = runtime.Types.Result.DefaultSelection<Prisma.$ParentStudentPayload>

export type AggregateParentStudent = {
  _count: ParentStudentCountAggregateOutputType | null
  _min: ParentStudentMinAggregateOutputType | null
  _max: ParentStudentMaxAggregateOutputType | null
}

export type ParentStudentMinAggregateOutputType = {
  parentId: string | null
  studentId: string | null
  relation: $Enums.ParentStudentRelationship | null
  isPrimary: boolean | null
}

export type ParentStudentMaxAggregateOutputType = {
  parentId: string | null
  studentId: string | null
  relation: $Enums.ParentStudentRelationship | null
  isPrimary: boolean | null
}

export type ParentStudentCountAggregateOutputType = {
  parentId: number
  studentId: number
  relation: number
  isPrimary: number
  _all: number
}


export type ParentStudentMinAggregateInputType = {
  parentId?: true
  studentId?: true
  relation?: true
  isPrimary?: true
}

export type ParentStudentMaxAggregateInputType = {
  parentId?: true
  studentId?: true
  relation?: true
  isPrimary?: true
}

export type ParentStudentCountAggregateInputType = {
  parentId?: true
  studentId?: true
  relation?: true
  isPrimary?: true
  _all?: true
}

export type ParentStudentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParentStudent to aggregate.
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentStudents to fetch.
   */
  orderBy?: Prisma.ParentStudentOrderByWithRelationInput | Prisma.ParentStudentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ParentStudentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentStudents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentStudents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ParentStudents
  **/
  _count?: true | ParentStudentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ParentStudentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ParentStudentMaxAggregateInputType
}

export type GetParentStudentAggregateType<T extends ParentStudentAggregateArgs> = {
      [P in keyof T & keyof AggregateParentStudent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateParentStudent[P]>
    : Prisma.GetScalarType<T[P], AggregateParentStudent[P]>
}




export type ParentStudentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ParentStudentWhereInput
  orderBy?: Prisma.ParentStudentOrderByWithAggregationInput | Prisma.ParentStudentOrderByWithAggregationInput[]
  by: Prisma.ParentStudentScalarFieldEnum[] | Prisma.ParentStudentScalarFieldEnum
  having?: Prisma.ParentStudentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ParentStudentCountAggregateInputType | true
  _min?: ParentStudentMinAggregateInputType
  _max?: ParentStudentMaxAggregateInputType
}

export type ParentStudentGroupByOutputType = {
  parentId: string
  studentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
  _count: ParentStudentCountAggregateOutputType | null
  _min: ParentStudentMinAggregateOutputType | null
  _max: ParentStudentMaxAggregateOutputType | null
}

type GetParentStudentGroupByPayload<T extends ParentStudentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ParentStudentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ParentStudentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ParentStudentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ParentStudentGroupByOutputType[P]>
      }
    >
  >



export type ParentStudentWhereInput = {
  AND?: Prisma.ParentStudentWhereInput | Prisma.ParentStudentWhereInput[]
  OR?: Prisma.ParentStudentWhereInput[]
  NOT?: Prisma.ParentStudentWhereInput | Prisma.ParentStudentWhereInput[]
  parentId?: Prisma.StringFilter<"ParentStudent"> | string
  studentId?: Prisma.StringFilter<"ParentStudent"> | string
  relation?: Prisma.EnumParentStudentRelationshipFilter<"ParentStudent"> | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFilter<"ParentStudent"> | boolean
  parent?: Prisma.XOR<Prisma.ParentScalarRelationFilter, Prisma.ParentWhereInput>
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
}

export type ParentStudentOrderByWithRelationInput = {
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  parent?: Prisma.ParentOrderByWithRelationInput
  student?: Prisma.StudentOrderByWithRelationInput
}

export type ParentStudentWhereUniqueInput = Prisma.AtLeast<{
  parentId_studentId?: Prisma.ParentStudentParentIdStudentIdCompoundUniqueInput
  AND?: Prisma.ParentStudentWhereInput | Prisma.ParentStudentWhereInput[]
  OR?: Prisma.ParentStudentWhereInput[]
  NOT?: Prisma.ParentStudentWhereInput | Prisma.ParentStudentWhereInput[]
  parentId?: Prisma.StringFilter<"ParentStudent"> | string
  studentId?: Prisma.StringFilter<"ParentStudent"> | string
  relation?: Prisma.EnumParentStudentRelationshipFilter<"ParentStudent"> | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFilter<"ParentStudent"> | boolean
  parent?: Prisma.XOR<Prisma.ParentScalarRelationFilter, Prisma.ParentWhereInput>
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
}, "parentId_studentId">

export type ParentStudentOrderByWithAggregationInput = {
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  _count?: Prisma.ParentStudentCountOrderByAggregateInput
  _max?: Prisma.ParentStudentMaxOrderByAggregateInput
  _min?: Prisma.ParentStudentMinOrderByAggregateInput
}

export type ParentStudentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ParentStudentScalarWhereWithAggregatesInput | Prisma.ParentStudentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ParentStudentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ParentStudentScalarWhereWithAggregatesInput | Prisma.ParentStudentScalarWhereWithAggregatesInput[]
  parentId?: Prisma.StringWithAggregatesFilter<"ParentStudent"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"ParentStudent"> | string
  relation?: Prisma.EnumParentStudentRelationshipWithAggregatesFilter<"ParentStudent"> | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolWithAggregatesFilter<"ParentStudent"> | boolean
}

export type ParentStudentCreateInput = {
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
  parent: Prisma.ParentCreateNestedOneWithoutParentStudentsInput
  student: Prisma.StudentCreateNestedOneWithoutParentStudentsInput
}

export type ParentStudentUncheckedCreateInput = {
  parentId: string
  studentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentUpdateInput = {
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  parent?: Prisma.ParentUpdateOneRequiredWithoutParentStudentsNestedInput
  student?: Prisma.StudentUpdateOneRequiredWithoutParentStudentsNestedInput
}

export type ParentStudentUncheckedUpdateInput = {
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentCreateManyInput = {
  parentId: string
  studentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentUpdateManyMutationInput = {
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentUncheckedUpdateManyInput = {
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentListRelationFilter = {
  every?: Prisma.ParentStudentWhereInput
  some?: Prisma.ParentStudentWhereInput
  none?: Prisma.ParentStudentWhereInput
}

export type ParentStudentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ParentStudentParentIdStudentIdCompoundUniqueInput = {
  parentId: string
  studentId: string
}

export type ParentStudentCountOrderByAggregateInput = {
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type ParentStudentMaxOrderByAggregateInput = {
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type ParentStudentMinOrderByAggregateInput = {
  parentId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type ParentStudentCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput> | Prisma.ParentStudentCreateWithoutStudentInput[] | Prisma.ParentStudentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutStudentInput | Prisma.ParentStudentCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ParentStudentCreateManyStudentInputEnvelope
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
}

export type ParentStudentUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput> | Prisma.ParentStudentCreateWithoutStudentInput[] | Prisma.ParentStudentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutStudentInput | Prisma.ParentStudentCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ParentStudentCreateManyStudentInputEnvelope
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
}

export type ParentStudentUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput> | Prisma.ParentStudentCreateWithoutStudentInput[] | Prisma.ParentStudentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutStudentInput | Prisma.ParentStudentCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ParentStudentUpsertWithWhereUniqueWithoutStudentInput | Prisma.ParentStudentUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ParentStudentCreateManyStudentInputEnvelope
  set?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  disconnect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  delete?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  update?: Prisma.ParentStudentUpdateWithWhereUniqueWithoutStudentInput | Prisma.ParentStudentUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ParentStudentUpdateManyWithWhereWithoutStudentInput | Prisma.ParentStudentUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
}

export type ParentStudentUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput> | Prisma.ParentStudentCreateWithoutStudentInput[] | Prisma.ParentStudentUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutStudentInput | Prisma.ParentStudentCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ParentStudentUpsertWithWhereUniqueWithoutStudentInput | Prisma.ParentStudentUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ParentStudentCreateManyStudentInputEnvelope
  set?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  disconnect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  delete?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  update?: Prisma.ParentStudentUpdateWithWhereUniqueWithoutStudentInput | Prisma.ParentStudentUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ParentStudentUpdateManyWithWhereWithoutStudentInput | Prisma.ParentStudentUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
}

export type ParentStudentCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput> | Prisma.ParentStudentCreateWithoutParentInput[] | Prisma.ParentStudentUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutParentInput | Prisma.ParentStudentCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ParentStudentCreateManyParentInputEnvelope
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
}

export type ParentStudentUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput> | Prisma.ParentStudentCreateWithoutParentInput[] | Prisma.ParentStudentUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutParentInput | Prisma.ParentStudentCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ParentStudentCreateManyParentInputEnvelope
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
}

export type ParentStudentUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput> | Prisma.ParentStudentCreateWithoutParentInput[] | Prisma.ParentStudentUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutParentInput | Prisma.ParentStudentCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ParentStudentUpsertWithWhereUniqueWithoutParentInput | Prisma.ParentStudentUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ParentStudentCreateManyParentInputEnvelope
  set?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  disconnect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  delete?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  update?: Prisma.ParentStudentUpdateWithWhereUniqueWithoutParentInput | Prisma.ParentStudentUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ParentStudentUpdateManyWithWhereWithoutParentInput | Prisma.ParentStudentUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
}

export type ParentStudentUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput> | Prisma.ParentStudentCreateWithoutParentInput[] | Prisma.ParentStudentUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentStudentCreateOrConnectWithoutParentInput | Prisma.ParentStudentCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ParentStudentUpsertWithWhereUniqueWithoutParentInput | Prisma.ParentStudentUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ParentStudentCreateManyParentInputEnvelope
  set?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  disconnect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  delete?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  connect?: Prisma.ParentStudentWhereUniqueInput | Prisma.ParentStudentWhereUniqueInput[]
  update?: Prisma.ParentStudentUpdateWithWhereUniqueWithoutParentInput | Prisma.ParentStudentUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ParentStudentUpdateManyWithWhereWithoutParentInput | Prisma.ParentStudentUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
}

export type EnumParentStudentRelationshipFieldUpdateOperationsInput = {
  set?: $Enums.ParentStudentRelationship
}

export type ParentStudentCreateWithoutStudentInput = {
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
  parent: Prisma.ParentCreateNestedOneWithoutParentStudentsInput
}

export type ParentStudentUncheckedCreateWithoutStudentInput = {
  parentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentCreateOrConnectWithoutStudentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  create: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput>
}

export type ParentStudentCreateManyStudentInputEnvelope = {
  data: Prisma.ParentStudentCreateManyStudentInput | Prisma.ParentStudentCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type ParentStudentUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  update: Prisma.XOR<Prisma.ParentStudentUpdateWithoutStudentInput, Prisma.ParentStudentUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.ParentStudentCreateWithoutStudentInput, Prisma.ParentStudentUncheckedCreateWithoutStudentInput>
}

export type ParentStudentUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  data: Prisma.XOR<Prisma.ParentStudentUpdateWithoutStudentInput, Prisma.ParentStudentUncheckedUpdateWithoutStudentInput>
}

export type ParentStudentUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ParentStudentScalarWhereInput
  data: Prisma.XOR<Prisma.ParentStudentUpdateManyMutationInput, Prisma.ParentStudentUncheckedUpdateManyWithoutStudentInput>
}

export type ParentStudentScalarWhereInput = {
  AND?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
  OR?: Prisma.ParentStudentScalarWhereInput[]
  NOT?: Prisma.ParentStudentScalarWhereInput | Prisma.ParentStudentScalarWhereInput[]
  parentId?: Prisma.StringFilter<"ParentStudent"> | string
  studentId?: Prisma.StringFilter<"ParentStudent"> | string
  relation?: Prisma.EnumParentStudentRelationshipFilter<"ParentStudent"> | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFilter<"ParentStudent"> | boolean
}

export type ParentStudentCreateWithoutParentInput = {
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
  student: Prisma.StudentCreateNestedOneWithoutParentStudentsInput
}

export type ParentStudentUncheckedCreateWithoutParentInput = {
  studentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentCreateOrConnectWithoutParentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  create: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput>
}

export type ParentStudentCreateManyParentInputEnvelope = {
  data: Prisma.ParentStudentCreateManyParentInput | Prisma.ParentStudentCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type ParentStudentUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  update: Prisma.XOR<Prisma.ParentStudentUpdateWithoutParentInput, Prisma.ParentStudentUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.ParentStudentCreateWithoutParentInput, Prisma.ParentStudentUncheckedCreateWithoutParentInput>
}

export type ParentStudentUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.ParentStudentWhereUniqueInput
  data: Prisma.XOR<Prisma.ParentStudentUpdateWithoutParentInput, Prisma.ParentStudentUncheckedUpdateWithoutParentInput>
}

export type ParentStudentUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.ParentStudentScalarWhereInput
  data: Prisma.XOR<Prisma.ParentStudentUpdateManyMutationInput, Prisma.ParentStudentUncheckedUpdateManyWithoutParentInput>
}

export type ParentStudentCreateManyStudentInput = {
  parentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentUpdateWithoutStudentInput = {
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  parent?: Prisma.ParentUpdateOneRequiredWithoutParentStudentsNestedInput
}

export type ParentStudentUncheckedUpdateWithoutStudentInput = {
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentUncheckedUpdateManyWithoutStudentInput = {
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentCreateManyParentInput = {
  studentId: string
  relation: $Enums.ParentStudentRelationship
  isPrimary: boolean
}

export type ParentStudentUpdateWithoutParentInput = {
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  student?: Prisma.StudentUpdateOneRequiredWithoutParentStudentsNestedInput
}

export type ParentStudentUncheckedUpdateWithoutParentInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParentStudentUncheckedUpdateManyWithoutParentInput = {
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.EnumParentStudentRelationshipFieldUpdateOperationsInput | $Enums.ParentStudentRelationship
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type ParentStudentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  parentId?: boolean
  studentId?: boolean
  relation?: boolean
  isPrimary?: boolean
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentStudent"]>

export type ParentStudentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  parentId?: boolean
  studentId?: boolean
  relation?: boolean
  isPrimary?: boolean
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentStudent"]>

export type ParentStudentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  parentId?: boolean
  studentId?: boolean
  relation?: boolean
  isPrimary?: boolean
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentStudent"]>

export type ParentStudentSelectScalar = {
  parentId?: boolean
  studentId?: boolean
  relation?: boolean
  isPrimary?: boolean
}

export type ParentStudentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"parentId" | "studentId" | "relation" | "isPrimary", ExtArgs["result"]["parentStudent"]>
export type ParentStudentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}
export type ParentStudentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}
export type ParentStudentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.ParentDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
}

export type $ParentStudentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ParentStudent"
  objects: {
    parent: Prisma.$ParentPayload<ExtArgs>
    student: Prisma.$StudentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    parentId: string
    studentId: string
    relation: $Enums.ParentStudentRelationship
    isPrimary: boolean
  }, ExtArgs["result"]["parentStudent"]>
  composites: {}
}

export type ParentStudentGetPayload<S extends boolean | null | undefined | ParentStudentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload, S>

export type ParentStudentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ParentStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ParentStudentCountAggregateInputType | true
  }

export interface ParentStudentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParentStudent'], meta: { name: 'ParentStudent' } }
  /**
   * Find zero or one ParentStudent that matches the filter.
   * @param {ParentStudentFindUniqueArgs} args - Arguments to find a ParentStudent
   * @example
   * // Get one ParentStudent
   * const parentStudent = await prisma.parentStudent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ParentStudentFindUniqueArgs>(args: Prisma.SelectSubset<T, ParentStudentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ParentStudent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ParentStudentFindUniqueOrThrowArgs} args - Arguments to find a ParentStudent
   * @example
   * // Get one ParentStudent
   * const parentStudent = await prisma.parentStudent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ParentStudentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ParentStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParentStudent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentFindFirstArgs} args - Arguments to find a ParentStudent
   * @example
   * // Get one ParentStudent
   * const parentStudent = await prisma.parentStudent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ParentStudentFindFirstArgs>(args?: Prisma.SelectSubset<T, ParentStudentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParentStudent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentFindFirstOrThrowArgs} args - Arguments to find a ParentStudent
   * @example
   * // Get one ParentStudent
   * const parentStudent = await prisma.parentStudent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ParentStudentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ParentStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ParentStudents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ParentStudents
   * const parentStudents = await prisma.parentStudent.findMany()
   * 
   * // Get first 10 ParentStudents
   * const parentStudents = await prisma.parentStudent.findMany({ take: 10 })
   * 
   * // Only select the `parentId`
   * const parentStudentWithParentIdOnly = await prisma.parentStudent.findMany({ select: { parentId: true } })
   * 
   */
  findMany<T extends ParentStudentFindManyArgs>(args?: Prisma.SelectSubset<T, ParentStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ParentStudent.
   * @param {ParentStudentCreateArgs} args - Arguments to create a ParentStudent.
   * @example
   * // Create one ParentStudent
   * const ParentStudent = await prisma.parentStudent.create({
   *   data: {
   *     // ... data to create a ParentStudent
   *   }
   * })
   * 
   */
  create<T extends ParentStudentCreateArgs>(args: Prisma.SelectSubset<T, ParentStudentCreateArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ParentStudents.
   * @param {ParentStudentCreateManyArgs} args - Arguments to create many ParentStudents.
   * @example
   * // Create many ParentStudents
   * const parentStudent = await prisma.parentStudent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ParentStudentCreateManyArgs>(args?: Prisma.SelectSubset<T, ParentStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ParentStudents and returns the data saved in the database.
   * @param {ParentStudentCreateManyAndReturnArgs} args - Arguments to create many ParentStudents.
   * @example
   * // Create many ParentStudents
   * const parentStudent = await prisma.parentStudent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ParentStudents and only return the `parentId`
   * const parentStudentWithParentIdOnly = await prisma.parentStudent.createManyAndReturn({
   *   select: { parentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ParentStudentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ParentStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ParentStudent.
   * @param {ParentStudentDeleteArgs} args - Arguments to delete one ParentStudent.
   * @example
   * // Delete one ParentStudent
   * const ParentStudent = await prisma.parentStudent.delete({
   *   where: {
   *     // ... filter to delete one ParentStudent
   *   }
   * })
   * 
   */
  delete<T extends ParentStudentDeleteArgs>(args: Prisma.SelectSubset<T, ParentStudentDeleteArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ParentStudent.
   * @param {ParentStudentUpdateArgs} args - Arguments to update one ParentStudent.
   * @example
   * // Update one ParentStudent
   * const parentStudent = await prisma.parentStudent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ParentStudentUpdateArgs>(args: Prisma.SelectSubset<T, ParentStudentUpdateArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ParentStudents.
   * @param {ParentStudentDeleteManyArgs} args - Arguments to filter ParentStudents to delete.
   * @example
   * // Delete a few ParentStudents
   * const { count } = await prisma.parentStudent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ParentStudentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ParentStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ParentStudents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ParentStudents
   * const parentStudent = await prisma.parentStudent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ParentStudentUpdateManyArgs>(args: Prisma.SelectSubset<T, ParentStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ParentStudents and returns the data updated in the database.
   * @param {ParentStudentUpdateManyAndReturnArgs} args - Arguments to update many ParentStudents.
   * @example
   * // Update many ParentStudents
   * const parentStudent = await prisma.parentStudent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ParentStudents and only return the `parentId`
   * const parentStudentWithParentIdOnly = await prisma.parentStudent.updateManyAndReturn({
   *   select: { parentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ParentStudentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ParentStudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ParentStudent.
   * @param {ParentStudentUpsertArgs} args - Arguments to update or create a ParentStudent.
   * @example
   * // Update or create a ParentStudent
   * const parentStudent = await prisma.parentStudent.upsert({
   *   create: {
   *     // ... data to create a ParentStudent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ParentStudent we want to update
   *   }
   * })
   */
  upsert<T extends ParentStudentUpsertArgs>(args: Prisma.SelectSubset<T, ParentStudentUpsertArgs<ExtArgs>>): Prisma.Prisma__ParentStudentClient<runtime.Types.Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ParentStudents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentCountArgs} args - Arguments to filter ParentStudents to count.
   * @example
   * // Count the number of ParentStudents
   * const count = await prisma.parentStudent.count({
   *   where: {
   *     // ... the filter for the ParentStudents we want to count
   *   }
   * })
  **/
  count<T extends ParentStudentCountArgs>(
    args?: Prisma.Subset<T, ParentStudentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ParentStudentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ParentStudent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ParentStudentAggregateArgs>(args: Prisma.Subset<T, ParentStudentAggregateArgs>): Prisma.PrismaPromise<GetParentStudentAggregateType<T>>

  /**
   * Group by ParentStudent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentStudentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ParentStudentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ParentStudentGroupByArgs['orderBy'] }
      : { orderBy?: ParentStudentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ParentStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ParentStudent model
 */
readonly fields: ParentStudentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ParentStudent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ParentStudentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  parent<T extends Prisma.ParentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ParentDefaultArgs<ExtArgs>>): Prisma.Prisma__ParentClient<runtime.Types.Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ParentStudent model
 */
export interface ParentStudentFieldRefs {
  readonly parentId: Prisma.FieldRef<"ParentStudent", 'String'>
  readonly studentId: Prisma.FieldRef<"ParentStudent", 'String'>
  readonly relation: Prisma.FieldRef<"ParentStudent", 'ParentStudentRelationship'>
  readonly isPrimary: Prisma.FieldRef<"ParentStudent", 'Boolean'>
}
    

// Custom InputTypes
/**
 * ParentStudent findUnique
 */
export type ParentStudentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter, which ParentStudent to fetch.
   */
  where: Prisma.ParentStudentWhereUniqueInput
}

/**
 * ParentStudent findUniqueOrThrow
 */
export type ParentStudentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter, which ParentStudent to fetch.
   */
  where: Prisma.ParentStudentWhereUniqueInput
}

/**
 * ParentStudent findFirst
 */
export type ParentStudentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter, which ParentStudent to fetch.
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentStudents to fetch.
   */
  orderBy?: Prisma.ParentStudentOrderByWithRelationInput | Prisma.ParentStudentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParentStudents.
   */
  cursor?: Prisma.ParentStudentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentStudents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentStudents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParentStudents.
   */
  distinct?: Prisma.ParentStudentScalarFieldEnum | Prisma.ParentStudentScalarFieldEnum[]
}

/**
 * ParentStudent findFirstOrThrow
 */
export type ParentStudentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter, which ParentStudent to fetch.
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentStudents to fetch.
   */
  orderBy?: Prisma.ParentStudentOrderByWithRelationInput | Prisma.ParentStudentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParentStudents.
   */
  cursor?: Prisma.ParentStudentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentStudents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentStudents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParentStudents.
   */
  distinct?: Prisma.ParentStudentScalarFieldEnum | Prisma.ParentStudentScalarFieldEnum[]
}

/**
 * ParentStudent findMany
 */
export type ParentStudentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter, which ParentStudents to fetch.
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentStudents to fetch.
   */
  orderBy?: Prisma.ParentStudentOrderByWithRelationInput | Prisma.ParentStudentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ParentStudents.
   */
  cursor?: Prisma.ParentStudentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentStudents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentStudents.
   */
  skip?: number
  distinct?: Prisma.ParentStudentScalarFieldEnum | Prisma.ParentStudentScalarFieldEnum[]
}

/**
 * ParentStudent create
 */
export type ParentStudentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * The data needed to create a ParentStudent.
   */
  data: Prisma.XOR<Prisma.ParentStudentCreateInput, Prisma.ParentStudentUncheckedCreateInput>
}

/**
 * ParentStudent createMany
 */
export type ParentStudentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ParentStudents.
   */
  data: Prisma.ParentStudentCreateManyInput | Prisma.ParentStudentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ParentStudent createManyAndReturn
 */
export type ParentStudentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * The data used to create many ParentStudents.
   */
  data: Prisma.ParentStudentCreateManyInput | Prisma.ParentStudentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ParentStudent update
 */
export type ParentStudentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * The data needed to update a ParentStudent.
   */
  data: Prisma.XOR<Prisma.ParentStudentUpdateInput, Prisma.ParentStudentUncheckedUpdateInput>
  /**
   * Choose, which ParentStudent to update.
   */
  where: Prisma.ParentStudentWhereUniqueInput
}

/**
 * ParentStudent updateMany
 */
export type ParentStudentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ParentStudents.
   */
  data: Prisma.XOR<Prisma.ParentStudentUpdateManyMutationInput, Prisma.ParentStudentUncheckedUpdateManyInput>
  /**
   * Filter which ParentStudents to update
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * Limit how many ParentStudents to update.
   */
  limit?: number
}

/**
 * ParentStudent updateManyAndReturn
 */
export type ParentStudentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * The data used to update ParentStudents.
   */
  data: Prisma.XOR<Prisma.ParentStudentUpdateManyMutationInput, Prisma.ParentStudentUncheckedUpdateManyInput>
  /**
   * Filter which ParentStudents to update
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * Limit how many ParentStudents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ParentStudent upsert
 */
export type ParentStudentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * The filter to search for the ParentStudent to update in case it exists.
   */
  where: Prisma.ParentStudentWhereUniqueInput
  /**
   * In case the ParentStudent found by the `where` argument doesn't exist, create a new ParentStudent with this data.
   */
  create: Prisma.XOR<Prisma.ParentStudentCreateInput, Prisma.ParentStudentUncheckedCreateInput>
  /**
   * In case the ParentStudent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ParentStudentUpdateInput, Prisma.ParentStudentUncheckedUpdateInput>
}

/**
 * ParentStudent delete
 */
export type ParentStudentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
  /**
   * Filter which ParentStudent to delete.
   */
  where: Prisma.ParentStudentWhereUniqueInput
}

/**
 * ParentStudent deleteMany
 */
export type ParentStudentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParentStudents to delete
   */
  where?: Prisma.ParentStudentWhereInput
  /**
   * Limit how many ParentStudents to delete.
   */
  limit?: number
}

/**
 * ParentStudent without action
 */
export type ParentStudentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentStudent
   */
  select?: Prisma.ParentStudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentStudent
   */
  omit?: Prisma.ParentStudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentStudentInclude<ExtArgs> | null
}
