
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Assignment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Assignment
 * 
 */
export type AssignmentModel = runtime.Types.Result.DefaultSelection<Prisma.$AssignmentPayload>

export type AggregateAssignment = {
  _count: AssignmentCountAggregateOutputType | null
  _avg: AssignmentAvgAggregateOutputType | null
  _sum: AssignmentSumAggregateOutputType | null
  _min: AssignmentMinAggregateOutputType | null
  _max: AssignmentMaxAggregateOutputType | null
}

export type AssignmentAvgAggregateOutputType = {
  maxScore: number | null
}

export type AssignmentSumAggregateOutputType = {
  maxScore: number | null
}

export type AssignmentMinAggregateOutputType = {
  id: string | null
  startDate: Date | null
  dueDate: Date | null
  maxScore: number | null
  schoolId: string | null
  subjectId: string | null
  classId: string | null
  termId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AssignmentMaxAggregateOutputType = {
  id: string | null
  startDate: Date | null
  dueDate: Date | null
  maxScore: number | null
  schoolId: string | null
  subjectId: string | null
  classId: string | null
  termId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AssignmentCountAggregateOutputType = {
  id: number
  startDate: number
  dueDate: number
  maxScore: number
  attachedFile: number
  schoolId: number
  subjectId: number
  classId: number
  termId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AssignmentAvgAggregateInputType = {
  maxScore?: true
}

export type AssignmentSumAggregateInputType = {
  maxScore?: true
}

export type AssignmentMinAggregateInputType = {
  id?: true
  startDate?: true
  dueDate?: true
  maxScore?: true
  schoolId?: true
  subjectId?: true
  classId?: true
  termId?: true
  createdAt?: true
  updatedAt?: true
}

export type AssignmentMaxAggregateInputType = {
  id?: true
  startDate?: true
  dueDate?: true
  maxScore?: true
  schoolId?: true
  subjectId?: true
  classId?: true
  termId?: true
  createdAt?: true
  updatedAt?: true
}

export type AssignmentCountAggregateInputType = {
  id?: true
  startDate?: true
  dueDate?: true
  maxScore?: true
  attachedFile?: true
  schoolId?: true
  subjectId?: true
  classId?: true
  termId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AssignmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Assignment to aggregate.
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assignments to fetch.
   */
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Assignments
  **/
  _count?: true | AssignmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssignmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssignmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssignmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssignmentMaxAggregateInputType
}

export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
      [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssignment[P]>
    : Prisma.GetScalarType<T[P], AggregateAssignment[P]>
}




export type AssignmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssignmentWhereInput
  orderBy?: Prisma.AssignmentOrderByWithAggregationInput | Prisma.AssignmentOrderByWithAggregationInput[]
  by: Prisma.AssignmentScalarFieldEnum[] | Prisma.AssignmentScalarFieldEnum
  having?: Prisma.AssignmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssignmentCountAggregateInputType | true
  _avg?: AssignmentAvgAggregateInputType
  _sum?: AssignmentSumAggregateInputType
  _min?: AssignmentMinAggregateInputType
  _max?: AssignmentMaxAggregateInputType
}

export type AssignmentGroupByOutputType = {
  id: string
  startDate: Date
  dueDate: Date
  maxScore: number
  attachedFile: string[]
  schoolId: string
  subjectId: string
  classId: string
  termId: string
  createdAt: Date
  updatedAt: Date
  _count: AssignmentCountAggregateOutputType | null
  _avg: AssignmentAvgAggregateOutputType | null
  _sum: AssignmentSumAggregateOutputType | null
  _min: AssignmentMinAggregateOutputType | null
  _max: AssignmentMaxAggregateOutputType | null
}

type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssignmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssignmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssignmentGroupByOutputType[P]>
      }
    >
  >



export type AssignmentWhereInput = {
  AND?: Prisma.AssignmentWhereInput | Prisma.AssignmentWhereInput[]
  OR?: Prisma.AssignmentWhereInput[]
  NOT?: Prisma.AssignmentWhereInput | Prisma.AssignmentWhereInput[]
  id?: Prisma.StringFilter<"Assignment"> | string
  startDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  dueDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  maxScore?: Prisma.IntFilter<"Assignment"> | number
  attachedFile?: Prisma.StringNullableListFilter<"Assignment">
  schoolId?: Prisma.StringFilter<"Assignment"> | string
  subjectId?: Prisma.StringFilter<"Assignment"> | string
  classId?: Prisma.StringFilter<"Assignment"> | string
  termId?: Prisma.StringFilter<"Assignment"> | string
  createdAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  class?: Prisma.XOR<Prisma.ClassScalarRelationFilter, Prisma.ClassWhereInput>
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>
  results?: Prisma.ResultListRelationFilter
}

export type AssignmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  maxScore?: Prisma.SortOrder
  attachedFile?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  subject?: Prisma.SubjectOrderByWithRelationInput
  class?: Prisma.ClassOrderByWithRelationInput
  term?: Prisma.TermOrderByWithRelationInput
  results?: Prisma.ResultOrderByRelationAggregateInput
}

export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_startDate_subjectId_classId?: Prisma.AssignmentSchoolIdStartDateSubjectIdClassIdCompoundUniqueInput
  AND?: Prisma.AssignmentWhereInput | Prisma.AssignmentWhereInput[]
  OR?: Prisma.AssignmentWhereInput[]
  NOT?: Prisma.AssignmentWhereInput | Prisma.AssignmentWhereInput[]
  startDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  dueDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  maxScore?: Prisma.IntFilter<"Assignment"> | number
  attachedFile?: Prisma.StringNullableListFilter<"Assignment">
  schoolId?: Prisma.StringFilter<"Assignment"> | string
  subjectId?: Prisma.StringFilter<"Assignment"> | string
  classId?: Prisma.StringFilter<"Assignment"> | string
  termId?: Prisma.StringFilter<"Assignment"> | string
  createdAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  class?: Prisma.XOR<Prisma.ClassScalarRelationFilter, Prisma.ClassWhereInput>
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>
  results?: Prisma.ResultListRelationFilter
}, "id" | "schoolId_startDate_subjectId_classId">

export type AssignmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  maxScore?: Prisma.SortOrder
  attachedFile?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AssignmentCountOrderByAggregateInput
  _avg?: Prisma.AssignmentAvgOrderByAggregateInput
  _max?: Prisma.AssignmentMaxOrderByAggregateInput
  _min?: Prisma.AssignmentMinOrderByAggregateInput
  _sum?: Prisma.AssignmentSumOrderByAggregateInput
}

export type AssignmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssignmentScalarWhereWithAggregatesInput | Prisma.AssignmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssignmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssignmentScalarWhereWithAggregatesInput | Prisma.AssignmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Assignment"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Assignment"> | Date | string
  dueDate?: Prisma.DateTimeWithAggregatesFilter<"Assignment"> | Date | string
  maxScore?: Prisma.IntWithAggregatesFilter<"Assignment"> | number
  attachedFile?: Prisma.StringNullableListFilter<"Assignment">
  schoolId?: Prisma.StringWithAggregatesFilter<"Assignment"> | string
  subjectId?: Prisma.StringWithAggregatesFilter<"Assignment"> | string
  classId?: Prisma.StringWithAggregatesFilter<"Assignment"> | string
  termId?: Prisma.StringWithAggregatesFilter<"Assignment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Assignment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Assignment"> | Date | string
}

export type AssignmentCreateInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutAssignmentsInput
  term: Prisma.TermCreateNestedOneWithoutAssignmentsInput
  results?: Prisma.ResultCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUncheckedCreateInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  results?: Prisma.ResultUncheckedCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutAssignmentsNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutAssignmentsNestedInput
  results?: Prisma.ResultUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  results?: Prisma.ResultUncheckedUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentCreateManyInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentListRelationFilter = {
  every?: Prisma.AssignmentWhereInput
  some?: Prisma.AssignmentWhereInput
  none?: Prisma.AssignmentWhereInput
}

export type AssignmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssignmentSchoolIdStartDateSubjectIdClassIdCompoundUniqueInput = {
  schoolId: string
  startDate: Date | string
  subjectId: string
  classId: string
}

export type AssignmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  maxScore?: Prisma.SortOrder
  attachedFile?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssignmentAvgOrderByAggregateInput = {
  maxScore?: Prisma.SortOrder
}

export type AssignmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  maxScore?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssignmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  maxScore?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssignmentSumOrderByAggregateInput = {
  maxScore?: Prisma.SortOrder
}

export type AssignmentNullableScalarRelationFilter = {
  is?: Prisma.AssignmentWhereInput | null
  isNot?: Prisma.AssignmentWhereInput | null
}

export type AssignmentCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput> | Prisma.AssignmentCreateWithoutSchoolInput[] | Prisma.AssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSchoolInput | Prisma.AssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.AssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput> | Prisma.AssignmentCreateWithoutSchoolInput[] | Prisma.AssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSchoolInput | Prisma.AssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.AssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput> | Prisma.AssignmentCreateWithoutSchoolInput[] | Prisma.AssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSchoolInput | Prisma.AssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.AssignmentCreateManySchoolInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.AssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput> | Prisma.AssignmentCreateWithoutSchoolInput[] | Prisma.AssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSchoolInput | Prisma.AssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.AssignmentCreateManySchoolInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.AssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentCreateNestedManyWithoutTermInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput> | Prisma.AssignmentCreateWithoutTermInput[] | Prisma.AssignmentUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutTermInput | Prisma.AssignmentCreateOrConnectWithoutTermInput[]
  createMany?: Prisma.AssignmentCreateManyTermInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUncheckedCreateNestedManyWithoutTermInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput> | Prisma.AssignmentCreateWithoutTermInput[] | Prisma.AssignmentUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutTermInput | Prisma.AssignmentCreateOrConnectWithoutTermInput[]
  createMany?: Prisma.AssignmentCreateManyTermInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUpdateManyWithoutTermNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput> | Prisma.AssignmentCreateWithoutTermInput[] | Prisma.AssignmentUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutTermInput | Prisma.AssignmentCreateOrConnectWithoutTermInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutTermInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutTermInput[]
  createMany?: Prisma.AssignmentCreateManyTermInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutTermInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutTermInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutTermInput | Prisma.AssignmentUpdateManyWithWhereWithoutTermInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentUncheckedUpdateManyWithoutTermNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput> | Prisma.AssignmentCreateWithoutTermInput[] | Prisma.AssignmentUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutTermInput | Prisma.AssignmentCreateOrConnectWithoutTermInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutTermInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutTermInput[]
  createMany?: Prisma.AssignmentCreateManyTermInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutTermInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutTermInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutTermInput | Prisma.AssignmentUpdateManyWithWhereWithoutTermInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentCreateNestedManyWithoutClassInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput> | Prisma.AssignmentCreateWithoutClassInput[] | Prisma.AssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutClassInput | Prisma.AssignmentCreateOrConnectWithoutClassInput[]
  createMany?: Prisma.AssignmentCreateManyClassInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUncheckedCreateNestedManyWithoutClassInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput> | Prisma.AssignmentCreateWithoutClassInput[] | Prisma.AssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutClassInput | Prisma.AssignmentCreateOrConnectWithoutClassInput[]
  createMany?: Prisma.AssignmentCreateManyClassInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUpdateManyWithoutClassNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput> | Prisma.AssignmentCreateWithoutClassInput[] | Prisma.AssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutClassInput | Prisma.AssignmentCreateOrConnectWithoutClassInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutClassInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutClassInput[]
  createMany?: Prisma.AssignmentCreateManyClassInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutClassInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutClassInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutClassInput | Prisma.AssignmentUpdateManyWithWhereWithoutClassInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentUncheckedUpdateManyWithoutClassNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput> | Prisma.AssignmentCreateWithoutClassInput[] | Prisma.AssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutClassInput | Prisma.AssignmentCreateOrConnectWithoutClassInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutClassInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutClassInput[]
  createMany?: Prisma.AssignmentCreateManyClassInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutClassInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutClassInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutClassInput | Prisma.AssignmentUpdateManyWithWhereWithoutClassInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput> | Prisma.AssignmentCreateWithoutSubjectInput[] | Prisma.AssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSubjectInput | Prisma.AssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.AssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput> | Prisma.AssignmentCreateWithoutSubjectInput[] | Prisma.AssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSubjectInput | Prisma.AssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.AssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
}

export type AssignmentUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput> | Prisma.AssignmentCreateWithoutSubjectInput[] | Prisma.AssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSubjectInput | Prisma.AssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.AssignmentCreateManySubjectInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.AssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput> | Prisma.AssignmentCreateWithoutSubjectInput[] | Prisma.AssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutSubjectInput | Prisma.AssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.AssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.AssignmentCreateManySubjectInputEnvelope
  set?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  disconnect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  delete?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  connect?: Prisma.AssignmentWhereUniqueInput | Prisma.AssignmentWhereUniqueInput[]
  update?: Prisma.AssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.AssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.AssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
}

export type AssignmentCreateattachedFileInput = {
  set: string[]
}

export type AssignmentUpdateattachedFileInput = {
  set?: string[]
  push?: string | string[]
}

export type AssignmentCreateNestedOneWithoutResultsInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutResultsInput, Prisma.AssignmentUncheckedCreateWithoutResultsInput>
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutResultsInput
  connect?: Prisma.AssignmentWhereUniqueInput
}

export type AssignmentUpdateOneWithoutResultsNestedInput = {
  create?: Prisma.XOR<Prisma.AssignmentCreateWithoutResultsInput, Prisma.AssignmentUncheckedCreateWithoutResultsInput>
  connectOrCreate?: Prisma.AssignmentCreateOrConnectWithoutResultsInput
  upsert?: Prisma.AssignmentUpsertWithoutResultsInput
  disconnect?: Prisma.AssignmentWhereInput | boolean
  delete?: Prisma.AssignmentWhereInput | boolean
  connect?: Prisma.AssignmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AssignmentUpdateToOneWithWhereWithoutResultsInput, Prisma.AssignmentUpdateWithoutResultsInput>, Prisma.AssignmentUncheckedUpdateWithoutResultsInput>
}

export type AssignmentCreateWithoutSchoolInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  subject: Prisma.SubjectCreateNestedOneWithoutAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutAssignmentsInput
  term: Prisma.TermCreateNestedOneWithoutAssignmentsInput
  results?: Prisma.ResultCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUncheckedCreateWithoutSchoolInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  subjectId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  results?: Prisma.ResultUncheckedCreateNestedManyWithoutAssignmentInput
}

export type AssignmentCreateOrConnectWithoutSchoolInput = {
  where: Prisma.AssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput>
}

export type AssignmentCreateManySchoolInputEnvelope = {
  data: Prisma.AssignmentCreateManySchoolInput | Prisma.AssignmentCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type AssignmentUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.AssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AssignmentUpdateWithoutSchoolInput, Prisma.AssignmentUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutSchoolInput, Prisma.AssignmentUncheckedCreateWithoutSchoolInput>
}

export type AssignmentUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.AssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AssignmentUpdateWithoutSchoolInput, Prisma.AssignmentUncheckedUpdateWithoutSchoolInput>
}

export type AssignmentUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.AssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyWithoutSchoolInput>
}

export type AssignmentScalarWhereInput = {
  AND?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
  OR?: Prisma.AssignmentScalarWhereInput[]
  NOT?: Prisma.AssignmentScalarWhereInput | Prisma.AssignmentScalarWhereInput[]
  id?: Prisma.StringFilter<"Assignment"> | string
  startDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  dueDate?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  maxScore?: Prisma.IntFilter<"Assignment"> | number
  attachedFile?: Prisma.StringNullableListFilter<"Assignment">
  schoolId?: Prisma.StringFilter<"Assignment"> | string
  subjectId?: Prisma.StringFilter<"Assignment"> | string
  classId?: Prisma.StringFilter<"Assignment"> | string
  termId?: Prisma.StringFilter<"Assignment"> | string
  createdAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assignment"> | Date | string
}

export type AssignmentCreateWithoutTermInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutAssignmentsInput
  results?: Prisma.ResultCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUncheckedCreateWithoutTermInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  classId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  results?: Prisma.ResultUncheckedCreateNestedManyWithoutAssignmentInput
}

export type AssignmentCreateOrConnectWithoutTermInput = {
  where: Prisma.AssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput>
}

export type AssignmentCreateManyTermInputEnvelope = {
  data: Prisma.AssignmentCreateManyTermInput | Prisma.AssignmentCreateManyTermInput[]
  skipDuplicates?: boolean
}

export type AssignmentUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.AssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AssignmentUpdateWithoutTermInput, Prisma.AssignmentUncheckedUpdateWithoutTermInput>
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutTermInput, Prisma.AssignmentUncheckedCreateWithoutTermInput>
}

export type AssignmentUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.AssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AssignmentUpdateWithoutTermInput, Prisma.AssignmentUncheckedUpdateWithoutTermInput>
}

export type AssignmentUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.AssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyWithoutTermInput>
}

export type AssignmentCreateWithoutClassInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutAssignmentsInput
  term: Prisma.TermCreateNestedOneWithoutAssignmentsInput
  results?: Prisma.ResultCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUncheckedCreateWithoutClassInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  results?: Prisma.ResultUncheckedCreateNestedManyWithoutAssignmentInput
}

export type AssignmentCreateOrConnectWithoutClassInput = {
  where: Prisma.AssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput>
}

export type AssignmentCreateManyClassInputEnvelope = {
  data: Prisma.AssignmentCreateManyClassInput | Prisma.AssignmentCreateManyClassInput[]
  skipDuplicates?: boolean
}

export type AssignmentUpsertWithWhereUniqueWithoutClassInput = {
  where: Prisma.AssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AssignmentUpdateWithoutClassInput, Prisma.AssignmentUncheckedUpdateWithoutClassInput>
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutClassInput, Prisma.AssignmentUncheckedCreateWithoutClassInput>
}

export type AssignmentUpdateWithWhereUniqueWithoutClassInput = {
  where: Prisma.AssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AssignmentUpdateWithoutClassInput, Prisma.AssignmentUncheckedUpdateWithoutClassInput>
}

export type AssignmentUpdateManyWithWhereWithoutClassInput = {
  where: Prisma.AssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyWithoutClassInput>
}

export type AssignmentCreateWithoutSubjectInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutAssignmentsInput
  term: Prisma.TermCreateNestedOneWithoutAssignmentsInput
  results?: Prisma.ResultCreateNestedManyWithoutAssignmentInput
}

export type AssignmentUncheckedCreateWithoutSubjectInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  results?: Prisma.ResultUncheckedCreateNestedManyWithoutAssignmentInput
}

export type AssignmentCreateOrConnectWithoutSubjectInput = {
  where: Prisma.AssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput>
}

export type AssignmentCreateManySubjectInputEnvelope = {
  data: Prisma.AssignmentCreateManySubjectInput | Prisma.AssignmentCreateManySubjectInput[]
  skipDuplicates?: boolean
}

export type AssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.AssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AssignmentUpdateWithoutSubjectInput, Prisma.AssignmentUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutSubjectInput, Prisma.AssignmentUncheckedCreateWithoutSubjectInput>
}

export type AssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.AssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AssignmentUpdateWithoutSubjectInput, Prisma.AssignmentUncheckedUpdateWithoutSubjectInput>
}

export type AssignmentUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.AssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyWithoutSubjectInput>
}

export type AssignmentCreateWithoutResultsInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutAssignmentsInput
  term: Prisma.TermCreateNestedOneWithoutAssignmentsInput
}

export type AssignmentUncheckedCreateWithoutResultsInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentCreateOrConnectWithoutResultsInput = {
  where: Prisma.AssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutResultsInput, Prisma.AssignmentUncheckedCreateWithoutResultsInput>
}

export type AssignmentUpsertWithoutResultsInput = {
  update: Prisma.XOR<Prisma.AssignmentUpdateWithoutResultsInput, Prisma.AssignmentUncheckedUpdateWithoutResultsInput>
  create: Prisma.XOR<Prisma.AssignmentCreateWithoutResultsInput, Prisma.AssignmentUncheckedCreateWithoutResultsInput>
  where?: Prisma.AssignmentWhereInput
}

export type AssignmentUpdateToOneWithWhereWithoutResultsInput = {
  where?: Prisma.AssignmentWhereInput
  data: Prisma.XOR<Prisma.AssignmentUpdateWithoutResultsInput, Prisma.AssignmentUncheckedUpdateWithoutResultsInput>
}

export type AssignmentUpdateWithoutResultsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutAssignmentsNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutAssignmentsNestedInput
}

export type AssignmentUncheckedUpdateWithoutResultsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentCreateManySchoolInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  subjectId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  subject?: Prisma.SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutAssignmentsNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutAssignmentsNestedInput
  results?: Prisma.ResultUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  results?: Prisma.ResultUncheckedUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentCreateManyTermInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  classId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutAssignmentsNestedInput
  results?: Prisma.ResultUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  results?: Prisma.ResultUncheckedUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentCreateManyClassInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  subjectId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentUpdateWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutAssignmentsNestedInput
  results?: Prisma.ResultUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  results?: Prisma.ResultUncheckedUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateManyWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssignmentCreateManySubjectInput = {
  id?: string
  startDate: Date | string
  dueDate: Date | string
  maxScore: number
  attachedFile?: Prisma.AssignmentCreateattachedFileInput | string[]
  schoolId: string
  classId: string
  termId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssignmentUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutAssignmentsNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutAssignmentsNestedInput
  results?: Prisma.ResultUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  results?: Prisma.ResultUncheckedUpdateManyWithoutAssignmentNestedInput
}

export type AssignmentUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  maxScore?: Prisma.IntFieldUpdateOperationsInput | number
  attachedFile?: Prisma.AssignmentUpdateattachedFileInput | string[]
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AssignmentCountOutputType
 */

export type AssignmentCountOutputType = {
  results: number
}

export type AssignmentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  results?: boolean | AssignmentCountOutputTypeCountResultsArgs
}

/**
 * AssignmentCountOutputType without action
 */
export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssignmentCountOutputType
   */
  select?: Prisma.AssignmentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AssignmentCountOutputType without action
 */
export type AssignmentCountOutputTypeCountResultsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResultWhereInput
}


export type AssignmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  dueDate?: boolean
  maxScore?: boolean
  attachedFile?: boolean
  schoolId?: boolean
  subjectId?: boolean
  classId?: boolean
  termId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  results?: boolean | Prisma.Assignment$resultsArgs<ExtArgs>
  _count?: boolean | Prisma.AssignmentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assignment"]>

export type AssignmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  dueDate?: boolean
  maxScore?: boolean
  attachedFile?: boolean
  schoolId?: boolean
  subjectId?: boolean
  classId?: boolean
  termId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assignment"]>

export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  startDate?: boolean
  dueDate?: boolean
  maxScore?: boolean
  attachedFile?: boolean
  schoolId?: boolean
  subjectId?: boolean
  classId?: boolean
  termId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assignment"]>

export type AssignmentSelectScalar = {
  id?: boolean
  startDate?: boolean
  dueDate?: boolean
  maxScore?: boolean
  attachedFile?: boolean
  schoolId?: boolean
  subjectId?: boolean
  classId?: boolean
  termId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AssignmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "startDate" | "dueDate" | "maxScore" | "attachedFile" | "schoolId" | "subjectId" | "classId" | "termId" | "createdAt" | "updatedAt", ExtArgs["result"]["assignment"]>
export type AssignmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  results?: boolean | Prisma.Assignment$resultsArgs<ExtArgs>
  _count?: boolean | Prisma.AssignmentCountOutputTypeDefaultArgs<ExtArgs>
}
export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
}
export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
}

export type $AssignmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Assignment"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    subject: Prisma.$SubjectPayload<ExtArgs>
    class: Prisma.$ClassPayload<ExtArgs>
    term: Prisma.$TermPayload<ExtArgs>
    results: Prisma.$ResultPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    startDate: Date
    dueDate: Date
    maxScore: number
    attachedFile: string[]
    schoolId: string
    subjectId: string
    classId: string
    termId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["assignment"]>
  composites: {}
}

export type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssignmentPayload, S>

export type AssignmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssignmentCountAggregateInputType | true
  }

export interface AssignmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
  /**
   * Find zero or one Assignment that matches the filter.
   * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
   * @example
   * // Get one Assignment
   * const assignment = await prisma.assignment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssignmentFindUniqueArgs>(args: Prisma.SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
   * @example
   * // Get one Assignment
   * const assignment = await prisma.assignment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Assignment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
   * @example
   * // Get one Assignment
   * const assignment = await prisma.assignment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssignmentFindFirstArgs>(args?: Prisma.SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Assignment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
   * @example
   * // Get one Assignment
   * const assignment = await prisma.assignment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Assignments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Assignments
   * const assignments = await prisma.assignment.findMany()
   * 
   * // Get first 10 Assignments
   * const assignments = await prisma.assignment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AssignmentFindManyArgs>(args?: Prisma.SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Assignment.
   * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
   * @example
   * // Create one Assignment
   * const Assignment = await prisma.assignment.create({
   *   data: {
   *     // ... data to create a Assignment
   *   }
   * })
   * 
   */
  create<T extends AssignmentCreateArgs>(args: Prisma.SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Assignments.
   * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
   * @example
   * // Create many Assignments
   * const assignment = await prisma.assignment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssignmentCreateManyArgs>(args?: Prisma.SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Assignments and returns the data saved in the database.
   * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
   * @example
   * // Create many Assignments
   * const assignment = await prisma.assignment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Assignments and only return the `id`
   * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Assignment.
   * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
   * @example
   * // Delete one Assignment
   * const Assignment = await prisma.assignment.delete({
   *   where: {
   *     // ... filter to delete one Assignment
   *   }
   * })
   * 
   */
  delete<T extends AssignmentDeleteArgs>(args: Prisma.SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Assignment.
   * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
   * @example
   * // Update one Assignment
   * const assignment = await prisma.assignment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssignmentUpdateArgs>(args: Prisma.SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Assignments.
   * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
   * @example
   * // Delete a few Assignments
   * const { count } = await prisma.assignment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssignmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Assignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Assignments
   * const assignment = await prisma.assignment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssignmentUpdateManyArgs>(args: Prisma.SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Assignments and returns the data updated in the database.
   * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
   * @example
   * // Update many Assignments
   * const assignment = await prisma.assignment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Assignments and only return the `id`
   * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Assignment.
   * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
   * @example
   * // Update or create a Assignment
   * const assignment = await prisma.assignment.upsert({
   *   create: {
   *     // ... data to create a Assignment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Assignment we want to update
   *   }
   * })
   */
  upsert<T extends AssignmentUpsertArgs>(args: Prisma.SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Assignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
   * @example
   * // Count the number of Assignments
   * const count = await prisma.assignment.count({
   *   where: {
   *     // ... the filter for the Assignments we want to count
   *   }
   * })
  **/
  count<T extends AssignmentCountArgs>(
    args?: Prisma.Subset<T, AssignmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssignmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Assignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssignmentAggregateArgs>(args: Prisma.Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

  /**
   * Group by Assignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssignmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssignmentGroupByArgs['orderBy'] }
      : { orderBy?: AssignmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Assignment model
 */
readonly fields: AssignmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Assignment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  class<T extends Prisma.ClassDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClassDefaultArgs<ExtArgs>>): Prisma.Prisma__ClassClient<runtime.Types.Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  results<T extends Prisma.Assignment$resultsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Assignment$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Assignment model
 */
export interface AssignmentFieldRefs {
  readonly id: Prisma.FieldRef<"Assignment", 'String'>
  readonly startDate: Prisma.FieldRef<"Assignment", 'DateTime'>
  readonly dueDate: Prisma.FieldRef<"Assignment", 'DateTime'>
  readonly maxScore: Prisma.FieldRef<"Assignment", 'Int'>
  readonly attachedFile: Prisma.FieldRef<"Assignment", 'String[]'>
  readonly schoolId: Prisma.FieldRef<"Assignment", 'String'>
  readonly subjectId: Prisma.FieldRef<"Assignment", 'String'>
  readonly classId: Prisma.FieldRef<"Assignment", 'String'>
  readonly termId: Prisma.FieldRef<"Assignment", 'String'>
  readonly createdAt: Prisma.FieldRef<"Assignment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Assignment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Assignment findUnique
 */
export type AssignmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter, which Assignment to fetch.
   */
  where: Prisma.AssignmentWhereUniqueInput
}

/**
 * Assignment findUniqueOrThrow
 */
export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter, which Assignment to fetch.
   */
  where: Prisma.AssignmentWhereUniqueInput
}

/**
 * Assignment findFirst
 */
export type AssignmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter, which Assignment to fetch.
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assignments to fetch.
   */
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Assignments.
   */
  cursor?: Prisma.AssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Assignments.
   */
  distinct?: Prisma.AssignmentScalarFieldEnum | Prisma.AssignmentScalarFieldEnum[]
}

/**
 * Assignment findFirstOrThrow
 */
export type AssignmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter, which Assignment to fetch.
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assignments to fetch.
   */
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Assignments.
   */
  cursor?: Prisma.AssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Assignments.
   */
  distinct?: Prisma.AssignmentScalarFieldEnum | Prisma.AssignmentScalarFieldEnum[]
}

/**
 * Assignment findMany
 */
export type AssignmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter, which Assignments to fetch.
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assignments to fetch.
   */
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Assignments.
   */
  cursor?: Prisma.AssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assignments.
   */
  skip?: number
  distinct?: Prisma.AssignmentScalarFieldEnum | Prisma.AssignmentScalarFieldEnum[]
}

/**
 * Assignment create
 */
export type AssignmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Assignment.
   */
  data: Prisma.XOR<Prisma.AssignmentCreateInput, Prisma.AssignmentUncheckedCreateInput>
}

/**
 * Assignment createMany
 */
export type AssignmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Assignments.
   */
  data: Prisma.AssignmentCreateManyInput | Prisma.AssignmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Assignment createManyAndReturn
 */
export type AssignmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * The data used to create many Assignments.
   */
  data: Prisma.AssignmentCreateManyInput | Prisma.AssignmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Assignment update
 */
export type AssignmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Assignment.
   */
  data: Prisma.XOR<Prisma.AssignmentUpdateInput, Prisma.AssignmentUncheckedUpdateInput>
  /**
   * Choose, which Assignment to update.
   */
  where: Prisma.AssignmentWhereUniqueInput
}

/**
 * Assignment updateMany
 */
export type AssignmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Assignments.
   */
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyInput>
  /**
   * Filter which Assignments to update
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * Limit how many Assignments to update.
   */
  limit?: number
}

/**
 * Assignment updateManyAndReturn
 */
export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * The data used to update Assignments.
   */
  data: Prisma.XOR<Prisma.AssignmentUpdateManyMutationInput, Prisma.AssignmentUncheckedUpdateManyInput>
  /**
   * Filter which Assignments to update
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * Limit how many Assignments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Assignment upsert
 */
export type AssignmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Assignment to update in case it exists.
   */
  where: Prisma.AssignmentWhereUniqueInput
  /**
   * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
   */
  create: Prisma.XOR<Prisma.AssignmentCreateInput, Prisma.AssignmentUncheckedCreateInput>
  /**
   * In case the Assignment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssignmentUpdateInput, Prisma.AssignmentUncheckedUpdateInput>
}

/**
 * Assignment delete
 */
export type AssignmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  /**
   * Filter which Assignment to delete.
   */
  where: Prisma.AssignmentWhereUniqueInput
}

/**
 * Assignment deleteMany
 */
export type AssignmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Assignments to delete
   */
  where?: Prisma.AssignmentWhereInput
  /**
   * Limit how many Assignments to delete.
   */
  limit?: number
}

/**
 * Assignment.results
 */
export type Assignment$resultsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  where?: Prisma.ResultWhereInput
  orderBy?: Prisma.ResultOrderByWithRelationInput | Prisma.ResultOrderByWithRelationInput[]
  cursor?: Prisma.ResultWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ResultScalarFieldEnum | Prisma.ResultScalarFieldEnum[]
}

/**
 * Assignment without action
 */
export type AssignmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
}
