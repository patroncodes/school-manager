
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Program` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Program
 * 
 */
export type ProgramModel = runtime.Types.Result.DefaultSelection<Prisma.$ProgramPayload>

export type AggregateProgram = {
  _count: ProgramCountAggregateOutputType | null
  _min: ProgramMinAggregateOutputType | null
  _max: ProgramMaxAggregateOutputType | null
}

export type ProgramMinAggregateOutputType = {
  id: string | null
  name: $Enums.ProgramType | null
  schoolId: string | null
}

export type ProgramMaxAggregateOutputType = {
  id: string | null
  name: $Enums.ProgramType | null
  schoolId: string | null
}

export type ProgramCountAggregateOutputType = {
  id: number
  name: number
  schoolId: number
  _all: number
}


export type ProgramMinAggregateInputType = {
  id?: true
  name?: true
  schoolId?: true
}

export type ProgramMaxAggregateInputType = {
  id?: true
  name?: true
  schoolId?: true
}

export type ProgramCountAggregateInputType = {
  id?: true
  name?: true
  schoolId?: true
  _all?: true
}

export type ProgramAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Program to aggregate.
   */
  where?: Prisma.ProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Programs to fetch.
   */
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Programs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Programs
  **/
  _count?: true | ProgramCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProgramMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProgramMaxAggregateInputType
}

export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
      [P in keyof T & keyof AggregateProgram]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProgram[P]>
    : Prisma.GetScalarType<T[P], AggregateProgram[P]>
}




export type ProgramGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProgramWhereInput
  orderBy?: Prisma.ProgramOrderByWithAggregationInput | Prisma.ProgramOrderByWithAggregationInput[]
  by: Prisma.ProgramScalarFieldEnum[] | Prisma.ProgramScalarFieldEnum
  having?: Prisma.ProgramScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProgramCountAggregateInputType | true
  _min?: ProgramMinAggregateInputType
  _max?: ProgramMaxAggregateInputType
}

export type ProgramGroupByOutputType = {
  id: string
  name: $Enums.ProgramType
  schoolId: string
  _count: ProgramCountAggregateOutputType | null
  _min: ProgramMinAggregateOutputType | null
  _max: ProgramMaxAggregateOutputType | null
}

type GetProgramGroupByPayload<T extends ProgramGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProgramGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProgramGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProgramGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProgramGroupByOutputType[P]>
      }
    >
  >



export type ProgramWhereInput = {
  AND?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[]
  OR?: Prisma.ProgramWhereInput[]
  NOT?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[]
  id?: Prisma.StringFilter<"Program"> | string
  name?: Prisma.EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
  schoolId?: Prisma.StringFilter<"Program"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  grades?: Prisma.GradeListRelationFilter
}

export type ProgramOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  grades?: Prisma.GradeOrderByRelationAggregateInput
}

export type ProgramWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_name?: Prisma.ProgramSchoolIdNameCompoundUniqueInput
  AND?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[]
  OR?: Prisma.ProgramWhereInput[]
  NOT?: Prisma.ProgramWhereInput | Prisma.ProgramWhereInput[]
  name?: Prisma.EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
  schoolId?: Prisma.StringFilter<"Program"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  grades?: Prisma.GradeListRelationFilter
}, "id" | "schoolId_name">

export type ProgramOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  _count?: Prisma.ProgramCountOrderByAggregateInput
  _max?: Prisma.ProgramMaxOrderByAggregateInput
  _min?: Prisma.ProgramMinOrderByAggregateInput
}

export type ProgramScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProgramScalarWhereWithAggregatesInput | Prisma.ProgramScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProgramScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProgramScalarWhereWithAggregatesInput | Prisma.ProgramScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Program"> | string
  name?: Prisma.EnumProgramTypeWithAggregatesFilter<"Program"> | $Enums.ProgramType
  schoolId?: Prisma.StringWithAggregatesFilter<"Program"> | string
}

export type ProgramCreateInput = {
  id?: string
  name: $Enums.ProgramType
  school: Prisma.SchoolCreateNestedOneWithoutProgramsInput
  grades?: Prisma.GradeCreateNestedManyWithoutProgramInput
}

export type ProgramUncheckedCreateInput = {
  id?: string
  name: $Enums.ProgramType
  schoolId: string
  grades?: Prisma.GradeUncheckedCreateNestedManyWithoutProgramInput
}

export type ProgramUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  school?: Prisma.SchoolUpdateOneRequiredWithoutProgramsNestedInput
  grades?: Prisma.GradeUpdateManyWithoutProgramNestedInput
}

export type ProgramUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  grades?: Prisma.GradeUncheckedUpdateManyWithoutProgramNestedInput
}

export type ProgramCreateManyInput = {
  id?: string
  name: $Enums.ProgramType
  schoolId: string
}

export type ProgramUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
}

export type ProgramUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProgramListRelationFilter = {
  every?: Prisma.ProgramWhereInput
  some?: Prisma.ProgramWhereInput
  none?: Prisma.ProgramWhereInput
}

export type ProgramOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProgramSchoolIdNameCompoundUniqueInput = {
  schoolId: string
  name: $Enums.ProgramType
}

export type ProgramCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
}

export type ProgramMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
}

export type ProgramMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
}

export type ProgramScalarRelationFilter = {
  is?: Prisma.ProgramWhereInput
  isNot?: Prisma.ProgramWhereInput
}

export type ProgramCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput> | Prisma.ProgramCreateWithoutSchoolInput[] | Prisma.ProgramUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutSchoolInput | Prisma.ProgramCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ProgramCreateManySchoolInputEnvelope
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
}

export type ProgramUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput> | Prisma.ProgramCreateWithoutSchoolInput[] | Prisma.ProgramUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutSchoolInput | Prisma.ProgramCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ProgramCreateManySchoolInputEnvelope
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
}

export type ProgramUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput> | Prisma.ProgramCreateWithoutSchoolInput[] | Prisma.ProgramUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutSchoolInput | Prisma.ProgramCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ProgramUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ProgramUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ProgramCreateManySchoolInputEnvelope
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  disconnect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  update?: Prisma.ProgramUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ProgramUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ProgramUpdateManyWithWhereWithoutSchoolInput | Prisma.ProgramUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[]
}

export type ProgramUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput> | Prisma.ProgramCreateWithoutSchoolInput[] | Prisma.ProgramUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutSchoolInput | Prisma.ProgramCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ProgramUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ProgramUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ProgramCreateManySchoolInputEnvelope
  set?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  disconnect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  delete?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  connect?: Prisma.ProgramWhereUniqueInput | Prisma.ProgramWhereUniqueInput[]
  update?: Prisma.ProgramUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ProgramUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ProgramUpdateManyWithWhereWithoutSchoolInput | Prisma.ProgramUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[]
}

export type EnumProgramTypeFieldUpdateOperationsInput = {
  set?: $Enums.ProgramType
}

export type ProgramCreateNestedOneWithoutGradesInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutGradesInput, Prisma.ProgramUncheckedCreateWithoutGradesInput>
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutGradesInput
  connect?: Prisma.ProgramWhereUniqueInput
}

export type ProgramUpdateOneRequiredWithoutGradesNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramCreateWithoutGradesInput, Prisma.ProgramUncheckedCreateWithoutGradesInput>
  connectOrCreate?: Prisma.ProgramCreateOrConnectWithoutGradesInput
  upsert?: Prisma.ProgramUpsertWithoutGradesInput
  connect?: Prisma.ProgramWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProgramUpdateToOneWithWhereWithoutGradesInput, Prisma.ProgramUpdateWithoutGradesInput>, Prisma.ProgramUncheckedUpdateWithoutGradesInput>
}

export type ProgramCreateWithoutSchoolInput = {
  id?: string
  name: $Enums.ProgramType
  grades?: Prisma.GradeCreateNestedManyWithoutProgramInput
}

export type ProgramUncheckedCreateWithoutSchoolInput = {
  id?: string
  name: $Enums.ProgramType
  grades?: Prisma.GradeUncheckedCreateNestedManyWithoutProgramInput
}

export type ProgramCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ProgramWhereUniqueInput
  create: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput>
}

export type ProgramCreateManySchoolInputEnvelope = {
  data: Prisma.ProgramCreateManySchoolInput | Prisma.ProgramCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type ProgramUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ProgramWhereUniqueInput
  update: Prisma.XOR<Prisma.ProgramUpdateWithoutSchoolInput, Prisma.ProgramUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.ProgramCreateWithoutSchoolInput, Prisma.ProgramUncheckedCreateWithoutSchoolInput>
}

export type ProgramUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ProgramWhereUniqueInput
  data: Prisma.XOR<Prisma.ProgramUpdateWithoutSchoolInput, Prisma.ProgramUncheckedUpdateWithoutSchoolInput>
}

export type ProgramUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ProgramScalarWhereInput
  data: Prisma.XOR<Prisma.ProgramUpdateManyMutationInput, Prisma.ProgramUncheckedUpdateManyWithoutSchoolInput>
}

export type ProgramScalarWhereInput = {
  AND?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[]
  OR?: Prisma.ProgramScalarWhereInput[]
  NOT?: Prisma.ProgramScalarWhereInput | Prisma.ProgramScalarWhereInput[]
  id?: Prisma.StringFilter<"Program"> | string
  name?: Prisma.EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
  schoolId?: Prisma.StringFilter<"Program"> | string
}

export type ProgramCreateWithoutGradesInput = {
  id?: string
  name: $Enums.ProgramType
  school: Prisma.SchoolCreateNestedOneWithoutProgramsInput
}

export type ProgramUncheckedCreateWithoutGradesInput = {
  id?: string
  name: $Enums.ProgramType
  schoolId: string
}

export type ProgramCreateOrConnectWithoutGradesInput = {
  where: Prisma.ProgramWhereUniqueInput
  create: Prisma.XOR<Prisma.ProgramCreateWithoutGradesInput, Prisma.ProgramUncheckedCreateWithoutGradesInput>
}

export type ProgramUpsertWithoutGradesInput = {
  update: Prisma.XOR<Prisma.ProgramUpdateWithoutGradesInput, Prisma.ProgramUncheckedUpdateWithoutGradesInput>
  create: Prisma.XOR<Prisma.ProgramCreateWithoutGradesInput, Prisma.ProgramUncheckedCreateWithoutGradesInput>
  where?: Prisma.ProgramWhereInput
}

export type ProgramUpdateToOneWithWhereWithoutGradesInput = {
  where?: Prisma.ProgramWhereInput
  data: Prisma.XOR<Prisma.ProgramUpdateWithoutGradesInput, Prisma.ProgramUncheckedUpdateWithoutGradesInput>
}

export type ProgramUpdateWithoutGradesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  school?: Prisma.SchoolUpdateOneRequiredWithoutProgramsNestedInput
}

export type ProgramUncheckedUpdateWithoutGradesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProgramCreateManySchoolInput = {
  id?: string
  name: $Enums.ProgramType
}

export type ProgramUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  grades?: Prisma.GradeUpdateManyWithoutProgramNestedInput
}

export type ProgramUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
  grades?: Prisma.GradeUncheckedUpdateManyWithoutProgramNestedInput
}

export type ProgramUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
}


/**
 * Count Type ProgramCountOutputType
 */

export type ProgramCountOutputType = {
  grades: number
}

export type ProgramCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  grades?: boolean | ProgramCountOutputTypeCountGradesArgs
}

/**
 * ProgramCountOutputType without action
 */
export type ProgramCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramCountOutputType
   */
  select?: Prisma.ProgramCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProgramCountOutputType without action
 */
export type ProgramCountOutputTypeCountGradesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GradeWhereInput
}


export type ProgramSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schoolId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  grades?: boolean | Prisma.Program$gradesArgs<ExtArgs>
  _count?: boolean | Prisma.ProgramCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["program"]>

export type ProgramSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schoolId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["program"]>

export type ProgramSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schoolId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["program"]>

export type ProgramSelectScalar = {
  id?: boolean
  name?: boolean
  schoolId?: boolean
}

export type ProgramOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "schoolId", ExtArgs["result"]["program"]>
export type ProgramInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  grades?: boolean | Prisma.Program$gradesArgs<ExtArgs>
  _count?: boolean | Prisma.ProgramCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProgramIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type ProgramIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}

export type $ProgramPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Program"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    grades: Prisma.$GradePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: $Enums.ProgramType
    schoolId: string
  }, ExtArgs["result"]["program"]>
  composites: {}
}

export type ProgramGetPayload<S extends boolean | null | undefined | ProgramDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProgramPayload, S>

export type ProgramCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProgramCountAggregateInputType | true
  }

export interface ProgramDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Program'], meta: { name: 'Program' } }
  /**
   * Find zero or one Program that matches the filter.
   * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProgramFindUniqueArgs>(args: Prisma.SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Program that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Program that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindFirstArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProgramFindFirstArgs>(args?: Prisma.SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Program that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
   * @example
   * // Get one Program
   * const program = await prisma.program.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Programs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Programs
   * const programs = await prisma.program.findMany()
   * 
   * // Get first 10 Programs
   * const programs = await prisma.program.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProgramFindManyArgs>(args?: Prisma.SelectSubset<T, ProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Program.
   * @param {ProgramCreateArgs} args - Arguments to create a Program.
   * @example
   * // Create one Program
   * const Program = await prisma.program.create({
   *   data: {
   *     // ... data to create a Program
   *   }
   * })
   * 
   */
  create<T extends ProgramCreateArgs>(args: Prisma.SelectSubset<T, ProgramCreateArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Programs.
   * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
   * @example
   * // Create many Programs
   * const program = await prisma.program.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProgramCreateManyArgs>(args?: Prisma.SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Programs and returns the data saved in the database.
   * @param {ProgramCreateManyAndReturnArgs} args - Arguments to create many Programs.
   * @example
   * // Create many Programs
   * const program = await prisma.program.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Programs and only return the `id`
   * const programWithIdOnly = await prisma.program.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProgramCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Program.
   * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
   * @example
   * // Delete one Program
   * const Program = await prisma.program.delete({
   *   where: {
   *     // ... filter to delete one Program
   *   }
   * })
   * 
   */
  delete<T extends ProgramDeleteArgs>(args: Prisma.SelectSubset<T, ProgramDeleteArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Program.
   * @param {ProgramUpdateArgs} args - Arguments to update one Program.
   * @example
   * // Update one Program
   * const program = await prisma.program.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProgramUpdateArgs>(args: Prisma.SelectSubset<T, ProgramUpdateArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Programs.
   * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
   * @example
   * // Delete a few Programs
   * const { count } = await prisma.program.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProgramDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Programs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Programs
   * const program = await prisma.program.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProgramUpdateManyArgs>(args: Prisma.SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Programs and returns the data updated in the database.
   * @param {ProgramUpdateManyAndReturnArgs} args - Arguments to update many Programs.
   * @example
   * // Update many Programs
   * const program = await prisma.program.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Programs and only return the `id`
   * const programWithIdOnly = await prisma.program.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProgramUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Program.
   * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
   * @example
   * // Update or create a Program
   * const program = await prisma.program.upsert({
   *   create: {
   *     // ... data to create a Program
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Program we want to update
   *   }
   * })
   */
  upsert<T extends ProgramUpsertArgs>(args: Prisma.SelectSubset<T, ProgramUpsertArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Programs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
   * @example
   * // Count the number of Programs
   * const count = await prisma.program.count({
   *   where: {
   *     // ... the filter for the Programs we want to count
   *   }
   * })
  **/
  count<T extends ProgramCountArgs>(
    args?: Prisma.Subset<T, ProgramCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProgramCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Program.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProgramAggregateArgs>(args: Prisma.Subset<T, ProgramAggregateArgs>): Prisma.PrismaPromise<GetProgramAggregateType<T>>

  /**
   * Group by Program.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProgramGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProgramGroupByArgs['orderBy'] }
      : { orderBy?: ProgramGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Program model
 */
readonly fields: ProgramFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Program.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProgramClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  grades<T extends Prisma.Program$gradesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Program$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Program model
 */
export interface ProgramFieldRefs {
  readonly id: Prisma.FieldRef<"Program", 'String'>
  readonly name: Prisma.FieldRef<"Program", 'ProgramType'>
  readonly schoolId: Prisma.FieldRef<"Program", 'String'>
}
    

// Custom InputTypes
/**
 * Program findUnique
 */
export type ProgramFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter, which Program to fetch.
   */
  where: Prisma.ProgramWhereUniqueInput
}

/**
 * Program findUniqueOrThrow
 */
export type ProgramFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter, which Program to fetch.
   */
  where: Prisma.ProgramWhereUniqueInput
}

/**
 * Program findFirst
 */
export type ProgramFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter, which Program to fetch.
   */
  where?: Prisma.ProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Programs to fetch.
   */
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Programs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Programs.
   */
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[]
}

/**
 * Program findFirstOrThrow
 */
export type ProgramFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter, which Program to fetch.
   */
  where?: Prisma.ProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Programs to fetch.
   */
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Programs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Programs.
   */
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[]
}

/**
 * Program findMany
 */
export type ProgramFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter, which Programs to fetch.
   */
  where?: Prisma.ProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Programs to fetch.
   */
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Programs.
   */
  cursor?: Prisma.ProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Programs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Programs.
   */
  skip?: number
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[]
}

/**
 * Program create
 */
export type ProgramCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * The data needed to create a Program.
   */
  data: Prisma.XOR<Prisma.ProgramCreateInput, Prisma.ProgramUncheckedCreateInput>
}

/**
 * Program createMany
 */
export type ProgramCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Programs.
   */
  data: Prisma.ProgramCreateManyInput | Prisma.ProgramCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Program createManyAndReturn
 */
export type ProgramCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * The data used to create many Programs.
   */
  data: Prisma.ProgramCreateManyInput | Prisma.ProgramCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Program update
 */
export type ProgramUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * The data needed to update a Program.
   */
  data: Prisma.XOR<Prisma.ProgramUpdateInput, Prisma.ProgramUncheckedUpdateInput>
  /**
   * Choose, which Program to update.
   */
  where: Prisma.ProgramWhereUniqueInput
}

/**
 * Program updateMany
 */
export type ProgramUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Programs.
   */
  data: Prisma.XOR<Prisma.ProgramUpdateManyMutationInput, Prisma.ProgramUncheckedUpdateManyInput>
  /**
   * Filter which Programs to update
   */
  where?: Prisma.ProgramWhereInput
  /**
   * Limit how many Programs to update.
   */
  limit?: number
}

/**
 * Program updateManyAndReturn
 */
export type ProgramUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * The data used to update Programs.
   */
  data: Prisma.XOR<Prisma.ProgramUpdateManyMutationInput, Prisma.ProgramUncheckedUpdateManyInput>
  /**
   * Filter which Programs to update
   */
  where?: Prisma.ProgramWhereInput
  /**
   * Limit how many Programs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Program upsert
 */
export type ProgramUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * The filter to search for the Program to update in case it exists.
   */
  where: Prisma.ProgramWhereUniqueInput
  /**
   * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
   */
  create: Prisma.XOR<Prisma.ProgramCreateInput, Prisma.ProgramUncheckedCreateInput>
  /**
   * In case the Program was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProgramUpdateInput, Prisma.ProgramUncheckedUpdateInput>
}

/**
 * Program delete
 */
export type ProgramDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  /**
   * Filter which Program to delete.
   */
  where: Prisma.ProgramWhereUniqueInput
}

/**
 * Program deleteMany
 */
export type ProgramDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Programs to delete
   */
  where?: Prisma.ProgramWhereInput
  /**
   * Limit how many Programs to delete.
   */
  limit?: number
}

/**
 * Program.grades
 */
export type Program$gradesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  where?: Prisma.GradeWhereInput
  orderBy?: Prisma.GradeOrderByWithRelationInput | Prisma.GradeOrderByWithRelationInput[]
  cursor?: Prisma.GradeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GradeScalarFieldEnum | Prisma.GradeScalarFieldEnum[]
}

/**
 * Program without action
 */
export type ProgramDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
}
