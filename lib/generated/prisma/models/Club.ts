
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Club` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Club
 * 
 */
export type ClubModel = runtime.Types.Result.DefaultSelection<Prisma.$ClubPayload>

export type AggregateClub = {
  _count: ClubCountAggregateOutputType | null
  _min: ClubMinAggregateOutputType | null
  _max: ClubMaxAggregateOutputType | null
}

export type ClubMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  foundedAt: Date | null
  schoolId: string | null
  createdAt: Date | null
}

export type ClubMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  foundedAt: Date | null
  schoolId: string | null
  createdAt: Date | null
}

export type ClubCountAggregateOutputType = {
  id: number
  name: number
  description: number
  foundedAt: number
  schoolId: number
  createdAt: number
  _all: number
}


export type ClubMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  foundedAt?: true
  schoolId?: true
  createdAt?: true
}

export type ClubMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  foundedAt?: true
  schoolId?: true
  createdAt?: true
}

export type ClubCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  foundedAt?: true
  schoolId?: true
  createdAt?: true
  _all?: true
}

export type ClubAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Club to aggregate.
   */
  where?: Prisma.ClubWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clubs to fetch.
   */
  orderBy?: Prisma.ClubOrderByWithRelationInput | Prisma.ClubOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClubWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clubs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clubs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Clubs
  **/
  _count?: true | ClubCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClubMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClubMaxAggregateInputType
}

export type GetClubAggregateType<T extends ClubAggregateArgs> = {
      [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClub[P]>
    : Prisma.GetScalarType<T[P], AggregateClub[P]>
}




export type ClubGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClubWhereInput
  orderBy?: Prisma.ClubOrderByWithAggregationInput | Prisma.ClubOrderByWithAggregationInput[]
  by: Prisma.ClubScalarFieldEnum[] | Prisma.ClubScalarFieldEnum
  having?: Prisma.ClubScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClubCountAggregateInputType | true
  _min?: ClubMinAggregateInputType
  _max?: ClubMaxAggregateInputType
}

export type ClubGroupByOutputType = {
  id: string
  name: string
  description: string
  foundedAt: Date | null
  schoolId: string
  createdAt: Date
  _count: ClubCountAggregateOutputType | null
  _min: ClubMinAggregateOutputType | null
  _max: ClubMaxAggregateOutputType | null
}

type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClubGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClubGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClubGroupByOutputType[P]>
      }
    >
  >



export type ClubWhereInput = {
  AND?: Prisma.ClubWhereInput | Prisma.ClubWhereInput[]
  OR?: Prisma.ClubWhereInput[]
  NOT?: Prisma.ClubWhereInput | Prisma.ClubWhereInput[]
  id?: Prisma.StringFilter<"Club"> | string
  name?: Prisma.StringFilter<"Club"> | string
  description?: Prisma.StringFilter<"Club"> | string
  foundedAt?: Prisma.DateTimeNullableFilter<"Club"> | Date | string | null
  schoolId?: Prisma.StringFilter<"Club"> | string
  createdAt?: Prisma.DateTimeFilter<"Club"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  supervisors?: Prisma.StaffListRelationFilter
  members?: Prisma.StudentListRelationFilter
}

export type ClubOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  foundedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  supervisors?: Prisma.StaffOrderByRelationAggregateInput
  members?: Prisma.StudentOrderByRelationAggregateInput
}

export type ClubWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_name?: Prisma.ClubSchoolIdNameCompoundUniqueInput
  AND?: Prisma.ClubWhereInput | Prisma.ClubWhereInput[]
  OR?: Prisma.ClubWhereInput[]
  NOT?: Prisma.ClubWhereInput | Prisma.ClubWhereInput[]
  name?: Prisma.StringFilter<"Club"> | string
  description?: Prisma.StringFilter<"Club"> | string
  foundedAt?: Prisma.DateTimeNullableFilter<"Club"> | Date | string | null
  schoolId?: Prisma.StringFilter<"Club"> | string
  createdAt?: Prisma.DateTimeFilter<"Club"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  supervisors?: Prisma.StaffListRelationFilter
  members?: Prisma.StudentListRelationFilter
}, "id" | "schoolId_name">

export type ClubOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  foundedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ClubCountOrderByAggregateInput
  _max?: Prisma.ClubMaxOrderByAggregateInput
  _min?: Prisma.ClubMinOrderByAggregateInput
}

export type ClubScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClubScalarWhereWithAggregatesInput | Prisma.ClubScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClubScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClubScalarWhereWithAggregatesInput | Prisma.ClubScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Club"> | string
  name?: Prisma.StringWithAggregatesFilter<"Club"> | string
  description?: Prisma.StringWithAggregatesFilter<"Club"> | string
  foundedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Club"> | Date | string | null
  schoolId?: Prisma.StringWithAggregatesFilter<"Club"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Club"> | Date | string
}

export type ClubCreateInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutClubsInput
  supervisors?: Prisma.StaffCreateNestedManyWithoutClubInput
  members?: Prisma.StudentCreateNestedManyWithoutClubInput
}

export type ClubUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  schoolId: string
  createdAt?: Date | string
  supervisors?: Prisma.StaffUncheckedCreateNestedManyWithoutClubInput
  members?: Prisma.StudentUncheckedCreateNestedManyWithoutClubInput
}

export type ClubUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutClubsNestedInput
  supervisors?: Prisma.StaffUpdateManyWithoutClubNestedInput
  members?: Prisma.StudentUpdateManyWithoutClubNestedInput
}

export type ClubUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  supervisors?: Prisma.StaffUncheckedUpdateManyWithoutClubNestedInput
  members?: Prisma.StudentUncheckedUpdateManyWithoutClubNestedInput
}

export type ClubCreateManyInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  schoolId: string
  createdAt?: Date | string
}

export type ClubUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClubUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClubListRelationFilter = {
  every?: Prisma.ClubWhereInput
  some?: Prisma.ClubWhereInput
  none?: Prisma.ClubWhereInput
}

export type ClubOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ClubNullableScalarRelationFilter = {
  is?: Prisma.ClubWhereInput | null
  isNot?: Prisma.ClubWhereInput | null
}

export type ClubSchoolIdNameCompoundUniqueInput = {
  schoolId: string
  name: string
}

export type ClubCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  foundedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ClubMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  foundedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ClubMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  foundedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ClubCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput> | Prisma.ClubCreateWithoutSchoolInput[] | Prisma.ClubUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSchoolInput | Prisma.ClubCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ClubCreateManySchoolInputEnvelope
  connect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
}

export type ClubUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput> | Prisma.ClubCreateWithoutSchoolInput[] | Prisma.ClubUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSchoolInput | Prisma.ClubCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ClubCreateManySchoolInputEnvelope
  connect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
}

export type ClubUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput> | Prisma.ClubCreateWithoutSchoolInput[] | Prisma.ClubUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSchoolInput | Prisma.ClubCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ClubUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ClubUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ClubCreateManySchoolInputEnvelope
  set?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  disconnect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  delete?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  connect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  update?: Prisma.ClubUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ClubUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ClubUpdateManyWithWhereWithoutSchoolInput | Prisma.ClubUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ClubScalarWhereInput | Prisma.ClubScalarWhereInput[]
}

export type ClubUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput> | Prisma.ClubCreateWithoutSchoolInput[] | Prisma.ClubUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSchoolInput | Prisma.ClubCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ClubUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ClubUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ClubCreateManySchoolInputEnvelope
  set?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  disconnect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  delete?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  connect?: Prisma.ClubWhereUniqueInput | Prisma.ClubWhereUniqueInput[]
  update?: Prisma.ClubUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ClubUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ClubUpdateManyWithWhereWithoutSchoolInput | Prisma.ClubUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ClubScalarWhereInput | Prisma.ClubScalarWhereInput[]
}

export type ClubCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutMembersInput, Prisma.ClubUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutMembersInput
  connect?: Prisma.ClubWhereUniqueInput
}

export type ClubUpdateOneWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutMembersInput, Prisma.ClubUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutMembersInput
  upsert?: Prisma.ClubUpsertWithoutMembersInput
  disconnect?: Prisma.ClubWhereInput | boolean
  delete?: Prisma.ClubWhereInput | boolean
  connect?: Prisma.ClubWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClubUpdateToOneWithWhereWithoutMembersInput, Prisma.ClubUpdateWithoutMembersInput>, Prisma.ClubUncheckedUpdateWithoutMembersInput>
}

export type ClubCreateNestedOneWithoutSupervisorsInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSupervisorsInput, Prisma.ClubUncheckedCreateWithoutSupervisorsInput>
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSupervisorsInput
  connect?: Prisma.ClubWhereUniqueInput
}

export type ClubUpdateOneWithoutSupervisorsNestedInput = {
  create?: Prisma.XOR<Prisma.ClubCreateWithoutSupervisorsInput, Prisma.ClubUncheckedCreateWithoutSupervisorsInput>
  connectOrCreate?: Prisma.ClubCreateOrConnectWithoutSupervisorsInput
  upsert?: Prisma.ClubUpsertWithoutSupervisorsInput
  disconnect?: Prisma.ClubWhereInput | boolean
  delete?: Prisma.ClubWhereInput | boolean
  connect?: Prisma.ClubWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClubUpdateToOneWithWhereWithoutSupervisorsInput, Prisma.ClubUpdateWithoutSupervisorsInput>, Prisma.ClubUncheckedUpdateWithoutSupervisorsInput>
}

export type ClubCreateWithoutSchoolInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
  supervisors?: Prisma.StaffCreateNestedManyWithoutClubInput
  members?: Prisma.StudentCreateNestedManyWithoutClubInput
}

export type ClubUncheckedCreateWithoutSchoolInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
  supervisors?: Prisma.StaffUncheckedCreateNestedManyWithoutClubInput
  members?: Prisma.StudentUncheckedCreateNestedManyWithoutClubInput
}

export type ClubCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ClubWhereUniqueInput
  create: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput>
}

export type ClubCreateManySchoolInputEnvelope = {
  data: Prisma.ClubCreateManySchoolInput | Prisma.ClubCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type ClubUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClubWhereUniqueInput
  update: Prisma.XOR<Prisma.ClubUpdateWithoutSchoolInput, Prisma.ClubUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.ClubCreateWithoutSchoolInput, Prisma.ClubUncheckedCreateWithoutSchoolInput>
}

export type ClubUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ClubWhereUniqueInput
  data: Prisma.XOR<Prisma.ClubUpdateWithoutSchoolInput, Prisma.ClubUncheckedUpdateWithoutSchoolInput>
}

export type ClubUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ClubScalarWhereInput
  data: Prisma.XOR<Prisma.ClubUpdateManyMutationInput, Prisma.ClubUncheckedUpdateManyWithoutSchoolInput>
}

export type ClubScalarWhereInput = {
  AND?: Prisma.ClubScalarWhereInput | Prisma.ClubScalarWhereInput[]
  OR?: Prisma.ClubScalarWhereInput[]
  NOT?: Prisma.ClubScalarWhereInput | Prisma.ClubScalarWhereInput[]
  id?: Prisma.StringFilter<"Club"> | string
  name?: Prisma.StringFilter<"Club"> | string
  description?: Prisma.StringFilter<"Club"> | string
  foundedAt?: Prisma.DateTimeNullableFilter<"Club"> | Date | string | null
  schoolId?: Prisma.StringFilter<"Club"> | string
  createdAt?: Prisma.DateTimeFilter<"Club"> | Date | string
}

export type ClubCreateWithoutMembersInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutClubsInput
  supervisors?: Prisma.StaffCreateNestedManyWithoutClubInput
}

export type ClubUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  schoolId: string
  createdAt?: Date | string
  supervisors?: Prisma.StaffUncheckedCreateNestedManyWithoutClubInput
}

export type ClubCreateOrConnectWithoutMembersInput = {
  where: Prisma.ClubWhereUniqueInput
  create: Prisma.XOR<Prisma.ClubCreateWithoutMembersInput, Prisma.ClubUncheckedCreateWithoutMembersInput>
}

export type ClubUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.ClubUpdateWithoutMembersInput, Prisma.ClubUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.ClubCreateWithoutMembersInput, Prisma.ClubUncheckedCreateWithoutMembersInput>
  where?: Prisma.ClubWhereInput
}

export type ClubUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.ClubWhereInput
  data: Prisma.XOR<Prisma.ClubUpdateWithoutMembersInput, Prisma.ClubUncheckedUpdateWithoutMembersInput>
}

export type ClubUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutClubsNestedInput
  supervisors?: Prisma.StaffUpdateManyWithoutClubNestedInput
}

export type ClubUncheckedUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  supervisors?: Prisma.StaffUncheckedUpdateManyWithoutClubNestedInput
}

export type ClubCreateWithoutSupervisorsInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutClubsInput
  members?: Prisma.StudentCreateNestedManyWithoutClubInput
}

export type ClubUncheckedCreateWithoutSupervisorsInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  schoolId: string
  createdAt?: Date | string
  members?: Prisma.StudentUncheckedCreateNestedManyWithoutClubInput
}

export type ClubCreateOrConnectWithoutSupervisorsInput = {
  where: Prisma.ClubWhereUniqueInput
  create: Prisma.XOR<Prisma.ClubCreateWithoutSupervisorsInput, Prisma.ClubUncheckedCreateWithoutSupervisorsInput>
}

export type ClubUpsertWithoutSupervisorsInput = {
  update: Prisma.XOR<Prisma.ClubUpdateWithoutSupervisorsInput, Prisma.ClubUncheckedUpdateWithoutSupervisorsInput>
  create: Prisma.XOR<Prisma.ClubCreateWithoutSupervisorsInput, Prisma.ClubUncheckedCreateWithoutSupervisorsInput>
  where?: Prisma.ClubWhereInput
}

export type ClubUpdateToOneWithWhereWithoutSupervisorsInput = {
  where?: Prisma.ClubWhereInput
  data: Prisma.XOR<Prisma.ClubUpdateWithoutSupervisorsInput, Prisma.ClubUncheckedUpdateWithoutSupervisorsInput>
}

export type ClubUpdateWithoutSupervisorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutClubsNestedInput
  members?: Prisma.StudentUpdateManyWithoutClubNestedInput
}

export type ClubUncheckedUpdateWithoutSupervisorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.StudentUncheckedUpdateManyWithoutClubNestedInput
}

export type ClubCreateManySchoolInput = {
  id?: string
  name: string
  description: string
  foundedAt?: Date | string | null
  createdAt?: Date | string
}

export type ClubUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  supervisors?: Prisma.StaffUpdateManyWithoutClubNestedInput
  members?: Prisma.StudentUpdateManyWithoutClubNestedInput
}

export type ClubUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  supervisors?: Prisma.StaffUncheckedUpdateManyWithoutClubNestedInput
  members?: Prisma.StudentUncheckedUpdateManyWithoutClubNestedInput
}

export type ClubUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  foundedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ClubCountOutputType
 */

export type ClubCountOutputType = {
  supervisors: number
  members: number
}

export type ClubCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  supervisors?: boolean | ClubCountOutputTypeCountSupervisorsArgs
  members?: boolean | ClubCountOutputTypeCountMembersArgs
}

/**
 * ClubCountOutputType without action
 */
export type ClubCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClubCountOutputType
   */
  select?: Prisma.ClubCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ClubCountOutputType without action
 */
export type ClubCountOutputTypeCountSupervisorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffWhereInput
}

/**
 * ClubCountOutputType without action
 */
export type ClubCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StudentWhereInput
}


export type ClubSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  foundedAt?: boolean
  schoolId?: boolean
  createdAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  supervisors?: boolean | Prisma.Club$supervisorsArgs<ExtArgs>
  members?: boolean | Prisma.Club$membersArgs<ExtArgs>
  _count?: boolean | Prisma.ClubCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["club"]>

export type ClubSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  foundedAt?: boolean
  schoolId?: boolean
  createdAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["club"]>

export type ClubSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  foundedAt?: boolean
  schoolId?: boolean
  createdAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["club"]>

export type ClubSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  foundedAt?: boolean
  schoolId?: boolean
  createdAt?: boolean
}

export type ClubOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "foundedAt" | "schoolId" | "createdAt", ExtArgs["result"]["club"]>
export type ClubInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  supervisors?: boolean | Prisma.Club$supervisorsArgs<ExtArgs>
  members?: boolean | Prisma.Club$membersArgs<ExtArgs>
  _count?: boolean | Prisma.ClubCountOutputTypeDefaultArgs<ExtArgs>
}
export type ClubIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type ClubIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}

export type $ClubPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Club"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    supervisors: Prisma.$StaffPayload<ExtArgs>[]
    members: Prisma.$StudentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    foundedAt: Date | null
    schoolId: string
    createdAt: Date
  }, ExtArgs["result"]["club"]>
  composites: {}
}

export type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClubPayload, S>

export type ClubCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ClubCountAggregateInputType | true
  }

export interface ClubDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
  /**
   * Find zero or one Club that matches the filter.
   * @param {ClubFindUniqueArgs} args - Arguments to find a Club
   * @example
   * // Get one Club
   * const club = await prisma.club.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClubFindUniqueArgs>(args: Prisma.SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Club that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
   * @example
   * // Get one Club
   * const club = await prisma.club.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Club that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubFindFirstArgs} args - Arguments to find a Club
   * @example
   * // Get one Club
   * const club = await prisma.club.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClubFindFirstArgs>(args?: Prisma.SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Club that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
   * @example
   * // Get one Club
   * const club = await prisma.club.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Clubs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Clubs
   * const clubs = await prisma.club.findMany()
   * 
   * // Get first 10 Clubs
   * const clubs = await prisma.club.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClubFindManyArgs>(args?: Prisma.SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Club.
   * @param {ClubCreateArgs} args - Arguments to create a Club.
   * @example
   * // Create one Club
   * const Club = await prisma.club.create({
   *   data: {
   *     // ... data to create a Club
   *   }
   * })
   * 
   */
  create<T extends ClubCreateArgs>(args: Prisma.SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Clubs.
   * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
   * @example
   * // Create many Clubs
   * const club = await prisma.club.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClubCreateManyArgs>(args?: Prisma.SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Clubs and returns the data saved in the database.
   * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
   * @example
   * // Create many Clubs
   * const club = await prisma.club.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Clubs and only return the `id`
   * const clubWithIdOnly = await prisma.club.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Club.
   * @param {ClubDeleteArgs} args - Arguments to delete one Club.
   * @example
   * // Delete one Club
   * const Club = await prisma.club.delete({
   *   where: {
   *     // ... filter to delete one Club
   *   }
   * })
   * 
   */
  delete<T extends ClubDeleteArgs>(args: Prisma.SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Club.
   * @param {ClubUpdateArgs} args - Arguments to update one Club.
   * @example
   * // Update one Club
   * const club = await prisma.club.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClubUpdateArgs>(args: Prisma.SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Clubs.
   * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
   * @example
   * // Delete a few Clubs
   * const { count } = await prisma.club.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClubDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clubs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Clubs
   * const club = await prisma.club.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClubUpdateManyArgs>(args: Prisma.SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clubs and returns the data updated in the database.
   * @param {ClubUpdateManyAndReturnArgs} args - Arguments to update many Clubs.
   * @example
   * // Update many Clubs
   * const club = await prisma.club.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Clubs and only return the `id`
   * const clubWithIdOnly = await prisma.club.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClubUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClubUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Club.
   * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
   * @example
   * // Update or create a Club
   * const club = await prisma.club.upsert({
   *   create: {
   *     // ... data to create a Club
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Club we want to update
   *   }
   * })
   */
  upsert<T extends ClubUpsertArgs>(args: Prisma.SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma.Prisma__ClubClient<runtime.Types.Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Clubs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
   * @example
   * // Count the number of Clubs
   * const count = await prisma.club.count({
   *   where: {
   *     // ... the filter for the Clubs we want to count
   *   }
   * })
  **/
  count<T extends ClubCountArgs>(
    args?: Prisma.Subset<T, ClubCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClubCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Club.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClubAggregateArgs>(args: Prisma.Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

  /**
   * Group by Club.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClubGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClubGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClubGroupByArgs['orderBy'] }
      : { orderBy?: ClubGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Club model
 */
readonly fields: ClubFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Club.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClubClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  supervisors<T extends Prisma.Club$supervisorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Club$supervisorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  members<T extends Prisma.Club$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Club$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Club model
 */
export interface ClubFieldRefs {
  readonly id: Prisma.FieldRef<"Club", 'String'>
  readonly name: Prisma.FieldRef<"Club", 'String'>
  readonly description: Prisma.FieldRef<"Club", 'String'>
  readonly foundedAt: Prisma.FieldRef<"Club", 'DateTime'>
  readonly schoolId: Prisma.FieldRef<"Club", 'String'>
  readonly createdAt: Prisma.FieldRef<"Club", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Club findUnique
 */
export type ClubFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter, which Club to fetch.
   */
  where: Prisma.ClubWhereUniqueInput
}

/**
 * Club findUniqueOrThrow
 */
export type ClubFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter, which Club to fetch.
   */
  where: Prisma.ClubWhereUniqueInput
}

/**
 * Club findFirst
 */
export type ClubFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter, which Club to fetch.
   */
  where?: Prisma.ClubWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clubs to fetch.
   */
  orderBy?: Prisma.ClubOrderByWithRelationInput | Prisma.ClubOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clubs.
   */
  cursor?: Prisma.ClubWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clubs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clubs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clubs.
   */
  distinct?: Prisma.ClubScalarFieldEnum | Prisma.ClubScalarFieldEnum[]
}

/**
 * Club findFirstOrThrow
 */
export type ClubFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter, which Club to fetch.
   */
  where?: Prisma.ClubWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clubs to fetch.
   */
  orderBy?: Prisma.ClubOrderByWithRelationInput | Prisma.ClubOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clubs.
   */
  cursor?: Prisma.ClubWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clubs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clubs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clubs.
   */
  distinct?: Prisma.ClubScalarFieldEnum | Prisma.ClubScalarFieldEnum[]
}

/**
 * Club findMany
 */
export type ClubFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter, which Clubs to fetch.
   */
  where?: Prisma.ClubWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clubs to fetch.
   */
  orderBy?: Prisma.ClubOrderByWithRelationInput | Prisma.ClubOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Clubs.
   */
  cursor?: Prisma.ClubWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clubs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clubs.
   */
  skip?: number
  distinct?: Prisma.ClubScalarFieldEnum | Prisma.ClubScalarFieldEnum[]
}

/**
 * Club create
 */
export type ClubCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * The data needed to create a Club.
   */
  data: Prisma.XOR<Prisma.ClubCreateInput, Prisma.ClubUncheckedCreateInput>
}

/**
 * Club createMany
 */
export type ClubCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Clubs.
   */
  data: Prisma.ClubCreateManyInput | Prisma.ClubCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Club createManyAndReturn
 */
export type ClubCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * The data used to create many Clubs.
   */
  data: Prisma.ClubCreateManyInput | Prisma.ClubCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Club update
 */
export type ClubUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * The data needed to update a Club.
   */
  data: Prisma.XOR<Prisma.ClubUpdateInput, Prisma.ClubUncheckedUpdateInput>
  /**
   * Choose, which Club to update.
   */
  where: Prisma.ClubWhereUniqueInput
}

/**
 * Club updateMany
 */
export type ClubUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Clubs.
   */
  data: Prisma.XOR<Prisma.ClubUpdateManyMutationInput, Prisma.ClubUncheckedUpdateManyInput>
  /**
   * Filter which Clubs to update
   */
  where?: Prisma.ClubWhereInput
  /**
   * Limit how many Clubs to update.
   */
  limit?: number
}

/**
 * Club updateManyAndReturn
 */
export type ClubUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * The data used to update Clubs.
   */
  data: Prisma.XOR<Prisma.ClubUpdateManyMutationInput, Prisma.ClubUncheckedUpdateManyInput>
  /**
   * Filter which Clubs to update
   */
  where?: Prisma.ClubWhereInput
  /**
   * Limit how many Clubs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Club upsert
 */
export type ClubUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * The filter to search for the Club to update in case it exists.
   */
  where: Prisma.ClubWhereUniqueInput
  /**
   * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
   */
  create: Prisma.XOR<Prisma.ClubCreateInput, Prisma.ClubUncheckedCreateInput>
  /**
   * In case the Club was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClubUpdateInput, Prisma.ClubUncheckedUpdateInput>
}

/**
 * Club delete
 */
export type ClubDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
  /**
   * Filter which Club to delete.
   */
  where: Prisma.ClubWhereUniqueInput
}

/**
 * Club deleteMany
 */
export type ClubDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Clubs to delete
   */
  where?: Prisma.ClubWhereInput
  /**
   * Limit how many Clubs to delete.
   */
  limit?: number
}

/**
 * Club.supervisors
 */
export type Club$supervisorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Staff
   */
  select?: Prisma.StaffSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Staff
   */
  omit?: Prisma.StaffOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffInclude<ExtArgs> | null
  where?: Prisma.StaffWhereInput
  orderBy?: Prisma.StaffOrderByWithRelationInput | Prisma.StaffOrderByWithRelationInput[]
  cursor?: Prisma.StaffWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StaffScalarFieldEnum | Prisma.StaffScalarFieldEnum[]
}

/**
 * Club.members
 */
export type Club$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null
  where?: Prisma.StudentWhereInput
  orderBy?: Prisma.StudentOrderByWithRelationInput | Prisma.StudentOrderByWithRelationInput[]
  cursor?: Prisma.StudentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StudentScalarFieldEnum | Prisma.StudentScalarFieldEnum[]
}

/**
 * Club without action
 */
export type ClubDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Club
   */
  select?: Prisma.ClubSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Club
   */
  omit?: Prisma.ClubOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClubInclude<ExtArgs> | null
}
