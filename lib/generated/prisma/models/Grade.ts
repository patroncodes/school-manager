
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Grade` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Grade
 * 
 */
export type GradeModel = runtime.Types.Result.DefaultSelection<Prisma.$GradePayload>

export type AggregateGrade = {
  _count: GradeCountAggregateOutputType | null
  _min: GradeMinAggregateOutputType | null
  _max: GradeMaxAggregateOutputType | null
}

export type GradeMinAggregateOutputType = {
  id: string | null
  name: string | null
  isActive: boolean | null
  schoolId: string | null
  programId: string | null
}

export type GradeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  isActive: boolean | null
  schoolId: string | null
  programId: string | null
}

export type GradeCountAggregateOutputType = {
  id: number
  name: number
  isActive: number
  schoolId: number
  programId: number
  _all: number
}


export type GradeMinAggregateInputType = {
  id?: true
  name?: true
  isActive?: true
  schoolId?: true
  programId?: true
}

export type GradeMaxAggregateInputType = {
  id?: true
  name?: true
  isActive?: true
  schoolId?: true
  programId?: true
}

export type GradeCountAggregateInputType = {
  id?: true
  name?: true
  isActive?: true
  schoolId?: true
  programId?: true
  _all?: true
}

export type GradeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Grade to aggregate.
   */
  where?: Prisma.GradeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Grades to fetch.
   */
  orderBy?: Prisma.GradeOrderByWithRelationInput | Prisma.GradeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GradeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Grades from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Grades.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Grades
  **/
  _count?: true | GradeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GradeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GradeMaxAggregateInputType
}

export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
      [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGrade[P]>
    : Prisma.GetScalarType<T[P], AggregateGrade[P]>
}




export type GradeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GradeWhereInput
  orderBy?: Prisma.GradeOrderByWithAggregationInput | Prisma.GradeOrderByWithAggregationInput[]
  by: Prisma.GradeScalarFieldEnum[] | Prisma.GradeScalarFieldEnum
  having?: Prisma.GradeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GradeCountAggregateInputType | true
  _min?: GradeMinAggregateInputType
  _max?: GradeMaxAggregateInputType
}

export type GradeGroupByOutputType = {
  id: string
  name: string
  isActive: boolean
  schoolId: string
  programId: string
  _count: GradeCountAggregateOutputType | null
  _min: GradeMinAggregateOutputType | null
  _max: GradeMaxAggregateOutputType | null
}

type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GradeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GradeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GradeGroupByOutputType[P]>
      }
    >
  >



export type GradeWhereInput = {
  AND?: Prisma.GradeWhereInput | Prisma.GradeWhereInput[]
  OR?: Prisma.GradeWhereInput[]
  NOT?: Prisma.GradeWhereInput | Prisma.GradeWhereInput[]
  id?: Prisma.StringFilter<"Grade"> | string
  name?: Prisma.StringFilter<"Grade"> | string
  isActive?: Prisma.BoolFilter<"Grade"> | boolean
  schoolId?: Prisma.StringFilter<"Grade"> | string
  programId?: Prisma.StringFilter<"Grade"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  classes?: Prisma.ClassListRelationFilter
  exams?: Prisma.ExamListRelationFilter
  invoices?: Prisma.InvoiceListRelationFilter
  events?: Prisma.EventListRelationFilter
  announcements?: Prisma.AnnouncementListRelationFilter
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentListRelationFilter
}

export type GradeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  program?: Prisma.ProgramOrderByWithRelationInput
  classes?: Prisma.ClassOrderByRelationAggregateInput
  exams?: Prisma.ExamOrderByRelationAggregateInput
  invoices?: Prisma.InvoiceOrderByRelationAggregateInput
  events?: Prisma.EventOrderByRelationAggregateInput
  announcements?: Prisma.AnnouncementOrderByRelationAggregateInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentOrderByRelationAggregateInput
}

export type GradeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_name?: Prisma.GradeSchoolIdNameCompoundUniqueInput
  AND?: Prisma.GradeWhereInput | Prisma.GradeWhereInput[]
  OR?: Prisma.GradeWhereInput[]
  NOT?: Prisma.GradeWhereInput | Prisma.GradeWhereInput[]
  name?: Prisma.StringFilter<"Grade"> | string
  isActive?: Prisma.BoolFilter<"Grade"> | boolean
  schoolId?: Prisma.StringFilter<"Grade"> | string
  programId?: Prisma.StringFilter<"Grade"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  classes?: Prisma.ClassListRelationFilter
  exams?: Prisma.ExamListRelationFilter
  invoices?: Prisma.InvoiceListRelationFilter
  events?: Prisma.EventListRelationFilter
  announcements?: Prisma.AnnouncementListRelationFilter
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentListRelationFilter
}, "id" | "schoolId_name">

export type GradeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  _count?: Prisma.GradeCountOrderByAggregateInput
  _max?: Prisma.GradeMaxOrderByAggregateInput
  _min?: Prisma.GradeMinOrderByAggregateInput
}

export type GradeScalarWhereWithAggregatesInput = {
  AND?: Prisma.GradeScalarWhereWithAggregatesInput | Prisma.GradeScalarWhereWithAggregatesInput[]
  OR?: Prisma.GradeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GradeScalarWhereWithAggregatesInput | Prisma.GradeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Grade"> | string
  name?: Prisma.StringWithAggregatesFilter<"Grade"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"Grade"> | boolean
  schoolId?: Prisma.StringWithAggregatesFilter<"Grade"> | string
  programId?: Prisma.StringWithAggregatesFilter<"Grade"> | string
}

export type GradeCreateInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateManyInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
}

export type GradeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type GradeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GradeListRelationFilter = {
  every?: Prisma.GradeWhereInput
  some?: Prisma.GradeWhereInput
  none?: Prisma.GradeWhereInput
}

export type GradeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GradeSchoolIdNameCompoundUniqueInput = {
  schoolId: string
  name: string
}

export type GradeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
}

export type GradeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
}

export type GradeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
}

export type GradeScalarRelationFilter = {
  is?: Prisma.GradeWhereInput
  isNot?: Prisma.GradeWhereInput
}

export type GradeNullableScalarRelationFilter = {
  is?: Prisma.GradeWhereInput | null
  isNot?: Prisma.GradeWhereInput | null
}

export type GradeCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput> | Prisma.GradeCreateWithoutSchoolInput[] | Prisma.GradeUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutSchoolInput | Prisma.GradeCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.GradeCreateManySchoolInputEnvelope
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
}

export type GradeUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput> | Prisma.GradeCreateWithoutSchoolInput[] | Prisma.GradeUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutSchoolInput | Prisma.GradeCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.GradeCreateManySchoolInputEnvelope
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
}

export type GradeUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput> | Prisma.GradeCreateWithoutSchoolInput[] | Prisma.GradeUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutSchoolInput | Prisma.GradeCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.GradeUpsertWithWhereUniqueWithoutSchoolInput | Prisma.GradeUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.GradeCreateManySchoolInputEnvelope
  set?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  disconnect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  delete?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  update?: Prisma.GradeUpdateWithWhereUniqueWithoutSchoolInput | Prisma.GradeUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.GradeUpdateManyWithWhereWithoutSchoolInput | Prisma.GradeUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
}

export type GradeUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput> | Prisma.GradeCreateWithoutSchoolInput[] | Prisma.GradeUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutSchoolInput | Prisma.GradeCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.GradeUpsertWithWhereUniqueWithoutSchoolInput | Prisma.GradeUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.GradeCreateManySchoolInputEnvelope
  set?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  disconnect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  delete?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  update?: Prisma.GradeUpdateWithWhereUniqueWithoutSchoolInput | Prisma.GradeUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.GradeUpdateManyWithWhereWithoutSchoolInput | Prisma.GradeUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
}

export type GradeCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput> | Prisma.GradeCreateWithoutProgramInput[] | Prisma.GradeUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutProgramInput | Prisma.GradeCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.GradeCreateManyProgramInputEnvelope
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
}

export type GradeUncheckedCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput> | Prisma.GradeCreateWithoutProgramInput[] | Prisma.GradeUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutProgramInput | Prisma.GradeCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.GradeCreateManyProgramInputEnvelope
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
}

export type GradeUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput> | Prisma.GradeCreateWithoutProgramInput[] | Prisma.GradeUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutProgramInput | Prisma.GradeCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.GradeUpsertWithWhereUniqueWithoutProgramInput | Prisma.GradeUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.GradeCreateManyProgramInputEnvelope
  set?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  disconnect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  delete?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  update?: Prisma.GradeUpdateWithWhereUniqueWithoutProgramInput | Prisma.GradeUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.GradeUpdateManyWithWhereWithoutProgramInput | Prisma.GradeUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
}

export type GradeUncheckedUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput> | Prisma.GradeCreateWithoutProgramInput[] | Prisma.GradeUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutProgramInput | Prisma.GradeCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.GradeUpsertWithWhereUniqueWithoutProgramInput | Prisma.GradeUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.GradeCreateManyProgramInputEnvelope
  set?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  disconnect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  delete?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  connect?: Prisma.GradeWhereUniqueInput | Prisma.GradeWhereUniqueInput[]
  update?: Prisma.GradeUpdateWithWhereUniqueWithoutProgramInput | Prisma.GradeUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.GradeUpdateManyWithWhereWithoutProgramInput | Prisma.GradeUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
}

export type GradeCreateNestedOneWithoutClassesInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutClassesInput, Prisma.GradeUncheckedCreateWithoutClassesInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutClassesInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneRequiredWithoutClassesNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutClassesInput, Prisma.GradeUncheckedCreateWithoutClassesInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutClassesInput
  upsert?: Prisma.GradeUpsertWithoutClassesInput
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutClassesInput, Prisma.GradeUpdateWithoutClassesInput>, Prisma.GradeUncheckedUpdateWithoutClassesInput>
}

export type GradeCreateNestedOneWithoutExamsInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutExamsInput, Prisma.GradeUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutExamsInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneRequiredWithoutExamsNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutExamsInput, Prisma.GradeUncheckedCreateWithoutExamsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutExamsInput
  upsert?: Prisma.GradeUpsertWithoutExamsInput
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutExamsInput, Prisma.GradeUpdateWithoutExamsInput>, Prisma.GradeUncheckedUpdateWithoutExamsInput>
}

export type GradeCreateNestedOneWithoutInvoicesInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutInvoicesInput, Prisma.GradeUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutInvoicesInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneWithoutInvoicesNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutInvoicesInput, Prisma.GradeUncheckedCreateWithoutInvoicesInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutInvoicesInput
  upsert?: Prisma.GradeUpsertWithoutInvoicesInput
  disconnect?: Prisma.GradeWhereInput | boolean
  delete?: Prisma.GradeWhereInput | boolean
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutInvoicesInput, Prisma.GradeUpdateWithoutInvoicesInput>, Prisma.GradeUncheckedUpdateWithoutInvoicesInput>
}

export type GradeCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutEventsInput, Prisma.GradeUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutEventsInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutEventsInput, Prisma.GradeUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutEventsInput
  upsert?: Prisma.GradeUpsertWithoutEventsInput
  disconnect?: Prisma.GradeWhereInput | boolean
  delete?: Prisma.GradeWhereInput | boolean
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutEventsInput, Prisma.GradeUpdateWithoutEventsInput>, Prisma.GradeUncheckedUpdateWithoutEventsInput>
}

export type GradeCreateNestedOneWithoutAnnouncementsInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutAnnouncementsInput, Prisma.GradeUncheckedCreateWithoutAnnouncementsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutAnnouncementsInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneWithoutAnnouncementsNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutAnnouncementsInput, Prisma.GradeUncheckedCreateWithoutAnnouncementsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutAnnouncementsInput
  upsert?: Prisma.GradeUpsertWithoutAnnouncementsInput
  disconnect?: Prisma.GradeWhereInput | boolean
  delete?: Prisma.GradeWhereInput | boolean
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutAnnouncementsInput, Prisma.GradeUpdateWithoutAnnouncementsInput>, Prisma.GradeUncheckedUpdateWithoutAnnouncementsInput>
}

export type GradeCreateNestedOneWithoutTeacherSubjectAssignmentsInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedCreateWithoutTeacherSubjectAssignmentsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutTeacherSubjectAssignmentsInput
  connect?: Prisma.GradeWhereUniqueInput
}

export type GradeUpdateOneWithoutTeacherSubjectAssignmentsNestedInput = {
  create?: Prisma.XOR<Prisma.GradeCreateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedCreateWithoutTeacherSubjectAssignmentsInput>
  connectOrCreate?: Prisma.GradeCreateOrConnectWithoutTeacherSubjectAssignmentsInput
  upsert?: Prisma.GradeUpsertWithoutTeacherSubjectAssignmentsInput
  disconnect?: Prisma.GradeWhereInput | boolean
  delete?: Prisma.GradeWhereInput | boolean
  connect?: Prisma.GradeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GradeUpdateToOneWithWhereWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUpdateWithoutTeacherSubjectAssignmentsInput>, Prisma.GradeUncheckedUpdateWithoutTeacherSubjectAssignmentsInput>
}

export type GradeCreateWithoutSchoolInput = {
  id?: string
  name: string
  isActive?: boolean
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutSchoolInput = {
  id?: string
  name: string
  isActive?: boolean
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutSchoolInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput>
}

export type GradeCreateManySchoolInputEnvelope = {
  data: Prisma.GradeCreateManySchoolInput | Prisma.GradeCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type GradeUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.GradeWhereUniqueInput
  update: Prisma.XOR<Prisma.GradeUpdateWithoutSchoolInput, Prisma.GradeUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutSchoolInput, Prisma.GradeUncheckedCreateWithoutSchoolInput>
}

export type GradeUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.GradeWhereUniqueInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutSchoolInput, Prisma.GradeUncheckedUpdateWithoutSchoolInput>
}

export type GradeUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.GradeScalarWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateManyMutationInput, Prisma.GradeUncheckedUpdateManyWithoutSchoolInput>
}

export type GradeScalarWhereInput = {
  AND?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
  OR?: Prisma.GradeScalarWhereInput[]
  NOT?: Prisma.GradeScalarWhereInput | Prisma.GradeScalarWhereInput[]
  id?: Prisma.StringFilter<"Grade"> | string
  name?: Prisma.StringFilter<"Grade"> | string
  isActive?: Prisma.BoolFilter<"Grade"> | boolean
  schoolId?: Prisma.StringFilter<"Grade"> | string
  programId?: Prisma.StringFilter<"Grade"> | string
}

export type GradeCreateWithoutProgramInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutProgramInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutProgramInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput>
}

export type GradeCreateManyProgramInputEnvelope = {
  data: Prisma.GradeCreateManyProgramInput | Prisma.GradeCreateManyProgramInput[]
  skipDuplicates?: boolean
}

export type GradeUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.GradeWhereUniqueInput
  update: Prisma.XOR<Prisma.GradeUpdateWithoutProgramInput, Prisma.GradeUncheckedUpdateWithoutProgramInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutProgramInput, Prisma.GradeUncheckedCreateWithoutProgramInput>
}

export type GradeUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.GradeWhereUniqueInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutProgramInput, Prisma.GradeUncheckedUpdateWithoutProgramInput>
}

export type GradeUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.GradeScalarWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateManyMutationInput, Prisma.GradeUncheckedUpdateManyWithoutProgramInput>
}

export type GradeCreateWithoutClassesInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutClassesInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutClassesInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutClassesInput, Prisma.GradeUncheckedCreateWithoutClassesInput>
}

export type GradeUpsertWithoutClassesInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutClassesInput, Prisma.GradeUncheckedUpdateWithoutClassesInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutClassesInput, Prisma.GradeUncheckedCreateWithoutClassesInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutClassesInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutClassesInput, Prisma.GradeUncheckedUpdateWithoutClassesInput>
}

export type GradeUpdateWithoutClassesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutClassesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateWithoutExamsInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutExamsInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutExamsInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutExamsInput, Prisma.GradeUncheckedCreateWithoutExamsInput>
}

export type GradeUpsertWithoutExamsInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutExamsInput, Prisma.GradeUncheckedUpdateWithoutExamsInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutExamsInput, Prisma.GradeUncheckedCreateWithoutExamsInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutExamsInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutExamsInput, Prisma.GradeUncheckedUpdateWithoutExamsInput>
}

export type GradeUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutExamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateWithoutInvoicesInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutInvoicesInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutInvoicesInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutInvoicesInput, Prisma.GradeUncheckedCreateWithoutInvoicesInput>
}

export type GradeUpsertWithoutInvoicesInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutInvoicesInput, Prisma.GradeUncheckedUpdateWithoutInvoicesInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutInvoicesInput, Prisma.GradeUncheckedCreateWithoutInvoicesInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutInvoicesInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutInvoicesInput, Prisma.GradeUncheckedUpdateWithoutInvoicesInput>
}

export type GradeUpdateWithoutInvoicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutInvoicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateWithoutEventsInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutEventsInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutEventsInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutEventsInput, Prisma.GradeUncheckedCreateWithoutEventsInput>
}

export type GradeUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutEventsInput, Prisma.GradeUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutEventsInput, Prisma.GradeUncheckedCreateWithoutEventsInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutEventsInput, Prisma.GradeUncheckedUpdateWithoutEventsInput>
}

export type GradeUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateWithoutAnnouncementsInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutAnnouncementsInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutAnnouncementsInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutAnnouncementsInput, Prisma.GradeUncheckedCreateWithoutAnnouncementsInput>
}

export type GradeUpsertWithoutAnnouncementsInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutAnnouncementsInput, Prisma.GradeUncheckedUpdateWithoutAnnouncementsInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutAnnouncementsInput, Prisma.GradeUncheckedCreateWithoutAnnouncementsInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutAnnouncementsInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutAnnouncementsInput, Prisma.GradeUncheckedUpdateWithoutAnnouncementsInput>
}

export type GradeUpdateWithoutAnnouncementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutAnnouncementsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateWithoutTeacherSubjectAssignmentsInput = {
  id?: string
  name: string
  isActive?: boolean
  school: Prisma.SchoolCreateNestedOneWithoutGradesInput
  program: Prisma.ProgramCreateNestedOneWithoutGradesInput
  classes?: Prisma.ClassCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceCreateNestedManyWithoutGradeInput
  events?: Prisma.EventCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementCreateNestedManyWithoutGradeInput
}

export type GradeUncheckedCreateWithoutTeacherSubjectAssignmentsInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
  programId: string
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutGradeInput
  exams?: Prisma.ExamUncheckedCreateNestedManyWithoutGradeInput
  invoices?: Prisma.InvoiceUncheckedCreateNestedManyWithoutGradeInput
  events?: Prisma.EventUncheckedCreateNestedManyWithoutGradeInput
  announcements?: Prisma.AnnouncementUncheckedCreateNestedManyWithoutGradeInput
}

export type GradeCreateOrConnectWithoutTeacherSubjectAssignmentsInput = {
  where: Prisma.GradeWhereUniqueInput
  create: Prisma.XOR<Prisma.GradeCreateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedCreateWithoutTeacherSubjectAssignmentsInput>
}

export type GradeUpsertWithoutTeacherSubjectAssignmentsInput = {
  update: Prisma.XOR<Prisma.GradeUpdateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedUpdateWithoutTeacherSubjectAssignmentsInput>
  create: Prisma.XOR<Prisma.GradeCreateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedCreateWithoutTeacherSubjectAssignmentsInput>
  where?: Prisma.GradeWhereInput
}

export type GradeUpdateToOneWithWhereWithoutTeacherSubjectAssignmentsInput = {
  where?: Prisma.GradeWhereInput
  data: Prisma.XOR<Prisma.GradeUpdateWithoutTeacherSubjectAssignmentsInput, Prisma.GradeUncheckedUpdateWithoutTeacherSubjectAssignmentsInput>
}

export type GradeUpdateWithoutTeacherSubjectAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutTeacherSubjectAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeCreateManySchoolInput = {
  id?: string
  name: string
  isActive?: boolean
  programId: string
}

export type GradeUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  program?: Prisma.ProgramUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  programId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GradeCreateManyProgramInput = {
  id?: string
  name: string
  isActive?: boolean
  schoolId: string
}

export type GradeUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  school?: Prisma.SchoolUpdateOneRequiredWithoutGradesNestedInput
  classes?: Prisma.ClassUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  classes?: Prisma.ClassUncheckedUpdateManyWithoutGradeNestedInput
  exams?: Prisma.ExamUncheckedUpdateManyWithoutGradeNestedInput
  invoices?: Prisma.InvoiceUncheckedUpdateManyWithoutGradeNestedInput
  events?: Prisma.EventUncheckedUpdateManyWithoutGradeNestedInput
  announcements?: Prisma.AnnouncementUncheckedUpdateManyWithoutGradeNestedInput
  teacherSubjectAssignments?: Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput
}

export type GradeUncheckedUpdateManyWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type GradeCountOutputType
 */

export type GradeCountOutputType = {
  classes: number
  exams: number
  invoices: number
  events: number
  announcements: number
  teacherSubjectAssignments: number
}

export type GradeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  classes?: boolean | GradeCountOutputTypeCountClassesArgs
  exams?: boolean | GradeCountOutputTypeCountExamsArgs
  invoices?: boolean | GradeCountOutputTypeCountInvoicesArgs
  events?: boolean | GradeCountOutputTypeCountEventsArgs
  announcements?: boolean | GradeCountOutputTypeCountAnnouncementsArgs
  teacherSubjectAssignments?: boolean | GradeCountOutputTypeCountTeacherSubjectAssignmentsArgs
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GradeCountOutputType
   */
  select?: Prisma.GradeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountClassesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClassWhereInput
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountExamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountInvoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvoiceWhereInput
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventWhereInput
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountAnnouncementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnnouncementWhereInput
}

/**
 * GradeCountOutputType without action
 */
export type GradeCountOutputTypeCountTeacherSubjectAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherSubjectAssignmentWhereInput
}


export type GradeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  isActive?: boolean
  schoolId?: boolean
  programId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  classes?: boolean | Prisma.Grade$classesArgs<ExtArgs>
  exams?: boolean | Prisma.Grade$examsArgs<ExtArgs>
  invoices?: boolean | Prisma.Grade$invoicesArgs<ExtArgs>
  events?: boolean | Prisma.Grade$eventsArgs<ExtArgs>
  announcements?: boolean | Prisma.Grade$announcementsArgs<ExtArgs>
  teacherSubjectAssignments?: boolean | Prisma.Grade$teacherSubjectAssignmentsArgs<ExtArgs>
  _count?: boolean | Prisma.GradeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grade"]>

export type GradeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  isActive?: boolean
  schoolId?: boolean
  programId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grade"]>

export type GradeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  isActive?: boolean
  schoolId?: boolean
  programId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grade"]>

export type GradeSelectScalar = {
  id?: boolean
  name?: boolean
  isActive?: boolean
  schoolId?: boolean
  programId?: boolean
}

export type GradeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "isActive" | "schoolId" | "programId", ExtArgs["result"]["grade"]>
export type GradeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  classes?: boolean | Prisma.Grade$classesArgs<ExtArgs>
  exams?: boolean | Prisma.Grade$examsArgs<ExtArgs>
  invoices?: boolean | Prisma.Grade$invoicesArgs<ExtArgs>
  events?: boolean | Prisma.Grade$eventsArgs<ExtArgs>
  announcements?: boolean | Prisma.Grade$announcementsArgs<ExtArgs>
  teacherSubjectAssignments?: boolean | Prisma.Grade$teacherSubjectAssignmentsArgs<ExtArgs>
  _count?: boolean | Prisma.GradeCountOutputTypeDefaultArgs<ExtArgs>
}
export type GradeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
}
export type GradeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
}

export type $GradePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Grade"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    program: Prisma.$ProgramPayload<ExtArgs>
    classes: Prisma.$ClassPayload<ExtArgs>[]
    exams: Prisma.$ExamPayload<ExtArgs>[]
    invoices: Prisma.$InvoicePayload<ExtArgs>[]
    events: Prisma.$EventPayload<ExtArgs>[]
    announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
    teacherSubjectAssignments: Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    isActive: boolean
    schoolId: string
    programId: string
  }, ExtArgs["result"]["grade"]>
  composites: {}
}

export type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GradePayload, S>

export type GradeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GradeCountAggregateInputType | true
  }

export interface GradeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
  /**
   * Find zero or one Grade that matches the filter.
   * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
   * @example
   * // Get one Grade
   * const grade = await prisma.grade.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GradeFindUniqueArgs>(args: Prisma.SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
   * @example
   * // Get one Grade
   * const grade = await prisma.grade.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Grade that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeFindFirstArgs} args - Arguments to find a Grade
   * @example
   * // Get one Grade
   * const grade = await prisma.grade.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GradeFindFirstArgs>(args?: Prisma.SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Grade that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
   * @example
   * // Get one Grade
   * const grade = await prisma.grade.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Grades that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Grades
   * const grades = await prisma.grade.findMany()
   * 
   * // Get first 10 Grades
   * const grades = await prisma.grade.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GradeFindManyArgs>(args?: Prisma.SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Grade.
   * @param {GradeCreateArgs} args - Arguments to create a Grade.
   * @example
   * // Create one Grade
   * const Grade = await prisma.grade.create({
   *   data: {
   *     // ... data to create a Grade
   *   }
   * })
   * 
   */
  create<T extends GradeCreateArgs>(args: Prisma.SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Grades.
   * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
   * @example
   * // Create many Grades
   * const grade = await prisma.grade.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GradeCreateManyArgs>(args?: Prisma.SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Grades and returns the data saved in the database.
   * @param {GradeCreateManyAndReturnArgs} args - Arguments to create many Grades.
   * @example
   * // Create many Grades
   * const grade = await prisma.grade.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Grades and only return the `id`
   * const gradeWithIdOnly = await prisma.grade.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GradeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Grade.
   * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
   * @example
   * // Delete one Grade
   * const Grade = await prisma.grade.delete({
   *   where: {
   *     // ... filter to delete one Grade
   *   }
   * })
   * 
   */
  delete<T extends GradeDeleteArgs>(args: Prisma.SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Grade.
   * @param {GradeUpdateArgs} args - Arguments to update one Grade.
   * @example
   * // Update one Grade
   * const grade = await prisma.grade.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GradeUpdateArgs>(args: Prisma.SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Grades.
   * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
   * @example
   * // Delete a few Grades
   * const { count } = await prisma.grade.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GradeDeleteManyArgs>(args?: Prisma.SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Grades.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Grades
   * const grade = await prisma.grade.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GradeUpdateManyArgs>(args: Prisma.SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Grades and returns the data updated in the database.
   * @param {GradeUpdateManyAndReturnArgs} args - Arguments to update many Grades.
   * @example
   * // Update many Grades
   * const grade = await prisma.grade.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Grades and only return the `id`
   * const gradeWithIdOnly = await prisma.grade.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GradeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Grade.
   * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
   * @example
   * // Update or create a Grade
   * const grade = await prisma.grade.upsert({
   *   create: {
   *     // ... data to create a Grade
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Grade we want to update
   *   }
   * })
   */
  upsert<T extends GradeUpsertArgs>(args: Prisma.SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Grades.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeCountArgs} args - Arguments to filter Grades to count.
   * @example
   * // Count the number of Grades
   * const count = await prisma.grade.count({
   *   where: {
   *     // ... the filter for the Grades we want to count
   *   }
   * })
  **/
  count<T extends GradeCountArgs>(
    args?: Prisma.Subset<T, GradeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GradeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Grade.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GradeAggregateArgs>(args: Prisma.Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

  /**
   * Group by Grade.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GradeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GradeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GradeGroupByArgs['orderBy'] }
      : { orderBy?: GradeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Grade model
 */
readonly fields: GradeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Grade.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GradeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  program<T extends Prisma.ProgramDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProgramDefaultArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  classes<T extends Prisma.Grade$classesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$classesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  exams<T extends Prisma.Grade$examsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$examsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  invoices<T extends Prisma.Grade$invoicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  events<T extends Prisma.Grade$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  announcements<T extends Prisma.Grade$announcementsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  teacherSubjectAssignments<T extends Prisma.Grade$teacherSubjectAssignmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Grade$teacherSubjectAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Grade model
 */
export interface GradeFieldRefs {
  readonly id: Prisma.FieldRef<"Grade", 'String'>
  readonly name: Prisma.FieldRef<"Grade", 'String'>
  readonly isActive: Prisma.FieldRef<"Grade", 'Boolean'>
  readonly schoolId: Prisma.FieldRef<"Grade", 'String'>
  readonly programId: Prisma.FieldRef<"Grade", 'String'>
}
    

// Custom InputTypes
/**
 * Grade findUnique
 */
export type GradeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter, which Grade to fetch.
   */
  where: Prisma.GradeWhereUniqueInput
}

/**
 * Grade findUniqueOrThrow
 */
export type GradeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter, which Grade to fetch.
   */
  where: Prisma.GradeWhereUniqueInput
}

/**
 * Grade findFirst
 */
export type GradeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter, which Grade to fetch.
   */
  where?: Prisma.GradeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Grades to fetch.
   */
  orderBy?: Prisma.GradeOrderByWithRelationInput | Prisma.GradeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Grades.
   */
  cursor?: Prisma.GradeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Grades from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Grades.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Grades.
   */
  distinct?: Prisma.GradeScalarFieldEnum | Prisma.GradeScalarFieldEnum[]
}

/**
 * Grade findFirstOrThrow
 */
export type GradeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter, which Grade to fetch.
   */
  where?: Prisma.GradeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Grades to fetch.
   */
  orderBy?: Prisma.GradeOrderByWithRelationInput | Prisma.GradeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Grades.
   */
  cursor?: Prisma.GradeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Grades from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Grades.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Grades.
   */
  distinct?: Prisma.GradeScalarFieldEnum | Prisma.GradeScalarFieldEnum[]
}

/**
 * Grade findMany
 */
export type GradeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter, which Grades to fetch.
   */
  where?: Prisma.GradeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Grades to fetch.
   */
  orderBy?: Prisma.GradeOrderByWithRelationInput | Prisma.GradeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Grades.
   */
  cursor?: Prisma.GradeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Grades from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Grades.
   */
  skip?: number
  distinct?: Prisma.GradeScalarFieldEnum | Prisma.GradeScalarFieldEnum[]
}

/**
 * Grade create
 */
export type GradeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * The data needed to create a Grade.
   */
  data: Prisma.XOR<Prisma.GradeCreateInput, Prisma.GradeUncheckedCreateInput>
}

/**
 * Grade createMany
 */
export type GradeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Grades.
   */
  data: Prisma.GradeCreateManyInput | Prisma.GradeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Grade createManyAndReturn
 */
export type GradeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * The data used to create many Grades.
   */
  data: Prisma.GradeCreateManyInput | Prisma.GradeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Grade update
 */
export type GradeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * The data needed to update a Grade.
   */
  data: Prisma.XOR<Prisma.GradeUpdateInput, Prisma.GradeUncheckedUpdateInput>
  /**
   * Choose, which Grade to update.
   */
  where: Prisma.GradeWhereUniqueInput
}

/**
 * Grade updateMany
 */
export type GradeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Grades.
   */
  data: Prisma.XOR<Prisma.GradeUpdateManyMutationInput, Prisma.GradeUncheckedUpdateManyInput>
  /**
   * Filter which Grades to update
   */
  where?: Prisma.GradeWhereInput
  /**
   * Limit how many Grades to update.
   */
  limit?: number
}

/**
 * Grade updateManyAndReturn
 */
export type GradeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * The data used to update Grades.
   */
  data: Prisma.XOR<Prisma.GradeUpdateManyMutationInput, Prisma.GradeUncheckedUpdateManyInput>
  /**
   * Filter which Grades to update
   */
  where?: Prisma.GradeWhereInput
  /**
   * Limit how many Grades to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Grade upsert
 */
export type GradeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * The filter to search for the Grade to update in case it exists.
   */
  where: Prisma.GradeWhereUniqueInput
  /**
   * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
   */
  create: Prisma.XOR<Prisma.GradeCreateInput, Prisma.GradeUncheckedCreateInput>
  /**
   * In case the Grade was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GradeUpdateInput, Prisma.GradeUncheckedUpdateInput>
}

/**
 * Grade delete
 */
export type GradeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  /**
   * Filter which Grade to delete.
   */
  where: Prisma.GradeWhereUniqueInput
}

/**
 * Grade deleteMany
 */
export type GradeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Grades to delete
   */
  where?: Prisma.GradeWhereInput
  /**
   * Limit how many Grades to delete.
   */
  limit?: number
}

/**
 * Grade.classes
 */
export type Grade$classesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Class
   */
  select?: Prisma.ClassSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Class
   */
  omit?: Prisma.ClassOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassInclude<ExtArgs> | null
  where?: Prisma.ClassWhereInput
  orderBy?: Prisma.ClassOrderByWithRelationInput | Prisma.ClassOrderByWithRelationInput[]
  cursor?: Prisma.ClassWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClassScalarFieldEnum | Prisma.ClassScalarFieldEnum[]
}

/**
 * Grade.exams
 */
export type Grade$examsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  cursor?: Prisma.ExamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Grade.invoices
 */
export type Grade$invoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invoice
   */
  select?: Prisma.InvoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invoice
   */
  omit?: Prisma.InvoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvoiceInclude<ExtArgs> | null
  where?: Prisma.InvoiceWhereInput
  orderBy?: Prisma.InvoiceOrderByWithRelationInput | Prisma.InvoiceOrderByWithRelationInput[]
  cursor?: Prisma.InvoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InvoiceScalarFieldEnum | Prisma.InvoiceScalarFieldEnum[]
}

/**
 * Grade.events
 */
export type Grade$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  where?: Prisma.EventWhereInput
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  cursor?: Prisma.EventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Grade.announcements
 */
export type Grade$announcementsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnnouncementInclude<ExtArgs> | null
  where?: Prisma.AnnouncementWhereInput
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  cursor?: Prisma.AnnouncementWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnnouncementScalarFieldEnum | Prisma.AnnouncementScalarFieldEnum[]
}

/**
 * Grade.teacherSubjectAssignments
 */
export type Grade$teacherSubjectAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithRelationInput | Prisma.TeacherSubjectAssignmentOrderByWithRelationInput[]
  cursor?: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TeacherSubjectAssignmentScalarFieldEnum | Prisma.TeacherSubjectAssignmentScalarFieldEnum[]
}

/**
 * Grade without action
 */
export type GradeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
}
