
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StaffAttendance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StaffAttendance
 * 
 */
export type StaffAttendanceModel = runtime.Types.Result.DefaultSelection<Prisma.$StaffAttendancePayload>

export type AggregateStaffAttendance = {
  _count: StaffAttendanceCountAggregateOutputType | null
  _min: StaffAttendanceMinAggregateOutputType | null
  _max: StaffAttendanceMaxAggregateOutputType | null
}

export type StaffAttendanceMinAggregateOutputType = {
  id: string | null
  date: Date | null
  clockInTime: Date | null
  reasonForAbsence: string | null
  schoolId: string | null
  termId: string | null
  staffId: string | null
}

export type StaffAttendanceMaxAggregateOutputType = {
  id: string | null
  date: Date | null
  clockInTime: Date | null
  reasonForAbsence: string | null
  schoolId: string | null
  termId: string | null
  staffId: string | null
}

export type StaffAttendanceCountAggregateOutputType = {
  id: number
  date: number
  clockInTime: number
  reasonForAbsence: number
  schoolId: number
  termId: number
  staffId: number
  _all: number
}


export type StaffAttendanceMinAggregateInputType = {
  id?: true
  date?: true
  clockInTime?: true
  reasonForAbsence?: true
  schoolId?: true
  termId?: true
  staffId?: true
}

export type StaffAttendanceMaxAggregateInputType = {
  id?: true
  date?: true
  clockInTime?: true
  reasonForAbsence?: true
  schoolId?: true
  termId?: true
  staffId?: true
}

export type StaffAttendanceCountAggregateInputType = {
  id?: true
  date?: true
  clockInTime?: true
  reasonForAbsence?: true
  schoolId?: true
  termId?: true
  staffId?: true
  _all?: true
}

export type StaffAttendanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffAttendance to aggregate.
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffAttendances to fetch.
   */
  orderBy?: Prisma.StaffAttendanceOrderByWithRelationInput | Prisma.StaffAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StaffAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StaffAttendances
  **/
  _count?: true | StaffAttendanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StaffAttendanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StaffAttendanceMaxAggregateInputType
}

export type GetStaffAttendanceAggregateType<T extends StaffAttendanceAggregateArgs> = {
      [P in keyof T & keyof AggregateStaffAttendance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffAttendance[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffAttendance[P]>
}




export type StaffAttendanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffAttendanceWhereInput
  orderBy?: Prisma.StaffAttendanceOrderByWithAggregationInput | Prisma.StaffAttendanceOrderByWithAggregationInput[]
  by: Prisma.StaffAttendanceScalarFieldEnum[] | Prisma.StaffAttendanceScalarFieldEnum
  having?: Prisma.StaffAttendanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StaffAttendanceCountAggregateInputType | true
  _min?: StaffAttendanceMinAggregateInputType
  _max?: StaffAttendanceMaxAggregateInputType
}

export type StaffAttendanceGroupByOutputType = {
  id: string
  date: Date
  clockInTime: Date
  reasonForAbsence: string | null
  schoolId: string
  termId: string
  staffId: string
  _count: StaffAttendanceCountAggregateOutputType | null
  _min: StaffAttendanceMinAggregateOutputType | null
  _max: StaffAttendanceMaxAggregateOutputType | null
}

type GetStaffAttendanceGroupByPayload<T extends StaffAttendanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StaffAttendanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StaffAttendanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffAttendanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffAttendanceGroupByOutputType[P]>
      }
    >
  >



export type StaffAttendanceWhereInput = {
  AND?: Prisma.StaffAttendanceWhereInput | Prisma.StaffAttendanceWhereInput[]
  OR?: Prisma.StaffAttendanceWhereInput[]
  NOT?: Prisma.StaffAttendanceWhereInput | Prisma.StaffAttendanceWhereInput[]
  id?: Prisma.StringFilter<"StaffAttendance"> | string
  date?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  clockInTime?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  reasonForAbsence?: Prisma.StringNullableFilter<"StaffAttendance"> | string | null
  schoolId?: Prisma.StringFilter<"StaffAttendance"> | string
  termId?: Prisma.StringFilter<"StaffAttendance"> | string
  staffId?: Prisma.StringFilter<"StaffAttendance"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}

export type StaffAttendanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  clockInTime?: Prisma.SortOrder
  reasonForAbsence?: Prisma.SortOrderInput | Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  term?: Prisma.TermOrderByWithRelationInput
  staff?: Prisma.StaffOrderByWithRelationInput
}

export type StaffAttendanceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_staffId_date?: Prisma.StaffAttendanceSchoolIdStaffIdDateCompoundUniqueInput
  AND?: Prisma.StaffAttendanceWhereInput | Prisma.StaffAttendanceWhereInput[]
  OR?: Prisma.StaffAttendanceWhereInput[]
  NOT?: Prisma.StaffAttendanceWhereInput | Prisma.StaffAttendanceWhereInput[]
  date?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  clockInTime?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  reasonForAbsence?: Prisma.StringNullableFilter<"StaffAttendance"> | string | null
  schoolId?: Prisma.StringFilter<"StaffAttendance"> | string
  termId?: Prisma.StringFilter<"StaffAttendance"> | string
  staffId?: Prisma.StringFilter<"StaffAttendance"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  term?: Prisma.XOR<Prisma.TermScalarRelationFilter, Prisma.TermWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}, "id" | "schoolId_staffId_date">

export type StaffAttendanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  clockInTime?: Prisma.SortOrder
  reasonForAbsence?: Prisma.SortOrderInput | Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  _count?: Prisma.StaffAttendanceCountOrderByAggregateInput
  _max?: Prisma.StaffAttendanceMaxOrderByAggregateInput
  _min?: Prisma.StaffAttendanceMinOrderByAggregateInput
}

export type StaffAttendanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.StaffAttendanceScalarWhereWithAggregatesInput | Prisma.StaffAttendanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.StaffAttendanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StaffAttendanceScalarWhereWithAggregatesInput | Prisma.StaffAttendanceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StaffAttendance"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"StaffAttendance"> | Date | string
  clockInTime?: Prisma.DateTimeWithAggregatesFilter<"StaffAttendance"> | Date | string
  reasonForAbsence?: Prisma.StringNullableWithAggregatesFilter<"StaffAttendance"> | string | null
  schoolId?: Prisma.StringWithAggregatesFilter<"StaffAttendance"> | string
  termId?: Prisma.StringWithAggregatesFilter<"StaffAttendance"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"StaffAttendance"> | string
}

export type StaffAttendanceCreateInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  school: Prisma.SchoolCreateNestedOneWithoutStaffAttendancesInput
  term: Prisma.TermCreateNestedOneWithoutStaffAttendancesInput
  staff: Prisma.StaffCreateNestedOneWithoutAttendancesInput
}

export type StaffAttendanceUncheckedCreateInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  termId: string
  staffId: string
}

export type StaffAttendanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  school?: Prisma.SchoolUpdateOneRequiredWithoutStaffAttendancesNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutStaffAttendancesNestedInput
  staff?: Prisma.StaffUpdateOneRequiredWithoutAttendancesNestedInput
}

export type StaffAttendanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceCreateManyInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  termId: string
  staffId: string
}

export type StaffAttendanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type StaffAttendanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceListRelationFilter = {
  every?: Prisma.StaffAttendanceWhereInput
  some?: Prisma.StaffAttendanceWhereInput
  none?: Prisma.StaffAttendanceWhereInput
}

export type StaffAttendanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StaffAttendanceSchoolIdStaffIdDateCompoundUniqueInput = {
  schoolId: string
  staffId: string
  date: Date | string
}

export type StaffAttendanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  clockInTime?: Prisma.SortOrder
  reasonForAbsence?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffAttendanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  clockInTime?: Prisma.SortOrder
  reasonForAbsence?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffAttendanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  clockInTime?: Prisma.SortOrder
  reasonForAbsence?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  termId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffAttendanceCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput> | Prisma.StaffAttendanceCreateWithoutSchoolInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput | Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.StaffAttendanceCreateManySchoolInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput> | Prisma.StaffAttendanceCreateWithoutSchoolInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput | Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.StaffAttendanceCreateManySchoolInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput> | Prisma.StaffAttendanceCreateWithoutSchoolInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput | Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.StaffAttendanceCreateManySchoolInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutSchoolInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput> | Prisma.StaffAttendanceCreateWithoutSchoolInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput | Prisma.StaffAttendanceCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.StaffAttendanceCreateManySchoolInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutSchoolInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceCreateNestedManyWithoutTermInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput> | Prisma.StaffAttendanceCreateWithoutTermInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutTermInput | Prisma.StaffAttendanceCreateOrConnectWithoutTermInput[]
  createMany?: Prisma.StaffAttendanceCreateManyTermInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUncheckedCreateNestedManyWithoutTermInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput> | Prisma.StaffAttendanceCreateWithoutTermInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutTermInput | Prisma.StaffAttendanceCreateOrConnectWithoutTermInput[]
  createMany?: Prisma.StaffAttendanceCreateManyTermInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUpdateManyWithoutTermNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput> | Prisma.StaffAttendanceCreateWithoutTermInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutTermInput | Prisma.StaffAttendanceCreateOrConnectWithoutTermInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutTermInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutTermInput[]
  createMany?: Prisma.StaffAttendanceCreateManyTermInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutTermInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutTermInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutTermInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutTermInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceUncheckedUpdateManyWithoutTermNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput> | Prisma.StaffAttendanceCreateWithoutTermInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutTermInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutTermInput | Prisma.StaffAttendanceCreateOrConnectWithoutTermInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutTermInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutTermInput[]
  createMany?: Prisma.StaffAttendanceCreateManyTermInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutTermInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutTermInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutTermInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutTermInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput> | Prisma.StaffAttendanceCreateWithoutStaffInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput | Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.StaffAttendanceCreateManyStaffInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUncheckedCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput> | Prisma.StaffAttendanceCreateWithoutStaffInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput | Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.StaffAttendanceCreateManyStaffInputEnvelope
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
}

export type StaffAttendanceUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput> | Prisma.StaffAttendanceCreateWithoutStaffInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput | Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.StaffAttendanceCreateManyStaffInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutStaffInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceUncheckedUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput> | Prisma.StaffAttendanceCreateWithoutStaffInput[] | Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput | Prisma.StaffAttendanceCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput | Prisma.StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.StaffAttendanceCreateManyStaffInputEnvelope
  set?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  disconnect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  delete?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  connect?: Prisma.StaffAttendanceWhereUniqueInput | Prisma.StaffAttendanceWhereUniqueInput[]
  update?: Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput | Prisma.StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.StaffAttendanceUpdateManyWithWhereWithoutStaffInput | Prisma.StaffAttendanceUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
}

export type StaffAttendanceCreateWithoutSchoolInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  term: Prisma.TermCreateNestedOneWithoutStaffAttendancesInput
  staff: Prisma.StaffCreateNestedOneWithoutAttendancesInput
}

export type StaffAttendanceUncheckedCreateWithoutSchoolInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  termId: string
  staffId: string
}

export type StaffAttendanceCreateOrConnectWithoutSchoolInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput>
}

export type StaffAttendanceCreateManySchoolInputEnvelope = {
  data: Prisma.StaffAttendanceCreateManySchoolInput | Prisma.StaffAttendanceCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type StaffAttendanceUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedCreateWithoutSchoolInput>
}

export type StaffAttendanceUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutSchoolInput, Prisma.StaffAttendanceUncheckedUpdateWithoutSchoolInput>
}

export type StaffAttendanceUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.StaffAttendanceScalarWhereInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateManyMutationInput, Prisma.StaffAttendanceUncheckedUpdateManyWithoutSchoolInput>
}

export type StaffAttendanceScalarWhereInput = {
  AND?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
  OR?: Prisma.StaffAttendanceScalarWhereInput[]
  NOT?: Prisma.StaffAttendanceScalarWhereInput | Prisma.StaffAttendanceScalarWhereInput[]
  id?: Prisma.StringFilter<"StaffAttendance"> | string
  date?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  clockInTime?: Prisma.DateTimeFilter<"StaffAttendance"> | Date | string
  reasonForAbsence?: Prisma.StringNullableFilter<"StaffAttendance"> | string | null
  schoolId?: Prisma.StringFilter<"StaffAttendance"> | string
  termId?: Prisma.StringFilter<"StaffAttendance"> | string
  staffId?: Prisma.StringFilter<"StaffAttendance"> | string
}

export type StaffAttendanceCreateWithoutTermInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  school: Prisma.SchoolCreateNestedOneWithoutStaffAttendancesInput
  staff: Prisma.StaffCreateNestedOneWithoutAttendancesInput
}

export type StaffAttendanceUncheckedCreateWithoutTermInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  staffId: string
}

export type StaffAttendanceCreateOrConnectWithoutTermInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput>
}

export type StaffAttendanceCreateManyTermInputEnvelope = {
  data: Prisma.StaffAttendanceCreateManyTermInput | Prisma.StaffAttendanceCreateManyTermInput[]
  skipDuplicates?: boolean
}

export type StaffAttendanceUpsertWithWhereUniqueWithoutTermInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutTermInput, Prisma.StaffAttendanceUncheckedUpdateWithoutTermInput>
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutTermInput, Prisma.StaffAttendanceUncheckedCreateWithoutTermInput>
}

export type StaffAttendanceUpdateWithWhereUniqueWithoutTermInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutTermInput, Prisma.StaffAttendanceUncheckedUpdateWithoutTermInput>
}

export type StaffAttendanceUpdateManyWithWhereWithoutTermInput = {
  where: Prisma.StaffAttendanceScalarWhereInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateManyMutationInput, Prisma.StaffAttendanceUncheckedUpdateManyWithoutTermInput>
}

export type StaffAttendanceCreateWithoutStaffInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  school: Prisma.SchoolCreateNestedOneWithoutStaffAttendancesInput
  term: Prisma.TermCreateNestedOneWithoutStaffAttendancesInput
}

export type StaffAttendanceUncheckedCreateWithoutStaffInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  termId: string
}

export type StaffAttendanceCreateOrConnectWithoutStaffInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput>
}

export type StaffAttendanceCreateManyStaffInputEnvelope = {
  data: Prisma.StaffAttendanceCreateManyStaffInput | Prisma.StaffAttendanceCreateManyStaffInput[]
  skipDuplicates?: boolean
}

export type StaffAttendanceUpsertWithWhereUniqueWithoutStaffInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutStaffInput, Prisma.StaffAttendanceUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.StaffAttendanceCreateWithoutStaffInput, Prisma.StaffAttendanceUncheckedCreateWithoutStaffInput>
}

export type StaffAttendanceUpdateWithWhereUniqueWithoutStaffInput = {
  where: Prisma.StaffAttendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateWithoutStaffInput, Prisma.StaffAttendanceUncheckedUpdateWithoutStaffInput>
}

export type StaffAttendanceUpdateManyWithWhereWithoutStaffInput = {
  where: Prisma.StaffAttendanceScalarWhereInput
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateManyMutationInput, Prisma.StaffAttendanceUncheckedUpdateManyWithoutStaffInput>
}

export type StaffAttendanceCreateManySchoolInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  termId: string
  staffId: string
}

export type StaffAttendanceUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  term?: Prisma.TermUpdateOneRequiredWithoutStaffAttendancesNestedInput
  staff?: Prisma.StaffUpdateOneRequiredWithoutAttendancesNestedInput
}

export type StaffAttendanceUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  termId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceCreateManyTermInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  staffId: string
}

export type StaffAttendanceUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  school?: Prisma.SchoolUpdateOneRequiredWithoutStaffAttendancesNestedInput
  staff?: Prisma.StaffUpdateOneRequiredWithoutAttendancesNestedInput
}

export type StaffAttendanceUncheckedUpdateWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceUncheckedUpdateManyWithoutTermInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceCreateManyStaffInput = {
  id?: string
  date: Date | string
  clockInTime?: Date | string
  reasonForAbsence?: string | null
  schoolId: string
  termId: string
}

export type StaffAttendanceUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  school?: Prisma.SchoolUpdateOneRequiredWithoutStaffAttendancesNestedInput
  term?: Prisma.TermUpdateOneRequiredWithoutStaffAttendancesNestedInput
}

export type StaffAttendanceUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffAttendanceUncheckedUpdateManyWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clockInTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reasonForAbsence?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  termId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type StaffAttendanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  clockInTime?: boolean
  reasonForAbsence?: boolean
  schoolId?: boolean
  termId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffAttendance"]>

export type StaffAttendanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  clockInTime?: boolean
  reasonForAbsence?: boolean
  schoolId?: boolean
  termId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffAttendance"]>

export type StaffAttendanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  clockInTime?: boolean
  reasonForAbsence?: boolean
  schoolId?: boolean
  termId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffAttendance"]>

export type StaffAttendanceSelectScalar = {
  id?: boolean
  date?: boolean
  clockInTime?: boolean
  reasonForAbsence?: boolean
  schoolId?: boolean
  termId?: boolean
  staffId?: boolean
}

export type StaffAttendanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "date" | "clockInTime" | "reasonForAbsence" | "schoolId" | "termId" | "staffId", ExtArgs["result"]["staffAttendance"]>
export type StaffAttendanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type StaffAttendanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type StaffAttendanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  term?: boolean | Prisma.TermDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}

export type $StaffAttendancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StaffAttendance"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    term: Prisma.$TermPayload<ExtArgs>
    staff: Prisma.$StaffPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    date: Date
    clockInTime: Date
    reasonForAbsence: string | null
    schoolId: string
    termId: string
    staffId: string
  }, ExtArgs["result"]["staffAttendance"]>
  composites: {}
}

export type StaffAttendanceGetPayload<S extends boolean | null | undefined | StaffAttendanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload, S>

export type StaffAttendanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StaffAttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StaffAttendanceCountAggregateInputType | true
  }

export interface StaffAttendanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffAttendance'], meta: { name: 'StaffAttendance' } }
  /**
   * Find zero or one StaffAttendance that matches the filter.
   * @param {StaffAttendanceFindUniqueArgs} args - Arguments to find a StaffAttendance
   * @example
   * // Get one StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffAttendanceFindUniqueArgs>(args: Prisma.SelectSubset<T, StaffAttendanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StaffAttendance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffAttendanceFindUniqueOrThrowArgs} args - Arguments to find a StaffAttendance
   * @example
   * // Get one StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffAttendanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StaffAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffAttendance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceFindFirstArgs} args - Arguments to find a StaffAttendance
   * @example
   * // Get one StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffAttendanceFindFirstArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffAttendance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceFindFirstOrThrowArgs} args - Arguments to find a StaffAttendance
   * @example
   * // Get one StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffAttendanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StaffAttendances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffAttendances
   * const staffAttendances = await prisma.staffAttendance.findMany()
   * 
   * // Get first 10 StaffAttendances
   * const staffAttendances = await prisma.staffAttendance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const staffAttendanceWithIdOnly = await prisma.staffAttendance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StaffAttendanceFindManyArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StaffAttendance.
   * @param {StaffAttendanceCreateArgs} args - Arguments to create a StaffAttendance.
   * @example
   * // Create one StaffAttendance
   * const StaffAttendance = await prisma.staffAttendance.create({
   *   data: {
   *     // ... data to create a StaffAttendance
   *   }
   * })
   * 
   */
  create<T extends StaffAttendanceCreateArgs>(args: Prisma.SelectSubset<T, StaffAttendanceCreateArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StaffAttendances.
   * @param {StaffAttendanceCreateManyArgs} args - Arguments to create many StaffAttendances.
   * @example
   * // Create many StaffAttendances
   * const staffAttendance = await prisma.staffAttendance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StaffAttendanceCreateManyArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StaffAttendances and returns the data saved in the database.
   * @param {StaffAttendanceCreateManyAndReturnArgs} args - Arguments to create many StaffAttendances.
   * @example
   * // Create many StaffAttendances
   * const staffAttendance = await prisma.staffAttendance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StaffAttendances and only return the `id`
   * const staffAttendanceWithIdOnly = await prisma.staffAttendance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StaffAttendanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StaffAttendance.
   * @param {StaffAttendanceDeleteArgs} args - Arguments to delete one StaffAttendance.
   * @example
   * // Delete one StaffAttendance
   * const StaffAttendance = await prisma.staffAttendance.delete({
   *   where: {
   *     // ... filter to delete one StaffAttendance
   *   }
   * })
   * 
   */
  delete<T extends StaffAttendanceDeleteArgs>(args: Prisma.SelectSubset<T, StaffAttendanceDeleteArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StaffAttendance.
   * @param {StaffAttendanceUpdateArgs} args - Arguments to update one StaffAttendance.
   * @example
   * // Update one StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StaffAttendanceUpdateArgs>(args: Prisma.SelectSubset<T, StaffAttendanceUpdateArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StaffAttendances.
   * @param {StaffAttendanceDeleteManyArgs} args - Arguments to filter StaffAttendances to delete.
   * @example
   * // Delete a few StaffAttendances
   * const { count } = await prisma.staffAttendance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StaffAttendanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, StaffAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffAttendances
   * const staffAttendance = await prisma.staffAttendance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StaffAttendanceUpdateManyArgs>(args: Prisma.SelectSubset<T, StaffAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffAttendances and returns the data updated in the database.
   * @param {StaffAttendanceUpdateManyAndReturnArgs} args - Arguments to update many StaffAttendances.
   * @example
   * // Update many StaffAttendances
   * const staffAttendance = await prisma.staffAttendance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StaffAttendances and only return the `id`
   * const staffAttendanceWithIdOnly = await prisma.staffAttendance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StaffAttendanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StaffAttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StaffAttendance.
   * @param {StaffAttendanceUpsertArgs} args - Arguments to update or create a StaffAttendance.
   * @example
   * // Update or create a StaffAttendance
   * const staffAttendance = await prisma.staffAttendance.upsert({
   *   create: {
   *     // ... data to create a StaffAttendance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffAttendance we want to update
   *   }
   * })
   */
  upsert<T extends StaffAttendanceUpsertArgs>(args: Prisma.SelectSubset<T, StaffAttendanceUpsertArgs<ExtArgs>>): Prisma.Prisma__StaffAttendanceClient<runtime.Types.Result.GetResult<Prisma.$StaffAttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StaffAttendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceCountArgs} args - Arguments to filter StaffAttendances to count.
   * @example
   * // Count the number of StaffAttendances
   * const count = await prisma.staffAttendance.count({
   *   where: {
   *     // ... the filter for the StaffAttendances we want to count
   *   }
   * })
  **/
  count<T extends StaffAttendanceCountArgs>(
    args?: Prisma.Subset<T, StaffAttendanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StaffAttendanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StaffAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StaffAttendanceAggregateArgs>(args: Prisma.Subset<T, StaffAttendanceAggregateArgs>): Prisma.PrismaPromise<GetStaffAttendanceAggregateType<T>>

  /**
   * Group by StaffAttendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffAttendanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StaffAttendanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffAttendanceGroupByArgs['orderBy'] }
      : { orderBy?: StaffAttendanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StaffAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StaffAttendance model
 */
readonly fields: StaffAttendanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffAttendance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffAttendanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  term<T extends Prisma.TermDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TermDefaultArgs<ExtArgs>>): Prisma.Prisma__TermClient<runtime.Types.Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  staff<T extends Prisma.StaffDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StaffDefaultArgs<ExtArgs>>): Prisma.Prisma__StaffClient<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StaffAttendance model
 */
export interface StaffAttendanceFieldRefs {
  readonly id: Prisma.FieldRef<"StaffAttendance", 'String'>
  readonly date: Prisma.FieldRef<"StaffAttendance", 'DateTime'>
  readonly clockInTime: Prisma.FieldRef<"StaffAttendance", 'DateTime'>
  readonly reasonForAbsence: Prisma.FieldRef<"StaffAttendance", 'String'>
  readonly schoolId: Prisma.FieldRef<"StaffAttendance", 'String'>
  readonly termId: Prisma.FieldRef<"StaffAttendance", 'String'>
  readonly staffId: Prisma.FieldRef<"StaffAttendance", 'String'>
}
    

// Custom InputTypes
/**
 * StaffAttendance findUnique
 */
export type StaffAttendanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which StaffAttendance to fetch.
   */
  where: Prisma.StaffAttendanceWhereUniqueInput
}

/**
 * StaffAttendance findUniqueOrThrow
 */
export type StaffAttendanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which StaffAttendance to fetch.
   */
  where: Prisma.StaffAttendanceWhereUniqueInput
}

/**
 * StaffAttendance findFirst
 */
export type StaffAttendanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which StaffAttendance to fetch.
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffAttendances to fetch.
   */
  orderBy?: Prisma.StaffAttendanceOrderByWithRelationInput | Prisma.StaffAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffAttendances.
   */
  cursor?: Prisma.StaffAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffAttendances.
   */
  distinct?: Prisma.StaffAttendanceScalarFieldEnum | Prisma.StaffAttendanceScalarFieldEnum[]
}

/**
 * StaffAttendance findFirstOrThrow
 */
export type StaffAttendanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which StaffAttendance to fetch.
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffAttendances to fetch.
   */
  orderBy?: Prisma.StaffAttendanceOrderByWithRelationInput | Prisma.StaffAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffAttendances.
   */
  cursor?: Prisma.StaffAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffAttendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffAttendances.
   */
  distinct?: Prisma.StaffAttendanceScalarFieldEnum | Prisma.StaffAttendanceScalarFieldEnum[]
}

/**
 * StaffAttendance findMany
 */
export type StaffAttendanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter, which StaffAttendances to fetch.
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffAttendances to fetch.
   */
  orderBy?: Prisma.StaffAttendanceOrderByWithRelationInput | Prisma.StaffAttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StaffAttendances.
   */
  cursor?: Prisma.StaffAttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffAttendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffAttendances.
   */
  skip?: number
  distinct?: Prisma.StaffAttendanceScalarFieldEnum | Prisma.StaffAttendanceScalarFieldEnum[]
}

/**
 * StaffAttendance create
 */
export type StaffAttendanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * The data needed to create a StaffAttendance.
   */
  data: Prisma.XOR<Prisma.StaffAttendanceCreateInput, Prisma.StaffAttendanceUncheckedCreateInput>
}

/**
 * StaffAttendance createMany
 */
export type StaffAttendanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StaffAttendances.
   */
  data: Prisma.StaffAttendanceCreateManyInput | Prisma.StaffAttendanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffAttendance createManyAndReturn
 */
export type StaffAttendanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * The data used to create many StaffAttendances.
   */
  data: Prisma.StaffAttendanceCreateManyInput | Prisma.StaffAttendanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StaffAttendance update
 */
export type StaffAttendanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * The data needed to update a StaffAttendance.
   */
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateInput, Prisma.StaffAttendanceUncheckedUpdateInput>
  /**
   * Choose, which StaffAttendance to update.
   */
  where: Prisma.StaffAttendanceWhereUniqueInput
}

/**
 * StaffAttendance updateMany
 */
export type StaffAttendanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StaffAttendances.
   */
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateManyMutationInput, Prisma.StaffAttendanceUncheckedUpdateManyInput>
  /**
   * Filter which StaffAttendances to update
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * Limit how many StaffAttendances to update.
   */
  limit?: number
}

/**
 * StaffAttendance updateManyAndReturn
 */
export type StaffAttendanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * The data used to update StaffAttendances.
   */
  data: Prisma.XOR<Prisma.StaffAttendanceUpdateManyMutationInput, Prisma.StaffAttendanceUncheckedUpdateManyInput>
  /**
   * Filter which StaffAttendances to update
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * Limit how many StaffAttendances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StaffAttendance upsert
 */
export type StaffAttendanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * The filter to search for the StaffAttendance to update in case it exists.
   */
  where: Prisma.StaffAttendanceWhereUniqueInput
  /**
   * In case the StaffAttendance found by the `where` argument doesn't exist, create a new StaffAttendance with this data.
   */
  create: Prisma.XOR<Prisma.StaffAttendanceCreateInput, Prisma.StaffAttendanceUncheckedCreateInput>
  /**
   * In case the StaffAttendance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StaffAttendanceUpdateInput, Prisma.StaffAttendanceUncheckedUpdateInput>
}

/**
 * StaffAttendance delete
 */
export type StaffAttendanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
  /**
   * Filter which StaffAttendance to delete.
   */
  where: Prisma.StaffAttendanceWhereUniqueInput
}

/**
 * StaffAttendance deleteMany
 */
export type StaffAttendanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffAttendances to delete
   */
  where?: Prisma.StaffAttendanceWhereInput
  /**
   * Limit how many StaffAttendances to delete.
   */
  limit?: number
}

/**
 * StaffAttendance without action
 */
export type StaffAttendanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffAttendance
   */
  select?: Prisma.StaffAttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffAttendance
   */
  omit?: Prisma.StaffAttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffAttendanceInclude<ExtArgs> | null
}
