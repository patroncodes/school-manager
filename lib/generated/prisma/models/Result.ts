
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Result` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Result
 * 
 */
export type ResultModel = runtime.Types.Result.DefaultSelection<Prisma.$ResultPayload>

export type AggregateResult = {
  _count: ResultCountAggregateOutputType | null
  _avg: ResultAvgAggregateOutputType | null
  _sum: ResultSumAggregateOutputType | null
  _min: ResultMinAggregateOutputType | null
  _max: ResultMaxAggregateOutputType | null
}

export type ResultAvgAggregateOutputType = {
  score: number | null
}

export type ResultSumAggregateOutputType = {
  score: number | null
}

export type ResultMinAggregateOutputType = {
  id: string | null
  score: number | null
  grade: string | null
  remarks: string | null
  uploadedAt: Date | null
  schoolId: string | null
  studentId: string | null
  examId: string | null
  assignmentId: string | null
  updatedAt: Date | null
}

export type ResultMaxAggregateOutputType = {
  id: string | null
  score: number | null
  grade: string | null
  remarks: string | null
  uploadedAt: Date | null
  schoolId: string | null
  studentId: string | null
  examId: string | null
  assignmentId: string | null
  updatedAt: Date | null
}

export type ResultCountAggregateOutputType = {
  id: number
  score: number
  grade: number
  remarks: number
  uploadedAt: number
  schoolId: number
  studentId: number
  examId: number
  assignmentId: number
  updatedAt: number
  _all: number
}


export type ResultAvgAggregateInputType = {
  score?: true
}

export type ResultSumAggregateInputType = {
  score?: true
}

export type ResultMinAggregateInputType = {
  id?: true
  score?: true
  grade?: true
  remarks?: true
  uploadedAt?: true
  schoolId?: true
  studentId?: true
  examId?: true
  assignmentId?: true
  updatedAt?: true
}

export type ResultMaxAggregateInputType = {
  id?: true
  score?: true
  grade?: true
  remarks?: true
  uploadedAt?: true
  schoolId?: true
  studentId?: true
  examId?: true
  assignmentId?: true
  updatedAt?: true
}

export type ResultCountAggregateInputType = {
  id?: true
  score?: true
  grade?: true
  remarks?: true
  uploadedAt?: true
  schoolId?: true
  studentId?: true
  examId?: true
  assignmentId?: true
  updatedAt?: true
  _all?: true
}

export type ResultAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Result to aggregate.
   */
  where?: Prisma.ResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Results to fetch.
   */
  orderBy?: Prisma.ResultOrderByWithRelationInput | Prisma.ResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Results
  **/
  _count?: true | ResultCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ResultAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ResultSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ResultMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ResultMaxAggregateInputType
}

export type GetResultAggregateType<T extends ResultAggregateArgs> = {
      [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResult[P]>
    : Prisma.GetScalarType<T[P], AggregateResult[P]>
}




export type ResultGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResultWhereInput
  orderBy?: Prisma.ResultOrderByWithAggregationInput | Prisma.ResultOrderByWithAggregationInput[]
  by: Prisma.ResultScalarFieldEnum[] | Prisma.ResultScalarFieldEnum
  having?: Prisma.ResultScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ResultCountAggregateInputType | true
  _avg?: ResultAvgAggregateInputType
  _sum?: ResultSumAggregateInputType
  _min?: ResultMinAggregateInputType
  _max?: ResultMaxAggregateInputType
}

export type ResultGroupByOutputType = {
  id: string
  score: number
  grade: string | null
  remarks: string | null
  uploadedAt: Date
  schoolId: string
  studentId: string
  examId: string | null
  assignmentId: string | null
  updatedAt: Date
  _count: ResultCountAggregateOutputType | null
  _avg: ResultAvgAggregateOutputType | null
  _sum: ResultSumAggregateOutputType | null
  _min: ResultMinAggregateOutputType | null
  _max: ResultMaxAggregateOutputType | null
}

type GetResultGroupByPayload<T extends ResultGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResultGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResultGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResultGroupByOutputType[P]>
      }
    >
  >



export type ResultWhereInput = {
  AND?: Prisma.ResultWhereInput | Prisma.ResultWhereInput[]
  OR?: Prisma.ResultWhereInput[]
  NOT?: Prisma.ResultWhereInput | Prisma.ResultWhereInput[]
  id?: Prisma.StringFilter<"Result"> | string
  score?: Prisma.FloatFilter<"Result"> | number
  grade?: Prisma.StringNullableFilter<"Result"> | string | null
  remarks?: Prisma.StringNullableFilter<"Result"> | string | null
  uploadedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
  schoolId?: Prisma.StringFilter<"Result"> | string
  studentId?: Prisma.StringFilter<"Result"> | string
  examId?: Prisma.StringNullableFilter<"Result"> | string | null
  assignmentId?: Prisma.StringNullableFilter<"Result"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamNullableScalarRelationFilter, Prisma.ExamWhereInput> | null
  assignment?: Prisma.XOR<Prisma.AssignmentNullableScalarRelationFilter, Prisma.AssignmentWhereInput> | null
}

export type ResultOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  grade?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrderInput | Prisma.SortOrder
  assignmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  student?: Prisma.StudentOrderByWithRelationInput
  exam?: Prisma.ExamOrderByWithRelationInput
  assignment?: Prisma.AssignmentOrderByWithRelationInput
}

export type ResultWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  studentId_examId?: Prisma.ResultStudentIdExamIdCompoundUniqueInput
  studentId_assignmentId?: Prisma.ResultStudentIdAssignmentIdCompoundUniqueInput
  AND?: Prisma.ResultWhereInput | Prisma.ResultWhereInput[]
  OR?: Prisma.ResultWhereInput[]
  NOT?: Prisma.ResultWhereInput | Prisma.ResultWhereInput[]
  score?: Prisma.FloatFilter<"Result"> | number
  grade?: Prisma.StringNullableFilter<"Result"> | string | null
  remarks?: Prisma.StringNullableFilter<"Result"> | string | null
  uploadedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
  schoolId?: Prisma.StringFilter<"Result"> | string
  studentId?: Prisma.StringFilter<"Result"> | string
  examId?: Prisma.StringNullableFilter<"Result"> | string | null
  assignmentId?: Prisma.StringNullableFilter<"Result"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  exam?: Prisma.XOR<Prisma.ExamNullableScalarRelationFilter, Prisma.ExamWhereInput> | null
  assignment?: Prisma.XOR<Prisma.AssignmentNullableScalarRelationFilter, Prisma.AssignmentWhereInput> | null
}, "id" | "studentId_examId" | "studentId_assignmentId">

export type ResultOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  grade?: Prisma.SortOrderInput | Prisma.SortOrder
  remarks?: Prisma.SortOrderInput | Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrderInput | Prisma.SortOrder
  assignmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ResultCountOrderByAggregateInput
  _avg?: Prisma.ResultAvgOrderByAggregateInput
  _max?: Prisma.ResultMaxOrderByAggregateInput
  _min?: Prisma.ResultMinOrderByAggregateInput
  _sum?: Prisma.ResultSumOrderByAggregateInput
}

export type ResultScalarWhereWithAggregatesInput = {
  AND?: Prisma.ResultScalarWhereWithAggregatesInput | Prisma.ResultScalarWhereWithAggregatesInput[]
  OR?: Prisma.ResultScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ResultScalarWhereWithAggregatesInput | Prisma.ResultScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Result"> | string
  score?: Prisma.FloatWithAggregatesFilter<"Result"> | number
  grade?: Prisma.StringNullableWithAggregatesFilter<"Result"> | string | null
  remarks?: Prisma.StringNullableWithAggregatesFilter<"Result"> | string | null
  uploadedAt?: Prisma.DateTimeWithAggregatesFilter<"Result"> | Date | string
  schoolId?: Prisma.StringWithAggregatesFilter<"Result"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"Result"> | string
  examId?: Prisma.StringNullableWithAggregatesFilter<"Result"> | string | null
  assignmentId?: Prisma.StringNullableWithAggregatesFilter<"Result"> | string | null
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Result"> | Date | string
}

export type ResultCreateInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutResultsInput
  student: Prisma.StudentCreateNestedOneWithoutResultsInput
  exam?: Prisma.ExamCreateNestedOneWithoutResultsInput
  assignment?: Prisma.AssignmentCreateNestedOneWithoutResultsInput
}

export type ResultUncheckedCreateInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutResultsNestedInput
  student?: Prisma.StudentUpdateOneRequiredWithoutResultsNestedInput
  exam?: Prisma.ExamUpdateOneWithoutResultsNestedInput
  assignment?: Prisma.AssignmentUpdateOneWithoutResultsNestedInput
}

export type ResultUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultCreateManyInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultListRelationFilter = {
  every?: Prisma.ResultWhereInput
  some?: Prisma.ResultWhereInput
  none?: Prisma.ResultWhereInput
}

export type ResultOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ResultStudentIdExamIdCompoundUniqueInput = {
  studentId: string
  examId: string
}

export type ResultStudentIdAssignmentIdCompoundUniqueInput = {
  studentId: string
  assignmentId: string
}

export type ResultCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  assignmentId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResultAvgOrderByAggregateInput = {
  score?: Prisma.SortOrder
}

export type ResultMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  assignmentId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResultMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  grade?: Prisma.SortOrder
  remarks?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  examId?: Prisma.SortOrder
  assignmentId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResultSumOrderByAggregateInput = {
  score?: Prisma.SortOrder
}

export type ResultCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput> | Prisma.ResultCreateWithoutSchoolInput[] | Prisma.ResultUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutSchoolInput | Prisma.ResultCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ResultCreateManySchoolInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput> | Prisma.ResultCreateWithoutSchoolInput[] | Prisma.ResultUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutSchoolInput | Prisma.ResultCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ResultCreateManySchoolInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput> | Prisma.ResultCreateWithoutSchoolInput[] | Prisma.ResultUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutSchoolInput | Prisma.ResultCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ResultUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ResultCreateManySchoolInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ResultUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutSchoolInput | Prisma.ResultUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput> | Prisma.ResultCreateWithoutSchoolInput[] | Prisma.ResultUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutSchoolInput | Prisma.ResultCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ResultUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ResultCreateManySchoolInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ResultUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutSchoolInput | Prisma.ResultUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput> | Prisma.ResultCreateWithoutStudentInput[] | Prisma.ResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutStudentInput | Prisma.ResultCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ResultCreateManyStudentInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput> | Prisma.ResultCreateWithoutStudentInput[] | Prisma.ResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutStudentInput | Prisma.ResultCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.ResultCreateManyStudentInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput> | Prisma.ResultCreateWithoutStudentInput[] | Prisma.ResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutStudentInput | Prisma.ResultCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutStudentInput | Prisma.ResultUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ResultCreateManyStudentInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutStudentInput | Prisma.ResultUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutStudentInput | Prisma.ResultUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput> | Prisma.ResultCreateWithoutStudentInput[] | Prisma.ResultUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutStudentInput | Prisma.ResultCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutStudentInput | Prisma.ResultUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.ResultCreateManyStudentInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutStudentInput | Prisma.ResultUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutStudentInput | Prisma.ResultUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput> | Prisma.ResultCreateWithoutExamInput[] | Prisma.ResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutExamInput | Prisma.ResultCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ResultCreateManyExamInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUncheckedCreateNestedManyWithoutExamInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput> | Prisma.ResultCreateWithoutExamInput[] | Prisma.ResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutExamInput | Prisma.ResultCreateOrConnectWithoutExamInput[]
  createMany?: Prisma.ResultCreateManyExamInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput> | Prisma.ResultCreateWithoutExamInput[] | Prisma.ResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutExamInput | Prisma.ResultCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutExamInput | Prisma.ResultUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ResultCreateManyExamInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutExamInput | Prisma.ResultUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutExamInput | Prisma.ResultUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultUncheckedUpdateManyWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput> | Prisma.ResultCreateWithoutExamInput[] | Prisma.ResultUncheckedCreateWithoutExamInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutExamInput | Prisma.ResultCreateOrConnectWithoutExamInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutExamInput | Prisma.ResultUpsertWithWhereUniqueWithoutExamInput[]
  createMany?: Prisma.ResultCreateManyExamInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutExamInput | Prisma.ResultUpdateWithWhereUniqueWithoutExamInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutExamInput | Prisma.ResultUpdateManyWithWhereWithoutExamInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultCreateNestedManyWithoutAssignmentInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput> | Prisma.ResultCreateWithoutAssignmentInput[] | Prisma.ResultUncheckedCreateWithoutAssignmentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutAssignmentInput | Prisma.ResultCreateOrConnectWithoutAssignmentInput[]
  createMany?: Prisma.ResultCreateManyAssignmentInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUncheckedCreateNestedManyWithoutAssignmentInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput> | Prisma.ResultCreateWithoutAssignmentInput[] | Prisma.ResultUncheckedCreateWithoutAssignmentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutAssignmentInput | Prisma.ResultCreateOrConnectWithoutAssignmentInput[]
  createMany?: Prisma.ResultCreateManyAssignmentInputEnvelope
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
}

export type ResultUpdateManyWithoutAssignmentNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput> | Prisma.ResultCreateWithoutAssignmentInput[] | Prisma.ResultUncheckedCreateWithoutAssignmentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutAssignmentInput | Prisma.ResultCreateOrConnectWithoutAssignmentInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutAssignmentInput | Prisma.ResultUpsertWithWhereUniqueWithoutAssignmentInput[]
  createMany?: Prisma.ResultCreateManyAssignmentInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutAssignmentInput | Prisma.ResultUpdateWithWhereUniqueWithoutAssignmentInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutAssignmentInput | Prisma.ResultUpdateManyWithWhereWithoutAssignmentInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type ResultUncheckedUpdateManyWithoutAssignmentNestedInput = {
  create?: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput> | Prisma.ResultCreateWithoutAssignmentInput[] | Prisma.ResultUncheckedCreateWithoutAssignmentInput[]
  connectOrCreate?: Prisma.ResultCreateOrConnectWithoutAssignmentInput | Prisma.ResultCreateOrConnectWithoutAssignmentInput[]
  upsert?: Prisma.ResultUpsertWithWhereUniqueWithoutAssignmentInput | Prisma.ResultUpsertWithWhereUniqueWithoutAssignmentInput[]
  createMany?: Prisma.ResultCreateManyAssignmentInputEnvelope
  set?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  disconnect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  delete?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  connect?: Prisma.ResultWhereUniqueInput | Prisma.ResultWhereUniqueInput[]
  update?: Prisma.ResultUpdateWithWhereUniqueWithoutAssignmentInput | Prisma.ResultUpdateWithWhereUniqueWithoutAssignmentInput[]
  updateMany?: Prisma.ResultUpdateManyWithWhereWithoutAssignmentInput | Prisma.ResultUpdateManyWithWhereWithoutAssignmentInput[]
  deleteMany?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ResultCreateWithoutSchoolInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutResultsInput
  exam?: Prisma.ExamCreateNestedOneWithoutResultsInput
  assignment?: Prisma.AssignmentCreateNestedOneWithoutResultsInput
}

export type ResultUncheckedCreateWithoutSchoolInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  studentId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput>
}

export type ResultCreateManySchoolInputEnvelope = {
  data: Prisma.ResultCreateManySchoolInput | Prisma.ResultCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type ResultUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ResultUpdateWithoutSchoolInput, Prisma.ResultUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.ResultCreateWithoutSchoolInput, Prisma.ResultUncheckedCreateWithoutSchoolInput>
}

export type ResultUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ResultUpdateWithoutSchoolInput, Prisma.ResultUncheckedUpdateWithoutSchoolInput>
}

export type ResultUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ResultScalarWhereInput
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyWithoutSchoolInput>
}

export type ResultScalarWhereInput = {
  AND?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
  OR?: Prisma.ResultScalarWhereInput[]
  NOT?: Prisma.ResultScalarWhereInput | Prisma.ResultScalarWhereInput[]
  id?: Prisma.StringFilter<"Result"> | string
  score?: Prisma.FloatFilter<"Result"> | number
  grade?: Prisma.StringNullableFilter<"Result"> | string | null
  remarks?: Prisma.StringNullableFilter<"Result"> | string | null
  uploadedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
  schoolId?: Prisma.StringFilter<"Result"> | string
  studentId?: Prisma.StringFilter<"Result"> | string
  examId?: Prisma.StringNullableFilter<"Result"> | string | null
  assignmentId?: Prisma.StringNullableFilter<"Result"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"Result"> | Date | string
}

export type ResultCreateWithoutStudentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutResultsInput
  exam?: Prisma.ExamCreateNestedOneWithoutResultsInput
  assignment?: Prisma.AssignmentCreateNestedOneWithoutResultsInput
}

export type ResultUncheckedCreateWithoutStudentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultCreateOrConnectWithoutStudentInput = {
  where: Prisma.ResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput>
}

export type ResultCreateManyStudentInputEnvelope = {
  data: Prisma.ResultCreateManyStudentInput | Prisma.ResultCreateManyStudentInput[]
  skipDuplicates?: boolean
}

export type ResultUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ResultUpdateWithoutStudentInput, Prisma.ResultUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.ResultCreateWithoutStudentInput, Prisma.ResultUncheckedCreateWithoutStudentInput>
}

export type ResultUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.ResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ResultUpdateWithoutStudentInput, Prisma.ResultUncheckedUpdateWithoutStudentInput>
}

export type ResultUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.ResultScalarWhereInput
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyWithoutStudentInput>
}

export type ResultCreateWithoutExamInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutResultsInput
  student: Prisma.StudentCreateNestedOneWithoutResultsInput
  assignment?: Prisma.AssignmentCreateNestedOneWithoutResultsInput
}

export type ResultUncheckedCreateWithoutExamInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultCreateOrConnectWithoutExamInput = {
  where: Prisma.ResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput>
}

export type ResultCreateManyExamInputEnvelope = {
  data: Prisma.ResultCreateManyExamInput | Prisma.ResultCreateManyExamInput[]
  skipDuplicates?: boolean
}

export type ResultUpsertWithWhereUniqueWithoutExamInput = {
  where: Prisma.ResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ResultUpdateWithoutExamInput, Prisma.ResultUncheckedUpdateWithoutExamInput>
  create: Prisma.XOR<Prisma.ResultCreateWithoutExamInput, Prisma.ResultUncheckedCreateWithoutExamInput>
}

export type ResultUpdateWithWhereUniqueWithoutExamInput = {
  where: Prisma.ResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ResultUpdateWithoutExamInput, Prisma.ResultUncheckedUpdateWithoutExamInput>
}

export type ResultUpdateManyWithWhereWithoutExamInput = {
  where: Prisma.ResultScalarWhereInput
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyWithoutExamInput>
}

export type ResultCreateWithoutAssignmentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutResultsInput
  student: Prisma.StudentCreateNestedOneWithoutResultsInput
  exam?: Prisma.ExamCreateNestedOneWithoutResultsInput
}

export type ResultUncheckedCreateWithoutAssignmentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  examId?: string | null
  updatedAt?: Date | string
}

export type ResultCreateOrConnectWithoutAssignmentInput = {
  where: Prisma.ResultWhereUniqueInput
  create: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput>
}

export type ResultCreateManyAssignmentInputEnvelope = {
  data: Prisma.ResultCreateManyAssignmentInput | Prisma.ResultCreateManyAssignmentInput[]
  skipDuplicates?: boolean
}

export type ResultUpsertWithWhereUniqueWithoutAssignmentInput = {
  where: Prisma.ResultWhereUniqueInput
  update: Prisma.XOR<Prisma.ResultUpdateWithoutAssignmentInput, Prisma.ResultUncheckedUpdateWithoutAssignmentInput>
  create: Prisma.XOR<Prisma.ResultCreateWithoutAssignmentInput, Prisma.ResultUncheckedCreateWithoutAssignmentInput>
}

export type ResultUpdateWithWhereUniqueWithoutAssignmentInput = {
  where: Prisma.ResultWhereUniqueInput
  data: Prisma.XOR<Prisma.ResultUpdateWithoutAssignmentInput, Prisma.ResultUncheckedUpdateWithoutAssignmentInput>
}

export type ResultUpdateManyWithWhereWithoutAssignmentInput = {
  where: Prisma.ResultScalarWhereInput
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyWithoutAssignmentInput>
}

export type ResultCreateManySchoolInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  studentId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutResultsNestedInput
  exam?: Prisma.ExamUpdateOneWithoutResultsNestedInput
  assignment?: Prisma.AssignmentUpdateOneWithoutResultsNestedInput
}

export type ResultUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultCreateManyStudentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  examId?: string | null
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutResultsNestedInput
  exam?: Prisma.ExamUpdateOneWithoutResultsNestedInput
  assignment?: Prisma.AssignmentUpdateOneWithoutResultsNestedInput
}

export type ResultUncheckedUpdateWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultUncheckedUpdateManyWithoutStudentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultCreateManyExamInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  assignmentId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutResultsNestedInput
  student?: Prisma.StudentUpdateOneRequiredWithoutResultsNestedInput
  assignment?: Prisma.AssignmentUpdateOneWithoutResultsNestedInput
}

export type ResultUncheckedUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultUncheckedUpdateManyWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  assignmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultCreateManyAssignmentInput = {
  id?: string
  score: number
  grade?: string | null
  remarks?: string | null
  uploadedAt?: Date | string
  schoolId: string
  studentId: string
  examId?: string | null
  updatedAt?: Date | string
}

export type ResultUpdateWithoutAssignmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutResultsNestedInput
  student?: Prisma.StudentUpdateOneRequiredWithoutResultsNestedInput
  exam?: Prisma.ExamUpdateOneWithoutResultsNestedInput
}

export type ResultUncheckedUpdateWithoutAssignmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResultUncheckedUpdateManyWithoutAssignmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  examId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ResultSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  grade?: boolean
  remarks?: boolean
  uploadedAt?: boolean
  schoolId?: boolean
  studentId?: boolean
  examId?: boolean
  assignmentId?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}, ExtArgs["result"]["result"]>

export type ResultSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  grade?: boolean
  remarks?: boolean
  uploadedAt?: boolean
  schoolId?: boolean
  studentId?: boolean
  examId?: boolean
  assignmentId?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}, ExtArgs["result"]["result"]>

export type ResultSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  grade?: boolean
  remarks?: boolean
  uploadedAt?: boolean
  schoolId?: boolean
  studentId?: boolean
  examId?: boolean
  assignmentId?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}, ExtArgs["result"]["result"]>

export type ResultSelectScalar = {
  id?: boolean
  score?: boolean
  grade?: boolean
  remarks?: boolean
  uploadedAt?: boolean
  schoolId?: boolean
  studentId?: boolean
  examId?: boolean
  assignmentId?: boolean
  updatedAt?: boolean
}

export type ResultOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "score" | "grade" | "remarks" | "uploadedAt" | "schoolId" | "studentId" | "examId" | "assignmentId" | "updatedAt", ExtArgs["result"]["result"]>
export type ResultInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}
export type ResultIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}
export type ResultIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  exam?: boolean | Prisma.Result$examArgs<ExtArgs>
  assignment?: boolean | Prisma.Result$assignmentArgs<ExtArgs>
}

export type $ResultPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Result"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    student: Prisma.$StudentPayload<ExtArgs>
    exam: Prisma.$ExamPayload<ExtArgs> | null
    assignment: Prisma.$AssignmentPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    score: number
    grade: string | null
    remarks: string | null
    uploadedAt: Date
    schoolId: string
    studentId: string
    examId: string | null
    assignmentId: string | null
    updatedAt: Date
  }, ExtArgs["result"]["result"]>
  composites: {}
}

export type ResultGetPayload<S extends boolean | null | undefined | ResultDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ResultPayload, S>

export type ResultCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ResultCountAggregateInputType | true
  }

export interface ResultDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Result'], meta: { name: 'Result' } }
  /**
   * Find zero or one Result that matches the filter.
   * @param {ResultFindUniqueArgs} args - Arguments to find a Result
   * @example
   * // Get one Result
   * const result = await prisma.result.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResultFindUniqueArgs>(args: Prisma.SelectSubset<T, ResultFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Result that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResultFindUniqueOrThrowArgs} args - Arguments to find a Result
   * @example
   * // Get one Result
   * const result = await prisma.result.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResultFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Result that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultFindFirstArgs} args - Arguments to find a Result
   * @example
   * // Get one Result
   * const result = await prisma.result.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResultFindFirstArgs>(args?: Prisma.SelectSubset<T, ResultFindFirstArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Result that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultFindFirstOrThrowArgs} args - Arguments to find a Result
   * @example
   * // Get one Result
   * const result = await prisma.result.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResultFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ResultFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Results that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Results
   * const results = await prisma.result.findMany()
   * 
   * // Get first 10 Results
   * const results = await prisma.result.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const resultWithIdOnly = await prisma.result.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ResultFindManyArgs>(args?: Prisma.SelectSubset<T, ResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Result.
   * @param {ResultCreateArgs} args - Arguments to create a Result.
   * @example
   * // Create one Result
   * const Result = await prisma.result.create({
   *   data: {
   *     // ... data to create a Result
   *   }
   * })
   * 
   */
  create<T extends ResultCreateArgs>(args: Prisma.SelectSubset<T, ResultCreateArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Results.
   * @param {ResultCreateManyArgs} args - Arguments to create many Results.
   * @example
   * // Create many Results
   * const result = await prisma.result.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ResultCreateManyArgs>(args?: Prisma.SelectSubset<T, ResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Results and returns the data saved in the database.
   * @param {ResultCreateManyAndReturnArgs} args - Arguments to create many Results.
   * @example
   * // Create many Results
   * const result = await prisma.result.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Results and only return the `id`
   * const resultWithIdOnly = await prisma.result.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ResultCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Result.
   * @param {ResultDeleteArgs} args - Arguments to delete one Result.
   * @example
   * // Delete one Result
   * const Result = await prisma.result.delete({
   *   where: {
   *     // ... filter to delete one Result
   *   }
   * })
   * 
   */
  delete<T extends ResultDeleteArgs>(args: Prisma.SelectSubset<T, ResultDeleteArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Result.
   * @param {ResultUpdateArgs} args - Arguments to update one Result.
   * @example
   * // Update one Result
   * const result = await prisma.result.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ResultUpdateArgs>(args: Prisma.SelectSubset<T, ResultUpdateArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Results.
   * @param {ResultDeleteManyArgs} args - Arguments to filter Results to delete.
   * @example
   * // Delete a few Results
   * const { count } = await prisma.result.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ResultDeleteManyArgs>(args?: Prisma.SelectSubset<T, ResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Results
   * const result = await prisma.result.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ResultUpdateManyArgs>(args: Prisma.SelectSubset<T, ResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Results and returns the data updated in the database.
   * @param {ResultUpdateManyAndReturnArgs} args - Arguments to update many Results.
   * @example
   * // Update many Results
   * const result = await prisma.result.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Results and only return the `id`
   * const resultWithIdOnly = await prisma.result.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ResultUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Result.
   * @param {ResultUpsertArgs} args - Arguments to update or create a Result.
   * @example
   * // Update or create a Result
   * const result = await prisma.result.upsert({
   *   create: {
   *     // ... data to create a Result
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Result we want to update
   *   }
   * })
   */
  upsert<T extends ResultUpsertArgs>(args: Prisma.SelectSubset<T, ResultUpsertArgs<ExtArgs>>): Prisma.Prisma__ResultClient<runtime.Types.Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Results.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultCountArgs} args - Arguments to filter Results to count.
   * @example
   * // Count the number of Results
   * const count = await prisma.result.count({
   *   where: {
   *     // ... the filter for the Results we want to count
   *   }
   * })
  **/
  count<T extends ResultCountArgs>(
    args?: Prisma.Subset<T, ResultCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResultCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Result.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ResultAggregateArgs>(args: Prisma.Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

  /**
   * Group by Result.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResultGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ResultGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResultGroupByArgs['orderBy'] }
      : { orderBy?: ResultGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Result model
 */
readonly fields: ResultFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Result.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResultClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  exam<T extends Prisma.Result$examArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Result$examArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  assignment<T extends Prisma.Result$assignmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Result$assignmentArgs<ExtArgs>>): Prisma.Prisma__AssignmentClient<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Result model
 */
export interface ResultFieldRefs {
  readonly id: Prisma.FieldRef<"Result", 'String'>
  readonly score: Prisma.FieldRef<"Result", 'Float'>
  readonly grade: Prisma.FieldRef<"Result", 'String'>
  readonly remarks: Prisma.FieldRef<"Result", 'String'>
  readonly uploadedAt: Prisma.FieldRef<"Result", 'DateTime'>
  readonly schoolId: Prisma.FieldRef<"Result", 'String'>
  readonly studentId: Prisma.FieldRef<"Result", 'String'>
  readonly examId: Prisma.FieldRef<"Result", 'String'>
  readonly assignmentId: Prisma.FieldRef<"Result", 'String'>
  readonly updatedAt: Prisma.FieldRef<"Result", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Result findUnique
 */
export type ResultFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter, which Result to fetch.
   */
  where: Prisma.ResultWhereUniqueInput
}

/**
 * Result findUniqueOrThrow
 */
export type ResultFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter, which Result to fetch.
   */
  where: Prisma.ResultWhereUniqueInput
}

/**
 * Result findFirst
 */
export type ResultFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter, which Result to fetch.
   */
  where?: Prisma.ResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Results to fetch.
   */
  orderBy?: Prisma.ResultOrderByWithRelationInput | Prisma.ResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Results.
   */
  cursor?: Prisma.ResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Results.
   */
  distinct?: Prisma.ResultScalarFieldEnum | Prisma.ResultScalarFieldEnum[]
}

/**
 * Result findFirstOrThrow
 */
export type ResultFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter, which Result to fetch.
   */
  where?: Prisma.ResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Results to fetch.
   */
  orderBy?: Prisma.ResultOrderByWithRelationInput | Prisma.ResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Results.
   */
  cursor?: Prisma.ResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Results.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Results.
   */
  distinct?: Prisma.ResultScalarFieldEnum | Prisma.ResultScalarFieldEnum[]
}

/**
 * Result findMany
 */
export type ResultFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter, which Results to fetch.
   */
  where?: Prisma.ResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Results to fetch.
   */
  orderBy?: Prisma.ResultOrderByWithRelationInput | Prisma.ResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Results.
   */
  cursor?: Prisma.ResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Results from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Results.
   */
  skip?: number
  distinct?: Prisma.ResultScalarFieldEnum | Prisma.ResultScalarFieldEnum[]
}

/**
 * Result create
 */
export type ResultCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * The data needed to create a Result.
   */
  data: Prisma.XOR<Prisma.ResultCreateInput, Prisma.ResultUncheckedCreateInput>
}

/**
 * Result createMany
 */
export type ResultCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Results.
   */
  data: Prisma.ResultCreateManyInput | Prisma.ResultCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Result createManyAndReturn
 */
export type ResultCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * The data used to create many Results.
   */
  data: Prisma.ResultCreateManyInput | Prisma.ResultCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Result update
 */
export type ResultUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * The data needed to update a Result.
   */
  data: Prisma.XOR<Prisma.ResultUpdateInput, Prisma.ResultUncheckedUpdateInput>
  /**
   * Choose, which Result to update.
   */
  where: Prisma.ResultWhereUniqueInput
}

/**
 * Result updateMany
 */
export type ResultUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Results.
   */
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyInput>
  /**
   * Filter which Results to update
   */
  where?: Prisma.ResultWhereInput
  /**
   * Limit how many Results to update.
   */
  limit?: number
}

/**
 * Result updateManyAndReturn
 */
export type ResultUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * The data used to update Results.
   */
  data: Prisma.XOR<Prisma.ResultUpdateManyMutationInput, Prisma.ResultUncheckedUpdateManyInput>
  /**
   * Filter which Results to update
   */
  where?: Prisma.ResultWhereInput
  /**
   * Limit how many Results to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Result upsert
 */
export type ResultUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * The filter to search for the Result to update in case it exists.
   */
  where: Prisma.ResultWhereUniqueInput
  /**
   * In case the Result found by the `where` argument doesn't exist, create a new Result with this data.
   */
  create: Prisma.XOR<Prisma.ResultCreateInput, Prisma.ResultUncheckedCreateInput>
  /**
   * In case the Result was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ResultUpdateInput, Prisma.ResultUncheckedUpdateInput>
}

/**
 * Result delete
 */
export type ResultDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
  /**
   * Filter which Result to delete.
   */
  where: Prisma.ResultWhereUniqueInput
}

/**
 * Result deleteMany
 */
export type ResultDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Results to delete
   */
  where?: Prisma.ResultWhereInput
  /**
   * Limit how many Results to delete.
   */
  limit?: number
}

/**
 * Result.exam
 */
export type Result$examArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
}

/**
 * Result.assignment
 */
export type Result$assignmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  where?: Prisma.AssignmentWhereInput
}

/**
 * Result without action
 */
export type ResultDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Result
   */
  select?: Prisma.ResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Result
   */
  omit?: Prisma.ResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResultInclude<ExtArgs> | null
}
