
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Manager` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Manager
 * 
 */
export type ManagerModel = runtime.Types.Result.DefaultSelection<Prisma.$ManagerPayload>

export type AggregateManager = {
  _count: ManagerCountAggregateOutputType | null
  _min: ManagerMinAggregateOutputType | null
  _max: ManagerMaxAggregateOutputType | null
}

export type ManagerMinAggregateOutputType = {
  id: string | null
  clerkUserId: string | null
  username: string | null
  name: string | null
  surname: string | null
  email: string | null
  phone: string | null
  img: string | null
  birthday: Date | null
  schoolId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ManagerMaxAggregateOutputType = {
  id: string | null
  clerkUserId: string | null
  username: string | null
  name: string | null
  surname: string | null
  email: string | null
  phone: string | null
  img: string | null
  birthday: Date | null
  schoolId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ManagerCountAggregateOutputType = {
  id: number
  clerkUserId: number
  username: number
  name: number
  surname: number
  email: number
  phone: number
  img: number
  birthday: number
  schoolId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ManagerMinAggregateInputType = {
  id?: true
  clerkUserId?: true
  username?: true
  name?: true
  surname?: true
  email?: true
  phone?: true
  img?: true
  birthday?: true
  schoolId?: true
  createdAt?: true
  updatedAt?: true
}

export type ManagerMaxAggregateInputType = {
  id?: true
  clerkUserId?: true
  username?: true
  name?: true
  surname?: true
  email?: true
  phone?: true
  img?: true
  birthday?: true
  schoolId?: true
  createdAt?: true
  updatedAt?: true
}

export type ManagerCountAggregateInputType = {
  id?: true
  clerkUserId?: true
  username?: true
  name?: true
  surname?: true
  email?: true
  phone?: true
  img?: true
  birthday?: true
  schoolId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ManagerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Manager to aggregate.
   */
  where?: Prisma.ManagerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managers to fetch.
   */
  orderBy?: Prisma.ManagerOrderByWithRelationInput | Prisma.ManagerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ManagerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Managers
  **/
  _count?: true | ManagerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ManagerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ManagerMaxAggregateInputType
}

export type GetManagerAggregateType<T extends ManagerAggregateArgs> = {
      [P in keyof T & keyof AggregateManager]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManager[P]>
    : Prisma.GetScalarType<T[P], AggregateManager[P]>
}




export type ManagerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ManagerWhereInput
  orderBy?: Prisma.ManagerOrderByWithAggregationInput | Prisma.ManagerOrderByWithAggregationInput[]
  by: Prisma.ManagerScalarFieldEnum[] | Prisma.ManagerScalarFieldEnum
  having?: Prisma.ManagerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ManagerCountAggregateInputType | true
  _min?: ManagerMinAggregateInputType
  _max?: ManagerMaxAggregateInputType
}

export type ManagerGroupByOutputType = {
  id: string
  clerkUserId: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img: string | null
  birthday: Date
  schoolId: string
  createdAt: Date
  updatedAt: Date
  _count: ManagerCountAggregateOutputType | null
  _min: ManagerMinAggregateOutputType | null
  _max: ManagerMaxAggregateOutputType | null
}

type GetManagerGroupByPayload<T extends ManagerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ManagerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ManagerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ManagerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ManagerGroupByOutputType[P]>
      }
    >
  >



export type ManagerWhereInput = {
  AND?: Prisma.ManagerWhereInput | Prisma.ManagerWhereInput[]
  OR?: Prisma.ManagerWhereInput[]
  NOT?: Prisma.ManagerWhereInput | Prisma.ManagerWhereInput[]
  id?: Prisma.StringFilter<"Manager"> | string
  clerkUserId?: Prisma.StringNullableFilter<"Manager"> | string | null
  username?: Prisma.StringFilter<"Manager"> | string
  name?: Prisma.StringFilter<"Manager"> | string
  surname?: Prisma.StringFilter<"Manager"> | string
  email?: Prisma.StringFilter<"Manager"> | string
  phone?: Prisma.StringFilter<"Manager"> | string
  img?: Prisma.StringNullableFilter<"Manager"> | string | null
  birthday?: Prisma.DateTimeFilter<"Manager"> | Date | string
  schoolId?: Prisma.StringFilter<"Manager"> | string
  createdAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
}

export type ManagerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clerkUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  username?: Prisma.SortOrder
  name?: Prisma.SortOrder
  surname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  img?: Prisma.SortOrderInput | Prisma.SortOrder
  birthday?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
}

export type ManagerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  clerkUserId?: string
  username?: string
  schoolId_email?: Prisma.ManagerSchoolIdEmailCompoundUniqueInput
  schoolId_phone?: Prisma.ManagerSchoolIdPhoneCompoundUniqueInput
  AND?: Prisma.ManagerWhereInput | Prisma.ManagerWhereInput[]
  OR?: Prisma.ManagerWhereInput[]
  NOT?: Prisma.ManagerWhereInput | Prisma.ManagerWhereInput[]
  name?: Prisma.StringFilter<"Manager"> | string
  surname?: Prisma.StringFilter<"Manager"> | string
  email?: Prisma.StringFilter<"Manager"> | string
  phone?: Prisma.StringFilter<"Manager"> | string
  img?: Prisma.StringNullableFilter<"Manager"> | string | null
  birthday?: Prisma.DateTimeFilter<"Manager"> | Date | string
  schoolId?: Prisma.StringFilter<"Manager"> | string
  createdAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
}, "id" | "clerkUserId" | "username" | "schoolId_email" | "schoolId_phone">

export type ManagerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clerkUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  username?: Prisma.SortOrder
  name?: Prisma.SortOrder
  surname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  img?: Prisma.SortOrderInput | Prisma.SortOrder
  birthday?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ManagerCountOrderByAggregateInput
  _max?: Prisma.ManagerMaxOrderByAggregateInput
  _min?: Prisma.ManagerMinOrderByAggregateInput
}

export type ManagerScalarWhereWithAggregatesInput = {
  AND?: Prisma.ManagerScalarWhereWithAggregatesInput | Prisma.ManagerScalarWhereWithAggregatesInput[]
  OR?: Prisma.ManagerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ManagerScalarWhereWithAggregatesInput | Prisma.ManagerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  clerkUserId?: Prisma.StringNullableWithAggregatesFilter<"Manager"> | string | null
  username?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  name?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  surname?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  email?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  img?: Prisma.StringNullableWithAggregatesFilter<"Manager"> | string | null
  birthday?: Prisma.DateTimeWithAggregatesFilter<"Manager"> | Date | string
  schoolId?: Prisma.StringWithAggregatesFilter<"Manager"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Manager"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Manager"> | Date | string
}

export type ManagerCreateInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutManagersInput
}

export type ManagerUncheckedCreateInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  schoolId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutManagersNestedInput
}

export type ManagerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagerCreateManyInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  schoolId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagerListRelationFilter = {
  every?: Prisma.ManagerWhereInput
  some?: Prisma.ManagerWhereInput
  none?: Prisma.ManagerWhereInput
}

export type ManagerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ManagerSchoolIdEmailCompoundUniqueInput = {
  schoolId: string
  email: string
}

export type ManagerSchoolIdPhoneCompoundUniqueInput = {
  schoolId: string
  phone: string
}

export type ManagerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkUserId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  name?: Prisma.SortOrder
  surname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  img?: Prisma.SortOrder
  birthday?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkUserId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  name?: Prisma.SortOrder
  surname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  img?: Prisma.SortOrder
  birthday?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkUserId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  name?: Prisma.SortOrder
  surname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  img?: Prisma.SortOrder
  birthday?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagerCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput> | Prisma.ManagerCreateWithoutSchoolInput[] | Prisma.ManagerUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ManagerCreateOrConnectWithoutSchoolInput | Prisma.ManagerCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ManagerCreateManySchoolInputEnvelope
  connect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
}

export type ManagerUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput> | Prisma.ManagerCreateWithoutSchoolInput[] | Prisma.ManagerUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ManagerCreateOrConnectWithoutSchoolInput | Prisma.ManagerCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.ManagerCreateManySchoolInputEnvelope
  connect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
}

export type ManagerUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput> | Prisma.ManagerCreateWithoutSchoolInput[] | Prisma.ManagerUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ManagerCreateOrConnectWithoutSchoolInput | Prisma.ManagerCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ManagerUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ManagerUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ManagerCreateManySchoolInputEnvelope
  set?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  disconnect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  delete?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  connect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  update?: Prisma.ManagerUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ManagerUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ManagerUpdateManyWithWhereWithoutSchoolInput | Prisma.ManagerUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ManagerScalarWhereInput | Prisma.ManagerScalarWhereInput[]
}

export type ManagerUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput> | Prisma.ManagerCreateWithoutSchoolInput[] | Prisma.ManagerUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.ManagerCreateOrConnectWithoutSchoolInput | Prisma.ManagerCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.ManagerUpsertWithWhereUniqueWithoutSchoolInput | Prisma.ManagerUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.ManagerCreateManySchoolInputEnvelope
  set?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  disconnect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  delete?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  connect?: Prisma.ManagerWhereUniqueInput | Prisma.ManagerWhereUniqueInput[]
  update?: Prisma.ManagerUpdateWithWhereUniqueWithoutSchoolInput | Prisma.ManagerUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.ManagerUpdateManyWithWhereWithoutSchoolInput | Prisma.ManagerUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.ManagerScalarWhereInput | Prisma.ManagerScalarWhereInput[]
}

export type ManagerCreateWithoutSchoolInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagerUncheckedCreateWithoutSchoolInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagerCreateOrConnectWithoutSchoolInput = {
  where: Prisma.ManagerWhereUniqueInput
  create: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput>
}

export type ManagerCreateManySchoolInputEnvelope = {
  data: Prisma.ManagerCreateManySchoolInput | Prisma.ManagerCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type ManagerUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ManagerWhereUniqueInput
  update: Prisma.XOR<Prisma.ManagerUpdateWithoutSchoolInput, Prisma.ManagerUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.ManagerCreateWithoutSchoolInput, Prisma.ManagerUncheckedCreateWithoutSchoolInput>
}

export type ManagerUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.ManagerWhereUniqueInput
  data: Prisma.XOR<Prisma.ManagerUpdateWithoutSchoolInput, Prisma.ManagerUncheckedUpdateWithoutSchoolInput>
}

export type ManagerUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.ManagerScalarWhereInput
  data: Prisma.XOR<Prisma.ManagerUpdateManyMutationInput, Prisma.ManagerUncheckedUpdateManyWithoutSchoolInput>
}

export type ManagerScalarWhereInput = {
  AND?: Prisma.ManagerScalarWhereInput | Prisma.ManagerScalarWhereInput[]
  OR?: Prisma.ManagerScalarWhereInput[]
  NOT?: Prisma.ManagerScalarWhereInput | Prisma.ManagerScalarWhereInput[]
  id?: Prisma.StringFilter<"Manager"> | string
  clerkUserId?: Prisma.StringNullableFilter<"Manager"> | string | null
  username?: Prisma.StringFilter<"Manager"> | string
  name?: Prisma.StringFilter<"Manager"> | string
  surname?: Prisma.StringFilter<"Manager"> | string
  email?: Prisma.StringFilter<"Manager"> | string
  phone?: Prisma.StringFilter<"Manager"> | string
  img?: Prisma.StringNullableFilter<"Manager"> | string | null
  birthday?: Prisma.DateTimeFilter<"Manager"> | Date | string
  schoolId?: Prisma.StringFilter<"Manager"> | string
  createdAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Manager"> | Date | string
}

export type ManagerCreateManySchoolInput = {
  id?: string
  clerkUserId?: string | null
  username: string
  name: string
  surname: string
  email: string
  phone: string
  img?: string | null
  birthday: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagerUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagerUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagerUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clerkUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  username?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  surname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birthday?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ManagerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkUserId?: boolean
  username?: boolean
  name?: boolean
  surname?: boolean
  email?: boolean
  phone?: boolean
  img?: boolean
  birthday?: boolean
  schoolId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type ManagerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkUserId?: boolean
  username?: boolean
  name?: boolean
  surname?: boolean
  email?: boolean
  phone?: boolean
  img?: boolean
  birthday?: boolean
  schoolId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type ManagerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkUserId?: boolean
  username?: boolean
  name?: boolean
  surname?: boolean
  email?: boolean
  phone?: boolean
  img?: boolean
  birthday?: boolean
  schoolId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["manager"]>

export type ManagerSelectScalar = {
  id?: boolean
  clerkUserId?: boolean
  username?: boolean
  name?: boolean
  surname?: boolean
  email?: boolean
  phone?: boolean
  img?: boolean
  birthday?: boolean
  schoolId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ManagerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clerkUserId" | "username" | "name" | "surname" | "email" | "phone" | "img" | "birthday" | "schoolId" | "createdAt" | "updatedAt", ExtArgs["result"]["manager"]>
export type ManagerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type ManagerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type ManagerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}

export type $ManagerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Manager"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    clerkUserId: string | null
    username: string
    name: string
    surname: string
    email: string
    phone: string
    img: string | null
    birthday: Date
    schoolId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["manager"]>
  composites: {}
}

export type ManagerGetPayload<S extends boolean | null | undefined | ManagerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ManagerPayload, S>

export type ManagerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ManagerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ManagerCountAggregateInputType | true
  }

export interface ManagerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manager'], meta: { name: 'Manager' } }
  /**
   * Find zero or one Manager that matches the filter.
   * @param {ManagerFindUniqueArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ManagerFindUniqueArgs>(args: Prisma.SelectSubset<T, ManagerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Manager that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ManagerFindUniqueOrThrowArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ManagerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ManagerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manager that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerFindFirstArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ManagerFindFirstArgs>(args?: Prisma.SelectSubset<T, ManagerFindFirstArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Manager that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerFindFirstOrThrowArgs} args - Arguments to find a Manager
   * @example
   * // Get one Manager
   * const manager = await prisma.manager.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ManagerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ManagerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Managers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Managers
   * const managers = await prisma.manager.findMany()
   * 
   * // Get first 10 Managers
   * const managers = await prisma.manager.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const managerWithIdOnly = await prisma.manager.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ManagerFindManyArgs>(args?: Prisma.SelectSubset<T, ManagerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Manager.
   * @param {ManagerCreateArgs} args - Arguments to create a Manager.
   * @example
   * // Create one Manager
   * const Manager = await prisma.manager.create({
   *   data: {
   *     // ... data to create a Manager
   *   }
   * })
   * 
   */
  create<T extends ManagerCreateArgs>(args: Prisma.SelectSubset<T, ManagerCreateArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Managers.
   * @param {ManagerCreateManyArgs} args - Arguments to create many Managers.
   * @example
   * // Create many Managers
   * const manager = await prisma.manager.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ManagerCreateManyArgs>(args?: Prisma.SelectSubset<T, ManagerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Managers and returns the data saved in the database.
   * @param {ManagerCreateManyAndReturnArgs} args - Arguments to create many Managers.
   * @example
   * // Create many Managers
   * const manager = await prisma.manager.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Managers and only return the `id`
   * const managerWithIdOnly = await prisma.manager.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ManagerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ManagerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Manager.
   * @param {ManagerDeleteArgs} args - Arguments to delete one Manager.
   * @example
   * // Delete one Manager
   * const Manager = await prisma.manager.delete({
   *   where: {
   *     // ... filter to delete one Manager
   *   }
   * })
   * 
   */
  delete<T extends ManagerDeleteArgs>(args: Prisma.SelectSubset<T, ManagerDeleteArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Manager.
   * @param {ManagerUpdateArgs} args - Arguments to update one Manager.
   * @example
   * // Update one Manager
   * const manager = await prisma.manager.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ManagerUpdateArgs>(args: Prisma.SelectSubset<T, ManagerUpdateArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Managers.
   * @param {ManagerDeleteManyArgs} args - Arguments to filter Managers to delete.
   * @example
   * // Delete a few Managers
   * const { count } = await prisma.manager.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ManagerDeleteManyArgs>(args?: Prisma.SelectSubset<T, ManagerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Managers
   * const manager = await prisma.manager.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ManagerUpdateManyArgs>(args: Prisma.SelectSubset<T, ManagerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managers and returns the data updated in the database.
   * @param {ManagerUpdateManyAndReturnArgs} args - Arguments to update many Managers.
   * @example
   * // Update many Managers
   * const manager = await prisma.manager.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Managers and only return the `id`
   * const managerWithIdOnly = await prisma.manager.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ManagerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ManagerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Manager.
   * @param {ManagerUpsertArgs} args - Arguments to update or create a Manager.
   * @example
   * // Update or create a Manager
   * const manager = await prisma.manager.upsert({
   *   create: {
   *     // ... data to create a Manager
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Manager we want to update
   *   }
   * })
   */
  upsert<T extends ManagerUpsertArgs>(args: Prisma.SelectSubset<T, ManagerUpsertArgs<ExtArgs>>): Prisma.Prisma__ManagerClient<runtime.Types.Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Managers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerCountArgs} args - Arguments to filter Managers to count.
   * @example
   * // Count the number of Managers
   * const count = await prisma.manager.count({
   *   where: {
   *     // ... the filter for the Managers we want to count
   *   }
   * })
  **/
  count<T extends ManagerCountArgs>(
    args?: Prisma.Subset<T, ManagerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ManagerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Manager.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ManagerAggregateArgs>(args: Prisma.Subset<T, ManagerAggregateArgs>): Prisma.PrismaPromise<GetManagerAggregateType<T>>

  /**
   * Group by Manager.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ManagerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ManagerGroupByArgs['orderBy'] }
      : { orderBy?: ManagerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ManagerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Manager model
 */
readonly fields: ManagerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Manager.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ManagerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Manager model
 */
export interface ManagerFieldRefs {
  readonly id: Prisma.FieldRef<"Manager", 'String'>
  readonly clerkUserId: Prisma.FieldRef<"Manager", 'String'>
  readonly username: Prisma.FieldRef<"Manager", 'String'>
  readonly name: Prisma.FieldRef<"Manager", 'String'>
  readonly surname: Prisma.FieldRef<"Manager", 'String'>
  readonly email: Prisma.FieldRef<"Manager", 'String'>
  readonly phone: Prisma.FieldRef<"Manager", 'String'>
  readonly img: Prisma.FieldRef<"Manager", 'String'>
  readonly birthday: Prisma.FieldRef<"Manager", 'DateTime'>
  readonly schoolId: Prisma.FieldRef<"Manager", 'String'>
  readonly createdAt: Prisma.FieldRef<"Manager", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Manager", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Manager findUnique
 */
export type ManagerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter, which Manager to fetch.
   */
  where: Prisma.ManagerWhereUniqueInput
}

/**
 * Manager findUniqueOrThrow
 */
export type ManagerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter, which Manager to fetch.
   */
  where: Prisma.ManagerWhereUniqueInput
}

/**
 * Manager findFirst
 */
export type ManagerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter, which Manager to fetch.
   */
  where?: Prisma.ManagerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managers to fetch.
   */
  orderBy?: Prisma.ManagerOrderByWithRelationInput | Prisma.ManagerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Managers.
   */
  cursor?: Prisma.ManagerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Managers.
   */
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * Manager findFirstOrThrow
 */
export type ManagerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter, which Manager to fetch.
   */
  where?: Prisma.ManagerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managers to fetch.
   */
  orderBy?: Prisma.ManagerOrderByWithRelationInput | Prisma.ManagerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Managers.
   */
  cursor?: Prisma.ManagerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Managers.
   */
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * Manager findMany
 */
export type ManagerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter, which Managers to fetch.
   */
  where?: Prisma.ManagerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managers to fetch.
   */
  orderBy?: Prisma.ManagerOrderByWithRelationInput | Prisma.ManagerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Managers.
   */
  cursor?: Prisma.ManagerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managers.
   */
  skip?: number
  distinct?: Prisma.ManagerScalarFieldEnum | Prisma.ManagerScalarFieldEnum[]
}

/**
 * Manager create
 */
export type ManagerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * The data needed to create a Manager.
   */
  data: Prisma.XOR<Prisma.ManagerCreateInput, Prisma.ManagerUncheckedCreateInput>
}

/**
 * Manager createMany
 */
export type ManagerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Managers.
   */
  data: Prisma.ManagerCreateManyInput | Prisma.ManagerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Manager createManyAndReturn
 */
export type ManagerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * The data used to create many Managers.
   */
  data: Prisma.ManagerCreateManyInput | Prisma.ManagerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Manager update
 */
export type ManagerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * The data needed to update a Manager.
   */
  data: Prisma.XOR<Prisma.ManagerUpdateInput, Prisma.ManagerUncheckedUpdateInput>
  /**
   * Choose, which Manager to update.
   */
  where: Prisma.ManagerWhereUniqueInput
}

/**
 * Manager updateMany
 */
export type ManagerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Managers.
   */
  data: Prisma.XOR<Prisma.ManagerUpdateManyMutationInput, Prisma.ManagerUncheckedUpdateManyInput>
  /**
   * Filter which Managers to update
   */
  where?: Prisma.ManagerWhereInput
  /**
   * Limit how many Managers to update.
   */
  limit?: number
}

/**
 * Manager updateManyAndReturn
 */
export type ManagerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * The data used to update Managers.
   */
  data: Prisma.XOR<Prisma.ManagerUpdateManyMutationInput, Prisma.ManagerUncheckedUpdateManyInput>
  /**
   * Filter which Managers to update
   */
  where?: Prisma.ManagerWhereInput
  /**
   * Limit how many Managers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Manager upsert
 */
export type ManagerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * The filter to search for the Manager to update in case it exists.
   */
  where: Prisma.ManagerWhereUniqueInput
  /**
   * In case the Manager found by the `where` argument doesn't exist, create a new Manager with this data.
   */
  create: Prisma.XOR<Prisma.ManagerCreateInput, Prisma.ManagerUncheckedCreateInput>
  /**
   * In case the Manager was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ManagerUpdateInput, Prisma.ManagerUncheckedUpdateInput>
}

/**
 * Manager delete
 */
export type ManagerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
  /**
   * Filter which Manager to delete.
   */
  where: Prisma.ManagerWhereUniqueInput
}

/**
 * Manager deleteMany
 */
export type ManagerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Managers to delete
   */
  where?: Prisma.ManagerWhereInput
  /**
   * Limit how many Managers to delete.
   */
  limit?: number
}

/**
 * Manager without action
 */
export type ManagerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Manager
   */
  select?: Prisma.ManagerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Manager
   */
  omit?: Prisma.ManagerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagerInclude<ExtArgs> | null
}
