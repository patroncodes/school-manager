
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TimetableAssignment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TimetableAssignment
 * 
 */
export type TimetableAssignmentModel = runtime.Types.Result.DefaultSelection<Prisma.$TimetableAssignmentPayload>

export type AggregateTimetableAssignment = {
  _count: TimetableAssignmentCountAggregateOutputType | null
  _min: TimetableAssignmentMinAggregateOutputType | null
  _max: TimetableAssignmentMaxAggregateOutputType | null
}

export type TimetableAssignmentMinAggregateOutputType = {
  id: string | null
  schoolId: string | null
  periodSlotId: string | null
  classId: string | null
  teacherId: string | null
  subjectId: string | null
}

export type TimetableAssignmentMaxAggregateOutputType = {
  id: string | null
  schoolId: string | null
  periodSlotId: string | null
  classId: string | null
  teacherId: string | null
  subjectId: string | null
}

export type TimetableAssignmentCountAggregateOutputType = {
  id: number
  schoolId: number
  periodSlotId: number
  classId: number
  teacherId: number
  subjectId: number
  _all: number
}


export type TimetableAssignmentMinAggregateInputType = {
  id?: true
  schoolId?: true
  periodSlotId?: true
  classId?: true
  teacherId?: true
  subjectId?: true
}

export type TimetableAssignmentMaxAggregateInputType = {
  id?: true
  schoolId?: true
  periodSlotId?: true
  classId?: true
  teacherId?: true
  subjectId?: true
}

export type TimetableAssignmentCountAggregateInputType = {
  id?: true
  schoolId?: true
  periodSlotId?: true
  classId?: true
  teacherId?: true
  subjectId?: true
  _all?: true
}

export type TimetableAssignmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TimetableAssignment to aggregate.
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TimetableAssignments to fetch.
   */
  orderBy?: Prisma.TimetableAssignmentOrderByWithRelationInput | Prisma.TimetableAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TimetableAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TimetableAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TimetableAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TimetableAssignments
  **/
  _count?: true | TimetableAssignmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TimetableAssignmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TimetableAssignmentMaxAggregateInputType
}

export type GetTimetableAssignmentAggregateType<T extends TimetableAssignmentAggregateArgs> = {
      [P in keyof T & keyof AggregateTimetableAssignment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTimetableAssignment[P]>
    : Prisma.GetScalarType<T[P], AggregateTimetableAssignment[P]>
}




export type TimetableAssignmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TimetableAssignmentWhereInput
  orderBy?: Prisma.TimetableAssignmentOrderByWithAggregationInput | Prisma.TimetableAssignmentOrderByWithAggregationInput[]
  by: Prisma.TimetableAssignmentScalarFieldEnum[] | Prisma.TimetableAssignmentScalarFieldEnum
  having?: Prisma.TimetableAssignmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TimetableAssignmentCountAggregateInputType | true
  _min?: TimetableAssignmentMinAggregateInputType
  _max?: TimetableAssignmentMaxAggregateInputType
}

export type TimetableAssignmentGroupByOutputType = {
  id: string
  schoolId: string
  periodSlotId: string
  classId: string
  teacherId: string | null
  subjectId: string | null
  _count: TimetableAssignmentCountAggregateOutputType | null
  _min: TimetableAssignmentMinAggregateOutputType | null
  _max: TimetableAssignmentMaxAggregateOutputType | null
}

type GetTimetableAssignmentGroupByPayload<T extends TimetableAssignmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TimetableAssignmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TimetableAssignmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TimetableAssignmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TimetableAssignmentGroupByOutputType[P]>
      }
    >
  >



export type TimetableAssignmentWhereInput = {
  AND?: Prisma.TimetableAssignmentWhereInput | Prisma.TimetableAssignmentWhereInput[]
  OR?: Prisma.TimetableAssignmentWhereInput[]
  NOT?: Prisma.TimetableAssignmentWhereInput | Prisma.TimetableAssignmentWhereInput[]
  id?: Prisma.StringFilter<"TimetableAssignment"> | string
  schoolId?: Prisma.StringFilter<"TimetableAssignment"> | string
  periodSlotId?: Prisma.StringFilter<"TimetableAssignment"> | string
  classId?: Prisma.StringFilter<"TimetableAssignment"> | string
  teacherId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
  subjectId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  periodSlot?: Prisma.XOR<Prisma.PeriodSlotScalarRelationFilter, Prisma.PeriodSlotWhereInput>
  class?: Prisma.XOR<Prisma.ClassScalarRelationFilter, Prisma.ClassWhereInput>
  teacher?: Prisma.XOR<Prisma.StaffNullableScalarRelationFilter, Prisma.StaffWhereInput> | null
  subject?: Prisma.XOR<Prisma.SubjectNullableScalarRelationFilter, Prisma.SubjectWhereInput> | null
}

export type TimetableAssignmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  periodSlotId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrderInput | Prisma.SortOrder
  subjectId?: Prisma.SortOrderInput | Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  periodSlot?: Prisma.PeriodSlotOrderByWithRelationInput
  class?: Prisma.ClassOrderByWithRelationInput
  teacher?: Prisma.StaffOrderByWithRelationInput
  subject?: Prisma.SubjectOrderByWithRelationInput
}

export type TimetableAssignmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  periodSlotId_classId?: Prisma.TimetableAssignmentPeriodSlotIdClassIdCompoundUniqueInput
  AND?: Prisma.TimetableAssignmentWhereInput | Prisma.TimetableAssignmentWhereInput[]
  OR?: Prisma.TimetableAssignmentWhereInput[]
  NOT?: Prisma.TimetableAssignmentWhereInput | Prisma.TimetableAssignmentWhereInput[]
  schoolId?: Prisma.StringFilter<"TimetableAssignment"> | string
  periodSlotId?: Prisma.StringFilter<"TimetableAssignment"> | string
  classId?: Prisma.StringFilter<"TimetableAssignment"> | string
  teacherId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
  subjectId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  periodSlot?: Prisma.XOR<Prisma.PeriodSlotScalarRelationFilter, Prisma.PeriodSlotWhereInput>
  class?: Prisma.XOR<Prisma.ClassScalarRelationFilter, Prisma.ClassWhereInput>
  teacher?: Prisma.XOR<Prisma.StaffNullableScalarRelationFilter, Prisma.StaffWhereInput> | null
  subject?: Prisma.XOR<Prisma.SubjectNullableScalarRelationFilter, Prisma.SubjectWhereInput> | null
}, "id" | "periodSlotId_classId">

export type TimetableAssignmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  periodSlotId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrderInput | Prisma.SortOrder
  subjectId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TimetableAssignmentCountOrderByAggregateInput
  _max?: Prisma.TimetableAssignmentMaxOrderByAggregateInput
  _min?: Prisma.TimetableAssignmentMinOrderByAggregateInput
}

export type TimetableAssignmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.TimetableAssignmentScalarWhereWithAggregatesInput | Prisma.TimetableAssignmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.TimetableAssignmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TimetableAssignmentScalarWhereWithAggregatesInput | Prisma.TimetableAssignmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TimetableAssignment"> | string
  schoolId?: Prisma.StringWithAggregatesFilter<"TimetableAssignment"> | string
  periodSlotId?: Prisma.StringWithAggregatesFilter<"TimetableAssignment"> | string
  classId?: Prisma.StringWithAggregatesFilter<"TimetableAssignment"> | string
  teacherId?: Prisma.StringNullableWithAggregatesFilter<"TimetableAssignment"> | string | null
  subjectId?: Prisma.StringNullableWithAggregatesFilter<"TimetableAssignment"> | string | null
}

export type TimetableAssignmentCreateInput = {
  id?: string
  school: Prisma.SchoolCreateNestedOneWithoutTimetableAssignmentsInput
  periodSlot: Prisma.PeriodSlotCreateNestedOneWithoutTimetableAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutTimetableAssignmentsInput
  teacher?: Prisma.StaffCreateNestedOneWithoutTimetableAssignmentsInput
  subject?: Prisma.SubjectCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  periodSlot?: Prisma.PeriodSlotUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneWithoutTimetableAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentCreateManyInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TimetableAssignmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentListRelationFilter = {
  every?: Prisma.TimetableAssignmentWhereInput
  some?: Prisma.TimetableAssignmentWhereInput
  none?: Prisma.TimetableAssignmentWhereInput
}

export type TimetableAssignmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TimetableAssignmentPeriodSlotIdClassIdCompoundUniqueInput = {
  periodSlotId: string
  classId: string
}

export type TimetableAssignmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  periodSlotId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
}

export type TimetableAssignmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  periodSlotId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
}

export type TimetableAssignmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  periodSlotId?: Prisma.SortOrder
  classId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
}

export type TimetableAssignmentCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TimetableAssignmentCreateWithoutSchoolInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TimetableAssignmentCreateWithoutSchoolInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TimetableAssignmentCreateWithoutSchoolInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySchoolInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TimetableAssignmentCreateWithoutSchoolInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySchoolInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentCreateNestedManyWithoutClassInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput> | Prisma.TimetableAssignmentCreateWithoutClassInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput | Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyClassInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUncheckedCreateNestedManyWithoutClassInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput> | Prisma.TimetableAssignmentCreateWithoutClassInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput | Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyClassInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUpdateManyWithoutClassNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput> | Prisma.TimetableAssignmentCreateWithoutClassInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput | Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutClassInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutClassInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyClassInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutClassInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutClassInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutClassInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutClassInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentUncheckedUpdateManyWithoutClassNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput> | Prisma.TimetableAssignmentCreateWithoutClassInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput | Prisma.TimetableAssignmentCreateOrConnectWithoutClassInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutClassInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutClassInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyClassInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutClassInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutClassInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutClassInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutClassInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TimetableAssignmentCreateWithoutSubjectInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TimetableAssignmentCreateWithoutSubjectInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TimetableAssignmentCreateWithoutSubjectInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TimetableAssignmentCreateWithoutSubjectInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TimetableAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TimetableAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentCreateNestedManyWithoutPeriodSlotInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput> | Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput | Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyPeriodSlotInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUncheckedCreateNestedManyWithoutPeriodSlotInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput> | Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput | Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyPeriodSlotInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUpdateManyWithoutPeriodSlotNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput> | Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput | Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutPeriodSlotInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyPeriodSlotInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutPeriodSlotInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutPeriodSlotInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentUncheckedUpdateManyWithoutPeriodSlotNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput> | Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput | Prisma.TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutPeriodSlotInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyPeriodSlotInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutPeriodSlotInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutPeriodSlotInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutPeriodSlotInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TimetableAssignmentCreateWithoutTeacherInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TimetableAssignmentCreateWithoutTeacherInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
}

export type TimetableAssignmentUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TimetableAssignmentCreateWithoutTeacherInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TimetableAssignmentCreateWithoutTeacherInput[] | Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TimetableAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TimetableAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TimetableAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  delete?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  connect?: Prisma.TimetableAssignmentWhereUniqueInput | Prisma.TimetableAssignmentWhereUniqueInput[]
  update?: Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TimetableAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TimetableAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TimetableAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
}

export type TimetableAssignmentCreateWithoutSchoolInput = {
  id?: string
  periodSlot: Prisma.PeriodSlotCreateNestedOneWithoutTimetableAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutTimetableAssignmentsInput
  teacher?: Prisma.StaffCreateNestedOneWithoutTimetableAssignmentsInput
  subject?: Prisma.SubjectCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateWithoutSchoolInput = {
  id?: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentCreateOrConnectWithoutSchoolInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput>
}

export type TimetableAssignmentCreateManySchoolInputEnvelope = {
  data: Prisma.TimetableAssignmentCreateManySchoolInput | Prisma.TimetableAssignmentCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type TimetableAssignmentUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSchoolInput>
}

export type TimetableAssignmentUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutSchoolInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutSchoolInput>
}

export type TimetableAssignmentUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.TimetableAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyWithoutSchoolInput>
}

export type TimetableAssignmentScalarWhereInput = {
  AND?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
  OR?: Prisma.TimetableAssignmentScalarWhereInput[]
  NOT?: Prisma.TimetableAssignmentScalarWhereInput | Prisma.TimetableAssignmentScalarWhereInput[]
  id?: Prisma.StringFilter<"TimetableAssignment"> | string
  schoolId?: Prisma.StringFilter<"TimetableAssignment"> | string
  periodSlotId?: Prisma.StringFilter<"TimetableAssignment"> | string
  classId?: Prisma.StringFilter<"TimetableAssignment"> | string
  teacherId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
  subjectId?: Prisma.StringNullableFilter<"TimetableAssignment"> | string | null
}

export type TimetableAssignmentCreateWithoutClassInput = {
  id?: string
  school: Prisma.SchoolCreateNestedOneWithoutTimetableAssignmentsInput
  periodSlot: Prisma.PeriodSlotCreateNestedOneWithoutTimetableAssignmentsInput
  teacher?: Prisma.StaffCreateNestedOneWithoutTimetableAssignmentsInput
  subject?: Prisma.SubjectCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateWithoutClassInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentCreateOrConnectWithoutClassInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput>
}

export type TimetableAssignmentCreateManyClassInputEnvelope = {
  data: Prisma.TimetableAssignmentCreateManyClassInput | Prisma.TimetableAssignmentCreateManyClassInput[]
  skipDuplicates?: boolean
}

export type TimetableAssignmentUpsertWithWhereUniqueWithoutClassInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutClassInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutClassInput>
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutClassInput, Prisma.TimetableAssignmentUncheckedCreateWithoutClassInput>
}

export type TimetableAssignmentUpdateWithWhereUniqueWithoutClassInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutClassInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutClassInput>
}

export type TimetableAssignmentUpdateManyWithWhereWithoutClassInput = {
  where: Prisma.TimetableAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyWithoutClassInput>
}

export type TimetableAssignmentCreateWithoutSubjectInput = {
  id?: string
  school: Prisma.SchoolCreateNestedOneWithoutTimetableAssignmentsInput
  periodSlot: Prisma.PeriodSlotCreateNestedOneWithoutTimetableAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutTimetableAssignmentsInput
  teacher?: Prisma.StaffCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateWithoutSubjectInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
}

export type TimetableAssignmentCreateOrConnectWithoutSubjectInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TimetableAssignmentCreateManySubjectInputEnvelope = {
  data: Prisma.TimetableAssignmentCreateManySubjectInput | Prisma.TimetableAssignmentCreateManySubjectInput[]
  skipDuplicates?: boolean
}

export type TimetableAssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TimetableAssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutSubjectInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutSubjectInput>
}

export type TimetableAssignmentUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.TimetableAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyWithoutSubjectInput>
}

export type TimetableAssignmentCreateWithoutPeriodSlotInput = {
  id?: string
  school: Prisma.SchoolCreateNestedOneWithoutTimetableAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutTimetableAssignmentsInput
  teacher?: Prisma.StaffCreateNestedOneWithoutTimetableAssignmentsInput
  subject?: Prisma.SubjectCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput = {
  id?: string
  schoolId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentCreateOrConnectWithoutPeriodSlotInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput>
}

export type TimetableAssignmentCreateManyPeriodSlotInputEnvelope = {
  data: Prisma.TimetableAssignmentCreateManyPeriodSlotInput | Prisma.TimetableAssignmentCreateManyPeriodSlotInput[]
  skipDuplicates?: boolean
}

export type TimetableAssignmentUpsertWithWhereUniqueWithoutPeriodSlotInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutPeriodSlotInput>
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedCreateWithoutPeriodSlotInput>
}

export type TimetableAssignmentUpdateWithWhereUniqueWithoutPeriodSlotInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutPeriodSlotInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutPeriodSlotInput>
}

export type TimetableAssignmentUpdateManyWithWhereWithoutPeriodSlotInput = {
  where: Prisma.TimetableAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyWithoutPeriodSlotInput>
}

export type TimetableAssignmentCreateWithoutTeacherInput = {
  id?: string
  school: Prisma.SchoolCreateNestedOneWithoutTimetableAssignmentsInput
  periodSlot: Prisma.PeriodSlotCreateNestedOneWithoutTimetableAssignmentsInput
  class: Prisma.ClassCreateNestedOneWithoutTimetableAssignmentsInput
  subject?: Prisma.SubjectCreateNestedOneWithoutTimetableAssignmentsInput
}

export type TimetableAssignmentUncheckedCreateWithoutTeacherInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  subjectId?: string | null
}

export type TimetableAssignmentCreateOrConnectWithoutTeacherInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TimetableAssignmentCreateManyTeacherInputEnvelope = {
  data: Prisma.TimetableAssignmentCreateManyTeacherInput | Prisma.TimetableAssignmentCreateManyTeacherInput[]
  skipDuplicates?: boolean
}

export type TimetableAssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutTeacherInput>
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TimetableAssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TimetableAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateWithoutTeacherInput, Prisma.TimetableAssignmentUncheckedUpdateWithoutTeacherInput>
}

export type TimetableAssignmentUpdateManyWithWhereWithoutTeacherInput = {
  where: Prisma.TimetableAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyWithoutTeacherInput>
}

export type TimetableAssignmentCreateManySchoolInput = {
  id?: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlot?: Prisma.PeriodSlotUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneWithoutTimetableAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentCreateManyClassInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentUpdateWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  periodSlot?: Prisma.PeriodSlotUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneWithoutTimetableAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentUncheckedUpdateManyWithoutClassInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentCreateManySubjectInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  teacherId?: string | null
}

export type TimetableAssignmentUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  periodSlot?: Prisma.PeriodSlotUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentCreateManyPeriodSlotInput = {
  id?: string
  schoolId: string
  classId: string
  teacherId?: string | null
  subjectId?: string | null
}

export type TimetableAssignmentUpdateWithoutPeriodSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneWithoutTimetableAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateWithoutPeriodSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentUncheckedUpdateManyWithoutPeriodSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentCreateManyTeacherInput = {
  id?: string
  schoolId: string
  periodSlotId: string
  classId: string
  subjectId?: string | null
}

export type TimetableAssignmentUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  periodSlot?: Prisma.PeriodSlotUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  class?: Prisma.ClassUpdateOneRequiredWithoutTimetableAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneWithoutTimetableAssignmentsNestedInput
}

export type TimetableAssignmentUncheckedUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TimetableAssignmentUncheckedUpdateManyWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  periodSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  classId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type TimetableAssignmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  periodSlotId?: boolean
  classId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}, ExtArgs["result"]["timetableAssignment"]>

export type TimetableAssignmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  periodSlotId?: boolean
  classId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}, ExtArgs["result"]["timetableAssignment"]>

export type TimetableAssignmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  periodSlotId?: boolean
  classId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}, ExtArgs["result"]["timetableAssignment"]>

export type TimetableAssignmentSelectScalar = {
  id?: boolean
  schoolId?: boolean
  periodSlotId?: boolean
  classId?: boolean
  teacherId?: boolean
  subjectId?: boolean
}

export type TimetableAssignmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "schoolId" | "periodSlotId" | "classId" | "teacherId" | "subjectId", ExtArgs["result"]["timetableAssignment"]>
export type TimetableAssignmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}
export type TimetableAssignmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}
export type TimetableAssignmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  periodSlot?: boolean | Prisma.PeriodSlotDefaultArgs<ExtArgs>
  class?: boolean | Prisma.ClassDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.TimetableAssignment$teacherArgs<ExtArgs>
  subject?: boolean | Prisma.TimetableAssignment$subjectArgs<ExtArgs>
}

export type $TimetableAssignmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TimetableAssignment"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    periodSlot: Prisma.$PeriodSlotPayload<ExtArgs>
    class: Prisma.$ClassPayload<ExtArgs>
    teacher: Prisma.$StaffPayload<ExtArgs> | null
    subject: Prisma.$SubjectPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    schoolId: string
    periodSlotId: string
    classId: string
    teacherId: string | null
    subjectId: string | null
  }, ExtArgs["result"]["timetableAssignment"]>
  composites: {}
}

export type TimetableAssignmentGetPayload<S extends boolean | null | undefined | TimetableAssignmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload, S>

export type TimetableAssignmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TimetableAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TimetableAssignmentCountAggregateInputType | true
  }

export interface TimetableAssignmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimetableAssignment'], meta: { name: 'TimetableAssignment' } }
  /**
   * Find zero or one TimetableAssignment that matches the filter.
   * @param {TimetableAssignmentFindUniqueArgs} args - Arguments to find a TimetableAssignment
   * @example
   * // Get one TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TimetableAssignmentFindUniqueArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TimetableAssignment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TimetableAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TimetableAssignment
   * @example
   * // Get one TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TimetableAssignmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TimetableAssignment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentFindFirstArgs} args - Arguments to find a TimetableAssignment
   * @example
   * // Get one TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TimetableAssignmentFindFirstArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TimetableAssignment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentFindFirstOrThrowArgs} args - Arguments to find a TimetableAssignment
   * @example
   * // Get one TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TimetableAssignmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TimetableAssignments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TimetableAssignments
   * const timetableAssignments = await prisma.timetableAssignment.findMany()
   * 
   * // Get first 10 TimetableAssignments
   * const timetableAssignments = await prisma.timetableAssignment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const timetableAssignmentWithIdOnly = await prisma.timetableAssignment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TimetableAssignmentFindManyArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TimetableAssignment.
   * @param {TimetableAssignmentCreateArgs} args - Arguments to create a TimetableAssignment.
   * @example
   * // Create one TimetableAssignment
   * const TimetableAssignment = await prisma.timetableAssignment.create({
   *   data: {
   *     // ... data to create a TimetableAssignment
   *   }
   * })
   * 
   */
  create<T extends TimetableAssignmentCreateArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentCreateArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TimetableAssignments.
   * @param {TimetableAssignmentCreateManyArgs} args - Arguments to create many TimetableAssignments.
   * @example
   * // Create many TimetableAssignments
   * const timetableAssignment = await prisma.timetableAssignment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TimetableAssignmentCreateManyArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TimetableAssignments and returns the data saved in the database.
   * @param {TimetableAssignmentCreateManyAndReturnArgs} args - Arguments to create many TimetableAssignments.
   * @example
   * // Create many TimetableAssignments
   * const timetableAssignment = await prisma.timetableAssignment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TimetableAssignments and only return the `id`
   * const timetableAssignmentWithIdOnly = await prisma.timetableAssignment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TimetableAssignmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TimetableAssignment.
   * @param {TimetableAssignmentDeleteArgs} args - Arguments to delete one TimetableAssignment.
   * @example
   * // Delete one TimetableAssignment
   * const TimetableAssignment = await prisma.timetableAssignment.delete({
   *   where: {
   *     // ... filter to delete one TimetableAssignment
   *   }
   * })
   * 
   */
  delete<T extends TimetableAssignmentDeleteArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentDeleteArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TimetableAssignment.
   * @param {TimetableAssignmentUpdateArgs} args - Arguments to update one TimetableAssignment.
   * @example
   * // Update one TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TimetableAssignmentUpdateArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentUpdateArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TimetableAssignments.
   * @param {TimetableAssignmentDeleteManyArgs} args - Arguments to filter TimetableAssignments to delete.
   * @example
   * // Delete a few TimetableAssignments
   * const { count } = await prisma.timetableAssignment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TimetableAssignmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, TimetableAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TimetableAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TimetableAssignments
   * const timetableAssignment = await prisma.timetableAssignment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TimetableAssignmentUpdateManyArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TimetableAssignments and returns the data updated in the database.
   * @param {TimetableAssignmentUpdateManyAndReturnArgs} args - Arguments to update many TimetableAssignments.
   * @example
   * // Update many TimetableAssignments
   * const timetableAssignment = await prisma.timetableAssignment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TimetableAssignments and only return the `id`
   * const timetableAssignmentWithIdOnly = await prisma.timetableAssignment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TimetableAssignmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TimetableAssignment.
   * @param {TimetableAssignmentUpsertArgs} args - Arguments to update or create a TimetableAssignment.
   * @example
   * // Update or create a TimetableAssignment
   * const timetableAssignment = await prisma.timetableAssignment.upsert({
   *   create: {
   *     // ... data to create a TimetableAssignment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TimetableAssignment we want to update
   *   }
   * })
   */
  upsert<T extends TimetableAssignmentUpsertArgs>(args: Prisma.SelectSubset<T, TimetableAssignmentUpsertArgs<ExtArgs>>): Prisma.Prisma__TimetableAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TimetableAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TimetableAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentCountArgs} args - Arguments to filter TimetableAssignments to count.
   * @example
   * // Count the number of TimetableAssignments
   * const count = await prisma.timetableAssignment.count({
   *   where: {
   *     // ... the filter for the TimetableAssignments we want to count
   *   }
   * })
  **/
  count<T extends TimetableAssignmentCountArgs>(
    args?: Prisma.Subset<T, TimetableAssignmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TimetableAssignmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TimetableAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TimetableAssignmentAggregateArgs>(args: Prisma.Subset<T, TimetableAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTimetableAssignmentAggregateType<T>>

  /**
   * Group by TimetableAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TimetableAssignmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TimetableAssignmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TimetableAssignmentGroupByArgs['orderBy'] }
      : { orderBy?: TimetableAssignmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TimetableAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimetableAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TimetableAssignment model
 */
readonly fields: TimetableAssignmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TimetableAssignment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TimetableAssignmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  periodSlot<T extends Prisma.PeriodSlotDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PeriodSlotDefaultArgs<ExtArgs>>): Prisma.Prisma__PeriodSlotClient<runtime.Types.Result.GetResult<Prisma.$PeriodSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  class<T extends Prisma.ClassDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClassDefaultArgs<ExtArgs>>): Prisma.Prisma__ClassClient<runtime.Types.Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  teacher<T extends Prisma.TimetableAssignment$teacherArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TimetableAssignment$teacherArgs<ExtArgs>>): Prisma.Prisma__StaffClient<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  subject<T extends Prisma.TimetableAssignment$subjectArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TimetableAssignment$subjectArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TimetableAssignment model
 */
export interface TimetableAssignmentFieldRefs {
  readonly id: Prisma.FieldRef<"TimetableAssignment", 'String'>
  readonly schoolId: Prisma.FieldRef<"TimetableAssignment", 'String'>
  readonly periodSlotId: Prisma.FieldRef<"TimetableAssignment", 'String'>
  readonly classId: Prisma.FieldRef<"TimetableAssignment", 'String'>
  readonly teacherId: Prisma.FieldRef<"TimetableAssignment", 'String'>
  readonly subjectId: Prisma.FieldRef<"TimetableAssignment", 'String'>
}
    

// Custom InputTypes
/**
 * TimetableAssignment findUnique
 */
export type TimetableAssignmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TimetableAssignment to fetch.
   */
  where: Prisma.TimetableAssignmentWhereUniqueInput
}

/**
 * TimetableAssignment findUniqueOrThrow
 */
export type TimetableAssignmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TimetableAssignment to fetch.
   */
  where: Prisma.TimetableAssignmentWhereUniqueInput
}

/**
 * TimetableAssignment findFirst
 */
export type TimetableAssignmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TimetableAssignment to fetch.
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TimetableAssignments to fetch.
   */
  orderBy?: Prisma.TimetableAssignmentOrderByWithRelationInput | Prisma.TimetableAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TimetableAssignments.
   */
  cursor?: Prisma.TimetableAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TimetableAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TimetableAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TimetableAssignments.
   */
  distinct?: Prisma.TimetableAssignmentScalarFieldEnum | Prisma.TimetableAssignmentScalarFieldEnum[]
}

/**
 * TimetableAssignment findFirstOrThrow
 */
export type TimetableAssignmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TimetableAssignment to fetch.
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TimetableAssignments to fetch.
   */
  orderBy?: Prisma.TimetableAssignmentOrderByWithRelationInput | Prisma.TimetableAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TimetableAssignments.
   */
  cursor?: Prisma.TimetableAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TimetableAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TimetableAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TimetableAssignments.
   */
  distinct?: Prisma.TimetableAssignmentScalarFieldEnum | Prisma.TimetableAssignmentScalarFieldEnum[]
}

/**
 * TimetableAssignment findMany
 */
export type TimetableAssignmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TimetableAssignments to fetch.
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TimetableAssignments to fetch.
   */
  orderBy?: Prisma.TimetableAssignmentOrderByWithRelationInput | Prisma.TimetableAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TimetableAssignments.
   */
  cursor?: Prisma.TimetableAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TimetableAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TimetableAssignments.
   */
  skip?: number
  distinct?: Prisma.TimetableAssignmentScalarFieldEnum | Prisma.TimetableAssignmentScalarFieldEnum[]
}

/**
 * TimetableAssignment create
 */
export type TimetableAssignmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to create a TimetableAssignment.
   */
  data: Prisma.XOR<Prisma.TimetableAssignmentCreateInput, Prisma.TimetableAssignmentUncheckedCreateInput>
}

/**
 * TimetableAssignment createMany
 */
export type TimetableAssignmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TimetableAssignments.
   */
  data: Prisma.TimetableAssignmentCreateManyInput | Prisma.TimetableAssignmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TimetableAssignment createManyAndReturn
 */
export type TimetableAssignmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * The data used to create many TimetableAssignments.
   */
  data: Prisma.TimetableAssignmentCreateManyInput | Prisma.TimetableAssignmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TimetableAssignment update
 */
export type TimetableAssignmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to update a TimetableAssignment.
   */
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateInput, Prisma.TimetableAssignmentUncheckedUpdateInput>
  /**
   * Choose, which TimetableAssignment to update.
   */
  where: Prisma.TimetableAssignmentWhereUniqueInput
}

/**
 * TimetableAssignment updateMany
 */
export type TimetableAssignmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TimetableAssignments.
   */
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TimetableAssignments to update
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * Limit how many TimetableAssignments to update.
   */
  limit?: number
}

/**
 * TimetableAssignment updateManyAndReturn
 */
export type TimetableAssignmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * The data used to update TimetableAssignments.
   */
  data: Prisma.XOR<Prisma.TimetableAssignmentUpdateManyMutationInput, Prisma.TimetableAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TimetableAssignments to update
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * Limit how many TimetableAssignments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TimetableAssignment upsert
 */
export type TimetableAssignmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * The filter to search for the TimetableAssignment to update in case it exists.
   */
  where: Prisma.TimetableAssignmentWhereUniqueInput
  /**
   * In case the TimetableAssignment found by the `where` argument doesn't exist, create a new TimetableAssignment with this data.
   */
  create: Prisma.XOR<Prisma.TimetableAssignmentCreateInput, Prisma.TimetableAssignmentUncheckedCreateInput>
  /**
   * In case the TimetableAssignment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TimetableAssignmentUpdateInput, Prisma.TimetableAssignmentUncheckedUpdateInput>
}

/**
 * TimetableAssignment delete
 */
export type TimetableAssignmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
  /**
   * Filter which TimetableAssignment to delete.
   */
  where: Prisma.TimetableAssignmentWhereUniqueInput
}

/**
 * TimetableAssignment deleteMany
 */
export type TimetableAssignmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TimetableAssignments to delete
   */
  where?: Prisma.TimetableAssignmentWhereInput
  /**
   * Limit how many TimetableAssignments to delete.
   */
  limit?: number
}

/**
 * TimetableAssignment.teacher
 */
export type TimetableAssignment$teacherArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Staff
   */
  select?: Prisma.StaffSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Staff
   */
  omit?: Prisma.StaffOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffInclude<ExtArgs> | null
  where?: Prisma.StaffWhereInput
}

/**
 * TimetableAssignment.subject
 */
export type TimetableAssignment$subjectArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null
  where?: Prisma.SubjectWhereInput
}

/**
 * TimetableAssignment without action
 */
export type TimetableAssignmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimetableAssignment
   */
  select?: Prisma.TimetableAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimetableAssignment
   */
  omit?: Prisma.TimetableAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimetableAssignmentInclude<ExtArgs> | null
}
