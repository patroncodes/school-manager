
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StaffBankAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StaffBankAccount
 * 
 */
export type StaffBankAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$StaffBankAccountPayload>

export type AggregateStaffBankAccount = {
  _count: StaffBankAccountCountAggregateOutputType | null
  _min: StaffBankAccountMinAggregateOutputType | null
  _max: StaffBankAccountMaxAggregateOutputType | null
}

export type StaffBankAccountMinAggregateOutputType = {
  id: string | null
  accountNumber: string | null
  bankName: string | null
  accountName: string | null
  schoolId: string | null
  staffId: string | null
}

export type StaffBankAccountMaxAggregateOutputType = {
  id: string | null
  accountNumber: string | null
  bankName: string | null
  accountName: string | null
  schoolId: string | null
  staffId: string | null
}

export type StaffBankAccountCountAggregateOutputType = {
  id: number
  accountNumber: number
  bankName: number
  accountName: number
  schoolId: number
  staffId: number
  _all: number
}


export type StaffBankAccountMinAggregateInputType = {
  id?: true
  accountNumber?: true
  bankName?: true
  accountName?: true
  schoolId?: true
  staffId?: true
}

export type StaffBankAccountMaxAggregateInputType = {
  id?: true
  accountNumber?: true
  bankName?: true
  accountName?: true
  schoolId?: true
  staffId?: true
}

export type StaffBankAccountCountAggregateInputType = {
  id?: true
  accountNumber?: true
  bankName?: true
  accountName?: true
  schoolId?: true
  staffId?: true
  _all?: true
}

export type StaffBankAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffBankAccount to aggregate.
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffBankAccounts to fetch.
   */
  orderBy?: Prisma.StaffBankAccountOrderByWithRelationInput | Prisma.StaffBankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StaffBankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StaffBankAccounts
  **/
  _count?: true | StaffBankAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StaffBankAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StaffBankAccountMaxAggregateInputType
}

export type GetStaffBankAccountAggregateType<T extends StaffBankAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateStaffBankAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffBankAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffBankAccount[P]>
}




export type StaffBankAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffBankAccountWhereInput
  orderBy?: Prisma.StaffBankAccountOrderByWithAggregationInput | Prisma.StaffBankAccountOrderByWithAggregationInput[]
  by: Prisma.StaffBankAccountScalarFieldEnum[] | Prisma.StaffBankAccountScalarFieldEnum
  having?: Prisma.StaffBankAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StaffBankAccountCountAggregateInputType | true
  _min?: StaffBankAccountMinAggregateInputType
  _max?: StaffBankAccountMaxAggregateInputType
}

export type StaffBankAccountGroupByOutputType = {
  id: string
  accountNumber: string
  bankName: string
  accountName: string
  schoolId: string
  staffId: string
  _count: StaffBankAccountCountAggregateOutputType | null
  _min: StaffBankAccountMinAggregateOutputType | null
  _max: StaffBankAccountMaxAggregateOutputType | null
}

type GetStaffBankAccountGroupByPayload<T extends StaffBankAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StaffBankAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StaffBankAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffBankAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffBankAccountGroupByOutputType[P]>
      }
    >
  >



export type StaffBankAccountWhereInput = {
  AND?: Prisma.StaffBankAccountWhereInput | Prisma.StaffBankAccountWhereInput[]
  OR?: Prisma.StaffBankAccountWhereInput[]
  NOT?: Prisma.StaffBankAccountWhereInput | Prisma.StaffBankAccountWhereInput[]
  id?: Prisma.StringFilter<"StaffBankAccount"> | string
  accountNumber?: Prisma.StringFilter<"StaffBankAccount"> | string
  bankName?: Prisma.StringFilter<"StaffBankAccount"> | string
  accountName?: Prisma.StringFilter<"StaffBankAccount"> | string
  schoolId?: Prisma.StringFilter<"StaffBankAccount"> | string
  staffId?: Prisma.StringFilter<"StaffBankAccount"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}

export type StaffBankAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountName?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  staff?: Prisma.StaffOrderByWithRelationInput
}

export type StaffBankAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  staffId_accountNumber_bankName?: Prisma.StaffBankAccountStaffIdAccountNumberBankNameCompoundUniqueInput
  AND?: Prisma.StaffBankAccountWhereInput | Prisma.StaffBankAccountWhereInput[]
  OR?: Prisma.StaffBankAccountWhereInput[]
  NOT?: Prisma.StaffBankAccountWhereInput | Prisma.StaffBankAccountWhereInput[]
  accountNumber?: Prisma.StringFilter<"StaffBankAccount"> | string
  bankName?: Prisma.StringFilter<"StaffBankAccount"> | string
  accountName?: Prisma.StringFilter<"StaffBankAccount"> | string
  schoolId?: Prisma.StringFilter<"StaffBankAccount"> | string
  staffId?: Prisma.StringFilter<"StaffBankAccount"> | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  staff?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
}, "id" | "staffId_accountNumber_bankName">

export type StaffBankAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountName?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  _count?: Prisma.StaffBankAccountCountOrderByAggregateInput
  _max?: Prisma.StaffBankAccountMaxOrderByAggregateInput
  _min?: Prisma.StaffBankAccountMinOrderByAggregateInput
}

export type StaffBankAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.StaffBankAccountScalarWhereWithAggregatesInput | Prisma.StaffBankAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.StaffBankAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StaffBankAccountScalarWhereWithAggregatesInput | Prisma.StaffBankAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
  accountNumber?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
  bankName?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
  accountName?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
  schoolId?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"StaffBankAccount"> | string
}

export type StaffBankAccountCreateInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  school: Prisma.SchoolCreateNestedOneWithoutStaffsBankAccountsInput
  staff: Prisma.StaffCreateNestedOneWithoutBankAccountsInput
}

export type StaffBankAccountUncheckedCreateInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  schoolId: string
  staffId: string
}

export type StaffBankAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutStaffsBankAccountsNestedInput
  staff?: Prisma.StaffUpdateOneRequiredWithoutBankAccountsNestedInput
}

export type StaffBankAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountCreateManyInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  schoolId: string
  staffId: string
}

export type StaffBankAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountListRelationFilter = {
  every?: Prisma.StaffBankAccountWhereInput
  some?: Prisma.StaffBankAccountWhereInput
  none?: Prisma.StaffBankAccountWhereInput
}

export type StaffBankAccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StaffBankAccountStaffIdAccountNumberBankNameCompoundUniqueInput = {
  staffId: string
  accountNumber: string
  bankName: string
}

export type StaffBankAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountName?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffBankAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountName?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffBankAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountNumber?: Prisma.SortOrder
  bankName?: Prisma.SortOrder
  accountName?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
}

export type StaffBankAccountCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput> | Prisma.StaffBankAccountCreateWithoutSchoolInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput | Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.StaffBankAccountCreateManySchoolInputEnvelope
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
}

export type StaffBankAccountUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput> | Prisma.StaffBankAccountCreateWithoutSchoolInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput | Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.StaffBankAccountCreateManySchoolInputEnvelope
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
}

export type StaffBankAccountUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput> | Prisma.StaffBankAccountCreateWithoutSchoolInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput | Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutSchoolInput | Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.StaffBankAccountCreateManySchoolInputEnvelope
  set?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  disconnect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  delete?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  update?: Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutSchoolInput | Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.StaffBankAccountUpdateManyWithWhereWithoutSchoolInput | Prisma.StaffBankAccountUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
}

export type StaffBankAccountUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput> | Prisma.StaffBankAccountCreateWithoutSchoolInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput | Prisma.StaffBankAccountCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutSchoolInput | Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.StaffBankAccountCreateManySchoolInputEnvelope
  set?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  disconnect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  delete?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  update?: Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutSchoolInput | Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.StaffBankAccountUpdateManyWithWhereWithoutSchoolInput | Prisma.StaffBankAccountUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
}

export type StaffBankAccountCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput> | Prisma.StaffBankAccountCreateWithoutStaffInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput | Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.StaffBankAccountCreateManyStaffInputEnvelope
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
}

export type StaffBankAccountUncheckedCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput> | Prisma.StaffBankAccountCreateWithoutStaffInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput | Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.StaffBankAccountCreateManyStaffInputEnvelope
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
}

export type StaffBankAccountUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput> | Prisma.StaffBankAccountCreateWithoutStaffInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput | Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutStaffInput | Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.StaffBankAccountCreateManyStaffInputEnvelope
  set?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  disconnect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  delete?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  update?: Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutStaffInput | Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.StaffBankAccountUpdateManyWithWhereWithoutStaffInput | Prisma.StaffBankAccountUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
}

export type StaffBankAccountUncheckedUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput> | Prisma.StaffBankAccountCreateWithoutStaffInput[] | Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput | Prisma.StaffBankAccountCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutStaffInput | Prisma.StaffBankAccountUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.StaffBankAccountCreateManyStaffInputEnvelope
  set?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  disconnect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  delete?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  connect?: Prisma.StaffBankAccountWhereUniqueInput | Prisma.StaffBankAccountWhereUniqueInput[]
  update?: Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutStaffInput | Prisma.StaffBankAccountUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.StaffBankAccountUpdateManyWithWhereWithoutStaffInput | Prisma.StaffBankAccountUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
}

export type StaffBankAccountCreateWithoutSchoolInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  staff: Prisma.StaffCreateNestedOneWithoutBankAccountsInput
}

export type StaffBankAccountUncheckedCreateWithoutSchoolInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  staffId: string
}

export type StaffBankAccountCreateOrConnectWithoutSchoolInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput>
}

export type StaffBankAccountCreateManySchoolInputEnvelope = {
  data: Prisma.StaffBankAccountCreateManySchoolInput | Prisma.StaffBankAccountCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type StaffBankAccountUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.StaffBankAccountUpdateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedCreateWithoutSchoolInput>
}

export type StaffBankAccountUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateWithoutSchoolInput, Prisma.StaffBankAccountUncheckedUpdateWithoutSchoolInput>
}

export type StaffBankAccountUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.StaffBankAccountScalarWhereInput
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateManyMutationInput, Prisma.StaffBankAccountUncheckedUpdateManyWithoutSchoolInput>
}

export type StaffBankAccountScalarWhereInput = {
  AND?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
  OR?: Prisma.StaffBankAccountScalarWhereInput[]
  NOT?: Prisma.StaffBankAccountScalarWhereInput | Prisma.StaffBankAccountScalarWhereInput[]
  id?: Prisma.StringFilter<"StaffBankAccount"> | string
  accountNumber?: Prisma.StringFilter<"StaffBankAccount"> | string
  bankName?: Prisma.StringFilter<"StaffBankAccount"> | string
  accountName?: Prisma.StringFilter<"StaffBankAccount"> | string
  schoolId?: Prisma.StringFilter<"StaffBankAccount"> | string
  staffId?: Prisma.StringFilter<"StaffBankAccount"> | string
}

export type StaffBankAccountCreateWithoutStaffInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  school: Prisma.SchoolCreateNestedOneWithoutStaffsBankAccountsInput
}

export type StaffBankAccountUncheckedCreateWithoutStaffInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  schoolId: string
}

export type StaffBankAccountCreateOrConnectWithoutStaffInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput>
}

export type StaffBankAccountCreateManyStaffInputEnvelope = {
  data: Prisma.StaffBankAccountCreateManyStaffInput | Prisma.StaffBankAccountCreateManyStaffInput[]
  skipDuplicates?: boolean
}

export type StaffBankAccountUpsertWithWhereUniqueWithoutStaffInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.StaffBankAccountUpdateWithoutStaffInput, Prisma.StaffBankAccountUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.StaffBankAccountCreateWithoutStaffInput, Prisma.StaffBankAccountUncheckedCreateWithoutStaffInput>
}

export type StaffBankAccountUpdateWithWhereUniqueWithoutStaffInput = {
  where: Prisma.StaffBankAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateWithoutStaffInput, Prisma.StaffBankAccountUncheckedUpdateWithoutStaffInput>
}

export type StaffBankAccountUpdateManyWithWhereWithoutStaffInput = {
  where: Prisma.StaffBankAccountScalarWhereInput
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateManyMutationInput, Prisma.StaffBankAccountUncheckedUpdateManyWithoutStaffInput>
}

export type StaffBankAccountCreateManySchoolInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  staffId: string
}

export type StaffBankAccountUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  staff?: Prisma.StaffUpdateOneRequiredWithoutBankAccountsNestedInput
}

export type StaffBankAccountUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountCreateManyStaffInput = {
  id?: string
  accountNumber: string
  bankName: string
  accountName: string
  schoolId: string
}

export type StaffBankAccountUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutStaffsBankAccountsNestedInput
}

export type StaffBankAccountUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StaffBankAccountUncheckedUpdateManyWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountNumber?: Prisma.StringFieldUpdateOperationsInput | string
  bankName?: Prisma.StringFieldUpdateOperationsInput | string
  accountName?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type StaffBankAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountNumber?: boolean
  bankName?: boolean
  accountName?: boolean
  schoolId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffBankAccount"]>

export type StaffBankAccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountNumber?: boolean
  bankName?: boolean
  accountName?: boolean
  schoolId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffBankAccount"]>

export type StaffBankAccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountNumber?: boolean
  bankName?: boolean
  accountName?: boolean
  schoolId?: boolean
  staffId?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffBankAccount"]>

export type StaffBankAccountSelectScalar = {
  id?: boolean
  accountNumber?: boolean
  bankName?: boolean
  accountName?: boolean
  schoolId?: boolean
  staffId?: boolean
}

export type StaffBankAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "accountNumber" | "bankName" | "accountName" | "schoolId" | "staffId", ExtArgs["result"]["staffBankAccount"]>
export type StaffBankAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type StaffBankAccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}
export type StaffBankAccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  staff?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
}

export type $StaffBankAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StaffBankAccount"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    staff: Prisma.$StaffPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    accountNumber: string
    bankName: string
    accountName: string
    schoolId: string
    staffId: string
  }, ExtArgs["result"]["staffBankAccount"]>
  composites: {}
}

export type StaffBankAccountGetPayload<S extends boolean | null | undefined | StaffBankAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload, S>

export type StaffBankAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StaffBankAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StaffBankAccountCountAggregateInputType | true
  }

export interface StaffBankAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffBankAccount'], meta: { name: 'StaffBankAccount' } }
  /**
   * Find zero or one StaffBankAccount that matches the filter.
   * @param {StaffBankAccountFindUniqueArgs} args - Arguments to find a StaffBankAccount
   * @example
   * // Get one StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffBankAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, StaffBankAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StaffBankAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffBankAccountFindUniqueOrThrowArgs} args - Arguments to find a StaffBankAccount
   * @example
   * // Get one StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffBankAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StaffBankAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffBankAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountFindFirstArgs} args - Arguments to find a StaffBankAccount
   * @example
   * // Get one StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffBankAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffBankAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountFindFirstOrThrowArgs} args - Arguments to find a StaffBankAccount
   * @example
   * // Get one StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffBankAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StaffBankAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffBankAccounts
   * const staffBankAccounts = await prisma.staffBankAccount.findMany()
   * 
   * // Get first 10 StaffBankAccounts
   * const staffBankAccounts = await prisma.staffBankAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const staffBankAccountWithIdOnly = await prisma.staffBankAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StaffBankAccountFindManyArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StaffBankAccount.
   * @param {StaffBankAccountCreateArgs} args - Arguments to create a StaffBankAccount.
   * @example
   * // Create one StaffBankAccount
   * const StaffBankAccount = await prisma.staffBankAccount.create({
   *   data: {
   *     // ... data to create a StaffBankAccount
   *   }
   * })
   * 
   */
  create<T extends StaffBankAccountCreateArgs>(args: Prisma.SelectSubset<T, StaffBankAccountCreateArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StaffBankAccounts.
   * @param {StaffBankAccountCreateManyArgs} args - Arguments to create many StaffBankAccounts.
   * @example
   * // Create many StaffBankAccounts
   * const staffBankAccount = await prisma.staffBankAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StaffBankAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StaffBankAccounts and returns the data saved in the database.
   * @param {StaffBankAccountCreateManyAndReturnArgs} args - Arguments to create many StaffBankAccounts.
   * @example
   * // Create many StaffBankAccounts
   * const staffBankAccount = await prisma.staffBankAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StaffBankAccounts and only return the `id`
   * const staffBankAccountWithIdOnly = await prisma.staffBankAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StaffBankAccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StaffBankAccount.
   * @param {StaffBankAccountDeleteArgs} args - Arguments to delete one StaffBankAccount.
   * @example
   * // Delete one StaffBankAccount
   * const StaffBankAccount = await prisma.staffBankAccount.delete({
   *   where: {
   *     // ... filter to delete one StaffBankAccount
   *   }
   * })
   * 
   */
  delete<T extends StaffBankAccountDeleteArgs>(args: Prisma.SelectSubset<T, StaffBankAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StaffBankAccount.
   * @param {StaffBankAccountUpdateArgs} args - Arguments to update one StaffBankAccount.
   * @example
   * // Update one StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StaffBankAccountUpdateArgs>(args: Prisma.SelectSubset<T, StaffBankAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StaffBankAccounts.
   * @param {StaffBankAccountDeleteManyArgs} args - Arguments to filter StaffBankAccounts to delete.
   * @example
   * // Delete a few StaffBankAccounts
   * const { count } = await prisma.staffBankAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StaffBankAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, StaffBankAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffBankAccounts
   * const staffBankAccount = await prisma.staffBankAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StaffBankAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, StaffBankAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffBankAccounts and returns the data updated in the database.
   * @param {StaffBankAccountUpdateManyAndReturnArgs} args - Arguments to update many StaffBankAccounts.
   * @example
   * // Update many StaffBankAccounts
   * const staffBankAccount = await prisma.staffBankAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StaffBankAccounts and only return the `id`
   * const staffBankAccountWithIdOnly = await prisma.staffBankAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StaffBankAccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StaffBankAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StaffBankAccount.
   * @param {StaffBankAccountUpsertArgs} args - Arguments to update or create a StaffBankAccount.
   * @example
   * // Update or create a StaffBankAccount
   * const staffBankAccount = await prisma.staffBankAccount.upsert({
   *   create: {
   *     // ... data to create a StaffBankAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffBankAccount we want to update
   *   }
   * })
   */
  upsert<T extends StaffBankAccountUpsertArgs>(args: Prisma.SelectSubset<T, StaffBankAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__StaffBankAccountClient<runtime.Types.Result.GetResult<Prisma.$StaffBankAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StaffBankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountCountArgs} args - Arguments to filter StaffBankAccounts to count.
   * @example
   * // Count the number of StaffBankAccounts
   * const count = await prisma.staffBankAccount.count({
   *   where: {
   *     // ... the filter for the StaffBankAccounts we want to count
   *   }
   * })
  **/
  count<T extends StaffBankAccountCountArgs>(
    args?: Prisma.Subset<T, StaffBankAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StaffBankAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StaffBankAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StaffBankAccountAggregateArgs>(args: Prisma.Subset<T, StaffBankAccountAggregateArgs>): Prisma.PrismaPromise<GetStaffBankAccountAggregateType<T>>

  /**
   * Group by StaffBankAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffBankAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StaffBankAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffBankAccountGroupByArgs['orderBy'] }
      : { orderBy?: StaffBankAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StaffBankAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffBankAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StaffBankAccount model
 */
readonly fields: StaffBankAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffBankAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffBankAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  staff<T extends Prisma.StaffDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StaffDefaultArgs<ExtArgs>>): Prisma.Prisma__StaffClient<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StaffBankAccount model
 */
export interface StaffBankAccountFieldRefs {
  readonly id: Prisma.FieldRef<"StaffBankAccount", 'String'>
  readonly accountNumber: Prisma.FieldRef<"StaffBankAccount", 'String'>
  readonly bankName: Prisma.FieldRef<"StaffBankAccount", 'String'>
  readonly accountName: Prisma.FieldRef<"StaffBankAccount", 'String'>
  readonly schoolId: Prisma.FieldRef<"StaffBankAccount", 'String'>
  readonly staffId: Prisma.FieldRef<"StaffBankAccount", 'String'>
}
    

// Custom InputTypes
/**
 * StaffBankAccount findUnique
 */
export type StaffBankAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter, which StaffBankAccount to fetch.
   */
  where: Prisma.StaffBankAccountWhereUniqueInput
}

/**
 * StaffBankAccount findUniqueOrThrow
 */
export type StaffBankAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter, which StaffBankAccount to fetch.
   */
  where: Prisma.StaffBankAccountWhereUniqueInput
}

/**
 * StaffBankAccount findFirst
 */
export type StaffBankAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter, which StaffBankAccount to fetch.
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffBankAccounts to fetch.
   */
  orderBy?: Prisma.StaffBankAccountOrderByWithRelationInput | Prisma.StaffBankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffBankAccounts.
   */
  cursor?: Prisma.StaffBankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffBankAccounts.
   */
  distinct?: Prisma.StaffBankAccountScalarFieldEnum | Prisma.StaffBankAccountScalarFieldEnum[]
}

/**
 * StaffBankAccount findFirstOrThrow
 */
export type StaffBankAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter, which StaffBankAccount to fetch.
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffBankAccounts to fetch.
   */
  orderBy?: Prisma.StaffBankAccountOrderByWithRelationInput | Prisma.StaffBankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffBankAccounts.
   */
  cursor?: Prisma.StaffBankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffBankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffBankAccounts.
   */
  distinct?: Prisma.StaffBankAccountScalarFieldEnum | Prisma.StaffBankAccountScalarFieldEnum[]
}

/**
 * StaffBankAccount findMany
 */
export type StaffBankAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter, which StaffBankAccounts to fetch.
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffBankAccounts to fetch.
   */
  orderBy?: Prisma.StaffBankAccountOrderByWithRelationInput | Prisma.StaffBankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StaffBankAccounts.
   */
  cursor?: Prisma.StaffBankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffBankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffBankAccounts.
   */
  skip?: number
  distinct?: Prisma.StaffBankAccountScalarFieldEnum | Prisma.StaffBankAccountScalarFieldEnum[]
}

/**
 * StaffBankAccount create
 */
export type StaffBankAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a StaffBankAccount.
   */
  data: Prisma.XOR<Prisma.StaffBankAccountCreateInput, Prisma.StaffBankAccountUncheckedCreateInput>
}

/**
 * StaffBankAccount createMany
 */
export type StaffBankAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StaffBankAccounts.
   */
  data: Prisma.StaffBankAccountCreateManyInput | Prisma.StaffBankAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffBankAccount createManyAndReturn
 */
export type StaffBankAccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * The data used to create many StaffBankAccounts.
   */
  data: Prisma.StaffBankAccountCreateManyInput | Prisma.StaffBankAccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StaffBankAccount update
 */
export type StaffBankAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a StaffBankAccount.
   */
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateInput, Prisma.StaffBankAccountUncheckedUpdateInput>
  /**
   * Choose, which StaffBankAccount to update.
   */
  where: Prisma.StaffBankAccountWhereUniqueInput
}

/**
 * StaffBankAccount updateMany
 */
export type StaffBankAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StaffBankAccounts.
   */
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateManyMutationInput, Prisma.StaffBankAccountUncheckedUpdateManyInput>
  /**
   * Filter which StaffBankAccounts to update
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * Limit how many StaffBankAccounts to update.
   */
  limit?: number
}

/**
 * StaffBankAccount updateManyAndReturn
 */
export type StaffBankAccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * The data used to update StaffBankAccounts.
   */
  data: Prisma.XOR<Prisma.StaffBankAccountUpdateManyMutationInput, Prisma.StaffBankAccountUncheckedUpdateManyInput>
  /**
   * Filter which StaffBankAccounts to update
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * Limit how many StaffBankAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StaffBankAccount upsert
 */
export type StaffBankAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the StaffBankAccount to update in case it exists.
   */
  where: Prisma.StaffBankAccountWhereUniqueInput
  /**
   * In case the StaffBankAccount found by the `where` argument doesn't exist, create a new StaffBankAccount with this data.
   */
  create: Prisma.XOR<Prisma.StaffBankAccountCreateInput, Prisma.StaffBankAccountUncheckedCreateInput>
  /**
   * In case the StaffBankAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StaffBankAccountUpdateInput, Prisma.StaffBankAccountUncheckedUpdateInput>
}

/**
 * StaffBankAccount delete
 */
export type StaffBankAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
  /**
   * Filter which StaffBankAccount to delete.
   */
  where: Prisma.StaffBankAccountWhereUniqueInput
}

/**
 * StaffBankAccount deleteMany
 */
export type StaffBankAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffBankAccounts to delete
   */
  where?: Prisma.StaffBankAccountWhereInput
  /**
   * Limit how many StaffBankAccounts to delete.
   */
  limit?: number
}

/**
 * StaffBankAccount without action
 */
export type StaffBankAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffBankAccount
   */
  select?: Prisma.StaffBankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffBankAccount
   */
  omit?: Prisma.StaffBankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffBankAccountInclude<ExtArgs> | null
}
