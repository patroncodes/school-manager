
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TeacherSubjectAssignment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeacherSubjectAssignment
 * 
 */
export type TeacherSubjectAssignmentModel = runtime.Types.Result.DefaultSelection<Prisma.$TeacherSubjectAssignmentPayload>

export type AggregateTeacherSubjectAssignment = {
  _count: TeacherSubjectAssignmentCountAggregateOutputType | null
  _min: TeacherSubjectAssignmentMinAggregateOutputType | null
  _max: TeacherSubjectAssignmentMaxAggregateOutputType | null
}

export type TeacherSubjectAssignmentMinAggregateOutputType = {
  id: string | null
  schoolId: string | null
  teacherId: string | null
  subjectId: string | null
  gradeId: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeacherSubjectAssignmentMaxAggregateOutputType = {
  id: string | null
  schoolId: string | null
  teacherId: string | null
  subjectId: string | null
  gradeId: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeacherSubjectAssignmentCountAggregateOutputType = {
  id: number
  schoolId: number
  teacherId: number
  subjectId: number
  gradeId: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TeacherSubjectAssignmentMinAggregateInputType = {
  id?: true
  schoolId?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type TeacherSubjectAssignmentMaxAggregateInputType = {
  id?: true
  schoolId?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type TeacherSubjectAssignmentCountAggregateInputType = {
  id?: true
  schoolId?: true
  teacherId?: true
  subjectId?: true
  gradeId?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TeacherSubjectAssignmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherSubjectAssignment to aggregate.
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherSubjectAssignments to fetch.
   */
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithRelationInput | Prisma.TeacherSubjectAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherSubjectAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherSubjectAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeacherSubjectAssignments
  **/
  _count?: true | TeacherSubjectAssignmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeacherSubjectAssignmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeacherSubjectAssignmentMaxAggregateInputType
}

export type GetTeacherSubjectAssignmentAggregateType<T extends TeacherSubjectAssignmentAggregateArgs> = {
      [P in keyof T & keyof AggregateTeacherSubjectAssignment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeacherSubjectAssignment[P]>
    : Prisma.GetScalarType<T[P], AggregateTeacherSubjectAssignment[P]>
}




export type TeacherSubjectAssignmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithAggregationInput | Prisma.TeacherSubjectAssignmentOrderByWithAggregationInput[]
  by: Prisma.TeacherSubjectAssignmentScalarFieldEnum[] | Prisma.TeacherSubjectAssignmentScalarFieldEnum
  having?: Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeacherSubjectAssignmentCountAggregateInputType | true
  _min?: TeacherSubjectAssignmentMinAggregateInputType
  _max?: TeacherSubjectAssignmentMaxAggregateInputType
}

export type TeacherSubjectAssignmentGroupByOutputType = {
  id: string
  schoolId: string
  teacherId: string
  subjectId: string
  gradeId: string | null
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: TeacherSubjectAssignmentCountAggregateOutputType | null
  _min: TeacherSubjectAssignmentMinAggregateOutputType | null
  _max: TeacherSubjectAssignmentMaxAggregateOutputType | null
}

type GetTeacherSubjectAssignmentGroupByPayload<T extends TeacherSubjectAssignmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeacherSubjectAssignmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeacherSubjectAssignmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeacherSubjectAssignmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeacherSubjectAssignmentGroupByOutputType[P]>
      }
    >
  >



export type TeacherSubjectAssignmentWhereInput = {
  AND?: Prisma.TeacherSubjectAssignmentWhereInput | Prisma.TeacherSubjectAssignmentWhereInput[]
  OR?: Prisma.TeacherSubjectAssignmentWhereInput[]
  NOT?: Prisma.TeacherSubjectAssignmentWhereInput | Prisma.TeacherSubjectAssignmentWhereInput[]
  id?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  schoolId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  teacherId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  gradeId?: Prisma.StringNullableFilter<"TeacherSubjectAssignment"> | string | null
  isActive?: Prisma.BoolFilter<"TeacherSubjectAssignment"> | boolean
  createdAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  teacher?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  grade?: Prisma.XOR<Prisma.GradeNullableScalarRelationFilter, Prisma.GradeWhereInput> | null
}

export type TeacherSubjectAssignmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
  teacher?: Prisma.StaffOrderByWithRelationInput
  subject?: Prisma.SubjectOrderByWithRelationInput
  grade?: Prisma.GradeOrderByWithRelationInput
}

export type TeacherSubjectAssignmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  schoolId_teacherId_subjectId_gradeId?: Prisma.TeacherSubjectAssignmentSchoolIdTeacherIdSubjectIdGradeIdCompoundUniqueInput
  AND?: Prisma.TeacherSubjectAssignmentWhereInput | Prisma.TeacherSubjectAssignmentWhereInput[]
  OR?: Prisma.TeacherSubjectAssignmentWhereInput[]
  NOT?: Prisma.TeacherSubjectAssignmentWhereInput | Prisma.TeacherSubjectAssignmentWhereInput[]
  schoolId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  teacherId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  gradeId?: Prisma.StringNullableFilter<"TeacherSubjectAssignment"> | string | null
  isActive?: Prisma.BoolFilter<"TeacherSubjectAssignment"> | boolean
  createdAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  teacher?: Prisma.XOR<Prisma.StaffScalarRelationFilter, Prisma.StaffWhereInput>
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>
  grade?: Prisma.XOR<Prisma.GradeNullableScalarRelationFilter, Prisma.GradeWhereInput> | null
}, "id" | "schoolId_teacherId_subjectId_gradeId">

export type TeacherSubjectAssignmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TeacherSubjectAssignmentCountOrderByAggregateInput
  _max?: Prisma.TeacherSubjectAssignmentMaxOrderByAggregateInput
  _min?: Prisma.TeacherSubjectAssignmentMinOrderByAggregateInput
}

export type TeacherSubjectAssignmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput | Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput | Prisma.TeacherSubjectAssignmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeacherSubjectAssignment"> | string
  schoolId?: Prisma.StringWithAggregatesFilter<"TeacherSubjectAssignment"> | string
  teacherId?: Prisma.StringWithAggregatesFilter<"TeacherSubjectAssignment"> | string
  subjectId?: Prisma.StringWithAggregatesFilter<"TeacherSubjectAssignment"> | string
  gradeId?: Prisma.StringNullableWithAggregatesFilter<"TeacherSubjectAssignment"> | string | null
  isActive?: Prisma.BoolWithAggregatesFilter<"TeacherSubjectAssignment"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TeacherSubjectAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TeacherSubjectAssignment"> | Date | string
}

export type TeacherSubjectAssignmentCreateInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  teacher: Prisma.StaffCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  grade?: Prisma.GradeCreateNestedOneWithoutTeacherSubjectAssignmentsInput
}

export type TeacherSubjectAssignmentUncheckedCreateInput = {
  id?: string
  schoolId: string
  teacherId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneWithoutTeacherSubjectAssignmentsNestedInput
}

export type TeacherSubjectAssignmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentCreateManyInput = {
  id?: string
  schoolId: string
  teacherId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentListRelationFilter = {
  every?: Prisma.TeacherSubjectAssignmentWhereInput
  some?: Prisma.TeacherSubjectAssignmentWhereInput
  none?: Prisma.TeacherSubjectAssignmentWhereInput
}

export type TeacherSubjectAssignmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeacherSubjectAssignmentSchoolIdTeacherIdSubjectIdGradeIdCompoundUniqueInput = {
  schoolId: string
  teacherId: string
  subjectId: string
  gradeId: string
}

export type TeacherSubjectAssignmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeacherSubjectAssignmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeacherSubjectAssignmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  subjectId?: Prisma.SortOrder
  gradeId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeacherSubjectAssignmentCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySchoolInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySchoolInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySchoolInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSchoolInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentCreateNestedManyWithoutGradeInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyGradeInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutGradeInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyGradeInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUpdateManyWithoutGradeNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutGradeInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyGradeInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutGradeInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutGradeInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput> | Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutGradeInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyGradeInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutGradeInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutGradeInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutGradeInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySubjectInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput> | Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManySubjectInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSubjectInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutSubjectInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyTeacherInputEnvelope
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
}

export type TeacherSubjectAssignmentUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput> | Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput[] | Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput[]
  connectOrCreate?: Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput | Prisma.TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput[]
  upsert?: Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
  createMany?: Prisma.TeacherSubjectAssignmentCreateManyTeacherInputEnvelope
  set?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  disconnect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  delete?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  connect?: Prisma.TeacherSubjectAssignmentWhereUniqueInput | Prisma.TeacherSubjectAssignmentWhereUniqueInput[]
  update?: Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
  updateMany?: Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutTeacherInput | Prisma.TeacherSubjectAssignmentUpdateManyWithWhereWithoutTeacherInput[]
  deleteMany?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
}

export type TeacherSubjectAssignmentCreateWithoutSchoolInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  teacher: Prisma.StaffCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  grade?: Prisma.GradeCreateNestedOneWithoutTeacherSubjectAssignmentsInput
}

export type TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentCreateOrConnectWithoutSchoolInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput>
}

export type TeacherSubjectAssignmentCreateManySchoolInputEnvelope = {
  data: Prisma.TeacherSubjectAssignmentCreateManySchoolInput | Prisma.TeacherSubjectAssignmentCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSchoolInput>
}

export type TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutSchoolInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutSchoolInput>
}

export type TeacherSubjectAssignmentUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.TeacherSubjectAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutSchoolInput>
}

export type TeacherSubjectAssignmentScalarWhereInput = {
  AND?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
  OR?: Prisma.TeacherSubjectAssignmentScalarWhereInput[]
  NOT?: Prisma.TeacherSubjectAssignmentScalarWhereInput | Prisma.TeacherSubjectAssignmentScalarWhereInput[]
  id?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  schoolId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  teacherId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  subjectId?: Prisma.StringFilter<"TeacherSubjectAssignment"> | string
  gradeId?: Prisma.StringNullableFilter<"TeacherSubjectAssignment"> | string | null
  isActive?: Prisma.BoolFilter<"TeacherSubjectAssignment"> | boolean
  createdAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeacherSubjectAssignment"> | Date | string
}

export type TeacherSubjectAssignmentCreateWithoutGradeInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  teacher: Prisma.StaffCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeacherSubjectAssignmentsInput
}

export type TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput = {
  id?: string
  schoolId: string
  teacherId: string
  subjectId: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentCreateOrConnectWithoutGradeInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput>
}

export type TeacherSubjectAssignmentCreateManyGradeInputEnvelope = {
  data: Prisma.TeacherSubjectAssignmentCreateManyGradeInput | Prisma.TeacherSubjectAssignmentCreateManyGradeInput[]
  skipDuplicates?: boolean
}

export type TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutGradeInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutGradeInput>
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutGradeInput>
}

export type TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutGradeInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutGradeInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutGradeInput>
}

export type TeacherSubjectAssignmentUpdateManyWithWhereWithoutGradeInput = {
  where: Prisma.TeacherSubjectAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeInput>
}

export type TeacherSubjectAssignmentCreateWithoutSubjectInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  teacher: Prisma.StaffCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  grade?: Prisma.GradeCreateNestedOneWithoutTeacherSubjectAssignmentsInput
}

export type TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput = {
  id?: string
  schoolId: string
  teacherId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentCreateOrConnectWithoutSubjectInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TeacherSubjectAssignmentCreateManySubjectInputEnvelope = {
  data: Prisma.TeacherSubjectAssignmentCreateManySubjectInput | Prisma.TeacherSubjectAssignmentCreateManySubjectInput[]
  skipDuplicates?: boolean
}

export type TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutSubjectInput>
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutSubjectInput>
}

export type TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutSubjectInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutSubjectInput>
}

export type TeacherSubjectAssignmentUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.TeacherSubjectAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutSubjectInput>
}

export type TeacherSubjectAssignmentCreateWithoutTeacherInput = {
  id?: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  school: Prisma.SchoolCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  subject: Prisma.SubjectCreateNestedOneWithoutTeacherSubjectAssignmentsInput
  grade?: Prisma.GradeCreateNestedOneWithoutTeacherSubjectAssignmentsInput
}

export type TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput = {
  id?: string
  schoolId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentCreateOrConnectWithoutTeacherInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TeacherSubjectAssignmentCreateManyTeacherInputEnvelope = {
  data: Prisma.TeacherSubjectAssignmentCreateManyTeacherInput | Prisma.TeacherSubjectAssignmentCreateManyTeacherInput[]
  skipDuplicates?: boolean
}

export type TeacherSubjectAssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  update: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutTeacherInput>
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedCreateWithoutTeacherInput>
}

export type TeacherSubjectAssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateWithoutTeacherInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateWithoutTeacherInput>
}

export type TeacherSubjectAssignmentUpdateManyWithWhereWithoutTeacherInput = {
  where: Prisma.TeacherSubjectAssignmentScalarWhereInput
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyWithoutTeacherInput>
}

export type TeacherSubjectAssignmentCreateManySchoolInput = {
  id?: string
  teacherId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  teacher?: Prisma.StaffUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneWithoutTeacherSubjectAssignmentsNestedInput
}

export type TeacherSubjectAssignmentUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentCreateManyGradeInput = {
  id?: string
  schoolId: string
  teacherId: string
  subjectId: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
}

export type TeacherSubjectAssignmentUncheckedUpdateWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutGradeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentCreateManySubjectInput = {
  id?: string
  schoolId: string
  teacherId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  teacher?: Prisma.StaffUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneWithoutTeacherSubjectAssignmentsNestedInput
}

export type TeacherSubjectAssignmentUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentCreateManyTeacherInput = {
  id?: string
  schoolId: string
  subjectId: string
  gradeId?: string | null
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeacherSubjectAssignmentUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  subject?: Prisma.SubjectUpdateOneRequiredWithoutTeacherSubjectAssignmentsNestedInput
  grade?: Prisma.GradeUpdateOneWithoutTeacherSubjectAssignmentsNestedInput
}

export type TeacherSubjectAssignmentUncheckedUpdateWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherSubjectAssignmentUncheckedUpdateManyWithoutTeacherInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string
  gradeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TeacherSubjectAssignmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}, ExtArgs["result"]["teacherSubjectAssignment"]>

export type TeacherSubjectAssignmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}, ExtArgs["result"]["teacherSubjectAssignment"]>

export type TeacherSubjectAssignmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}, ExtArgs["result"]["teacherSubjectAssignment"]>

export type TeacherSubjectAssignmentSelectScalar = {
  id?: boolean
  schoolId?: boolean
  teacherId?: boolean
  subjectId?: boolean
  gradeId?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TeacherSubjectAssignmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "schoolId" | "teacherId" | "subjectId" | "gradeId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["teacherSubjectAssignment"]>
export type TeacherSubjectAssignmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}
export type TeacherSubjectAssignmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}
export type TeacherSubjectAssignmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  teacher?: boolean | Prisma.StaffDefaultArgs<ExtArgs>
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>
  grade?: boolean | Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>
}

export type $TeacherSubjectAssignmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeacherSubjectAssignment"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
    teacher: Prisma.$StaffPayload<ExtArgs>
    subject: Prisma.$SubjectPayload<ExtArgs>
    grade: Prisma.$GradePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    schoolId: string
    teacherId: string
    subjectId: string
    gradeId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["teacherSubjectAssignment"]>
  composites: {}
}

export type TeacherSubjectAssignmentGetPayload<S extends boolean | null | undefined | TeacherSubjectAssignmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload, S>

export type TeacherSubjectAssignmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeacherSubjectAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeacherSubjectAssignmentCountAggregateInputType | true
  }

export interface TeacherSubjectAssignmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherSubjectAssignment'], meta: { name: 'TeacherSubjectAssignment' } }
  /**
   * Find zero or one TeacherSubjectAssignment that matches the filter.
   * @param {TeacherSubjectAssignmentFindUniqueArgs} args - Arguments to find a TeacherSubjectAssignment
   * @example
   * // Get one TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeacherSubjectAssignmentFindUniqueArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeacherSubjectAssignment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeacherSubjectAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TeacherSubjectAssignment
   * @example
   * // Get one TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeacherSubjectAssignmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherSubjectAssignment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentFindFirstArgs} args - Arguments to find a TeacherSubjectAssignment
   * @example
   * // Get one TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeacherSubjectAssignmentFindFirstArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherSubjectAssignment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentFindFirstOrThrowArgs} args - Arguments to find a TeacherSubjectAssignment
   * @example
   * // Get one TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeacherSubjectAssignmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeacherSubjectAssignments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeacherSubjectAssignments
   * const teacherSubjectAssignments = await prisma.teacherSubjectAssignment.findMany()
   * 
   * // Get first 10 TeacherSubjectAssignments
   * const teacherSubjectAssignments = await prisma.teacherSubjectAssignment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teacherSubjectAssignmentWithIdOnly = await prisma.teacherSubjectAssignment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeacherSubjectAssignmentFindManyArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeacherSubjectAssignment.
   * @param {TeacherSubjectAssignmentCreateArgs} args - Arguments to create a TeacherSubjectAssignment.
   * @example
   * // Create one TeacherSubjectAssignment
   * const TeacherSubjectAssignment = await prisma.teacherSubjectAssignment.create({
   *   data: {
   *     // ... data to create a TeacherSubjectAssignment
   *   }
   * })
   * 
   */
  create<T extends TeacherSubjectAssignmentCreateArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentCreateArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeacherSubjectAssignments.
   * @param {TeacherSubjectAssignmentCreateManyArgs} args - Arguments to create many TeacherSubjectAssignments.
   * @example
   * // Create many TeacherSubjectAssignments
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeacherSubjectAssignmentCreateManyArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeacherSubjectAssignments and returns the data saved in the database.
   * @param {TeacherSubjectAssignmentCreateManyAndReturnArgs} args - Arguments to create many TeacherSubjectAssignments.
   * @example
   * // Create many TeacherSubjectAssignments
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeacherSubjectAssignments and only return the `id`
   * const teacherSubjectAssignmentWithIdOnly = await prisma.teacherSubjectAssignment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeacherSubjectAssignmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeacherSubjectAssignment.
   * @param {TeacherSubjectAssignmentDeleteArgs} args - Arguments to delete one TeacherSubjectAssignment.
   * @example
   * // Delete one TeacherSubjectAssignment
   * const TeacherSubjectAssignment = await prisma.teacherSubjectAssignment.delete({
   *   where: {
   *     // ... filter to delete one TeacherSubjectAssignment
   *   }
   * })
   * 
   */
  delete<T extends TeacherSubjectAssignmentDeleteArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentDeleteArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeacherSubjectAssignment.
   * @param {TeacherSubjectAssignmentUpdateArgs} args - Arguments to update one TeacherSubjectAssignment.
   * @example
   * // Update one TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeacherSubjectAssignmentUpdateArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentUpdateArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeacherSubjectAssignments.
   * @param {TeacherSubjectAssignmentDeleteManyArgs} args - Arguments to filter TeacherSubjectAssignments to delete.
   * @example
   * // Delete a few TeacherSubjectAssignments
   * const { count } = await prisma.teacherSubjectAssignment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeacherSubjectAssignmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeacherSubjectAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherSubjectAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeacherSubjectAssignments
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeacherSubjectAssignmentUpdateManyArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherSubjectAssignments and returns the data updated in the database.
   * @param {TeacherSubjectAssignmentUpdateManyAndReturnArgs} args - Arguments to update many TeacherSubjectAssignments.
   * @example
   * // Update many TeacherSubjectAssignments
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeacherSubjectAssignments and only return the `id`
   * const teacherSubjectAssignmentWithIdOnly = await prisma.teacherSubjectAssignment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeacherSubjectAssignmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeacherSubjectAssignment.
   * @param {TeacherSubjectAssignmentUpsertArgs} args - Arguments to update or create a TeacherSubjectAssignment.
   * @example
   * // Update or create a TeacherSubjectAssignment
   * const teacherSubjectAssignment = await prisma.teacherSubjectAssignment.upsert({
   *   create: {
   *     // ... data to create a TeacherSubjectAssignment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeacherSubjectAssignment we want to update
   *   }
   * })
   */
  upsert<T extends TeacherSubjectAssignmentUpsertArgs>(args: Prisma.SelectSubset<T, TeacherSubjectAssignmentUpsertArgs<ExtArgs>>): Prisma.Prisma__TeacherSubjectAssignmentClient<runtime.Types.Result.GetResult<Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeacherSubjectAssignments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentCountArgs} args - Arguments to filter TeacherSubjectAssignments to count.
   * @example
   * // Count the number of TeacherSubjectAssignments
   * const count = await prisma.teacherSubjectAssignment.count({
   *   where: {
   *     // ... the filter for the TeacherSubjectAssignments we want to count
   *   }
   * })
  **/
  count<T extends TeacherSubjectAssignmentCountArgs>(
    args?: Prisma.Subset<T, TeacherSubjectAssignmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeacherSubjectAssignmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeacherSubjectAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeacherSubjectAssignmentAggregateArgs>(args: Prisma.Subset<T, TeacherSubjectAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTeacherSubjectAssignmentAggregateType<T>>

  /**
   * Group by TeacherSubjectAssignment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherSubjectAssignmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeacherSubjectAssignmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeacherSubjectAssignmentGroupByArgs['orderBy'] }
      : { orderBy?: TeacherSubjectAssignmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeacherSubjectAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherSubjectAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeacherSubjectAssignment model
 */
readonly fields: TeacherSubjectAssignmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeacherSubjectAssignment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeacherSubjectAssignmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  teacher<T extends Prisma.StaffDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StaffDefaultArgs<ExtArgs>>): Prisma.Prisma__StaffClient<runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>): Prisma.Prisma__SubjectClient<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  grade<T extends Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeacherSubjectAssignment$gradeArgs<ExtArgs>>): Prisma.Prisma__GradeClient<runtime.Types.Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeacherSubjectAssignment model
 */
export interface TeacherSubjectAssignmentFieldRefs {
  readonly id: Prisma.FieldRef<"TeacherSubjectAssignment", 'String'>
  readonly schoolId: Prisma.FieldRef<"TeacherSubjectAssignment", 'String'>
  readonly teacherId: Prisma.FieldRef<"TeacherSubjectAssignment", 'String'>
  readonly subjectId: Prisma.FieldRef<"TeacherSubjectAssignment", 'String'>
  readonly gradeId: Prisma.FieldRef<"TeacherSubjectAssignment", 'String'>
  readonly isActive: Prisma.FieldRef<"TeacherSubjectAssignment", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"TeacherSubjectAssignment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TeacherSubjectAssignment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TeacherSubjectAssignment findUnique
 */
export type TeacherSubjectAssignmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeacherSubjectAssignment to fetch.
   */
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
}

/**
 * TeacherSubjectAssignment findUniqueOrThrow
 */
export type TeacherSubjectAssignmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeacherSubjectAssignment to fetch.
   */
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
}

/**
 * TeacherSubjectAssignment findFirst
 */
export type TeacherSubjectAssignmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeacherSubjectAssignment to fetch.
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherSubjectAssignments to fetch.
   */
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithRelationInput | Prisma.TeacherSubjectAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherSubjectAssignments.
   */
  cursor?: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherSubjectAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherSubjectAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherSubjectAssignments.
   */
  distinct?: Prisma.TeacherSubjectAssignmentScalarFieldEnum | Prisma.TeacherSubjectAssignmentScalarFieldEnum[]
}

/**
 * TeacherSubjectAssignment findFirstOrThrow
 */
export type TeacherSubjectAssignmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeacherSubjectAssignment to fetch.
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherSubjectAssignments to fetch.
   */
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithRelationInput | Prisma.TeacherSubjectAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherSubjectAssignments.
   */
  cursor?: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherSubjectAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherSubjectAssignments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherSubjectAssignments.
   */
  distinct?: Prisma.TeacherSubjectAssignmentScalarFieldEnum | Prisma.TeacherSubjectAssignmentScalarFieldEnum[]
}

/**
 * TeacherSubjectAssignment findMany
 */
export type TeacherSubjectAssignmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter, which TeacherSubjectAssignments to fetch.
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherSubjectAssignments to fetch.
   */
  orderBy?: Prisma.TeacherSubjectAssignmentOrderByWithRelationInput | Prisma.TeacherSubjectAssignmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeacherSubjectAssignments.
   */
  cursor?: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherSubjectAssignments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherSubjectAssignments.
   */
  skip?: number
  distinct?: Prisma.TeacherSubjectAssignmentScalarFieldEnum | Prisma.TeacherSubjectAssignmentScalarFieldEnum[]
}

/**
 * TeacherSubjectAssignment create
 */
export type TeacherSubjectAssignmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to create a TeacherSubjectAssignment.
   */
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateInput, Prisma.TeacherSubjectAssignmentUncheckedCreateInput>
}

/**
 * TeacherSubjectAssignment createMany
 */
export type TeacherSubjectAssignmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeacherSubjectAssignments.
   */
  data: Prisma.TeacherSubjectAssignmentCreateManyInput | Prisma.TeacherSubjectAssignmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeacherSubjectAssignment createManyAndReturn
 */
export type TeacherSubjectAssignmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * The data used to create many TeacherSubjectAssignments.
   */
  data: Prisma.TeacherSubjectAssignmentCreateManyInput | Prisma.TeacherSubjectAssignmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TeacherSubjectAssignment update
 */
export type TeacherSubjectAssignmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * The data needed to update a TeacherSubjectAssignment.
   */
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateInput>
  /**
   * Choose, which TeacherSubjectAssignment to update.
   */
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
}

/**
 * TeacherSubjectAssignment updateMany
 */
export type TeacherSubjectAssignmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeacherSubjectAssignments.
   */
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TeacherSubjectAssignments to update
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * Limit how many TeacherSubjectAssignments to update.
   */
  limit?: number
}

/**
 * TeacherSubjectAssignment updateManyAndReturn
 */
export type TeacherSubjectAssignmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * The data used to update TeacherSubjectAssignments.
   */
  data: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateManyMutationInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateManyInput>
  /**
   * Filter which TeacherSubjectAssignments to update
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * Limit how many TeacherSubjectAssignments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TeacherSubjectAssignment upsert
 */
export type TeacherSubjectAssignmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * The filter to search for the TeacherSubjectAssignment to update in case it exists.
   */
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
  /**
   * In case the TeacherSubjectAssignment found by the `where` argument doesn't exist, create a new TeacherSubjectAssignment with this data.
   */
  create: Prisma.XOR<Prisma.TeacherSubjectAssignmentCreateInput, Prisma.TeacherSubjectAssignmentUncheckedCreateInput>
  /**
   * In case the TeacherSubjectAssignment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeacherSubjectAssignmentUpdateInput, Prisma.TeacherSubjectAssignmentUncheckedUpdateInput>
}

/**
 * TeacherSubjectAssignment delete
 */
export type TeacherSubjectAssignmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
  /**
   * Filter which TeacherSubjectAssignment to delete.
   */
  where: Prisma.TeacherSubjectAssignmentWhereUniqueInput
}

/**
 * TeacherSubjectAssignment deleteMany
 */
export type TeacherSubjectAssignmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherSubjectAssignments to delete
   */
  where?: Prisma.TeacherSubjectAssignmentWhereInput
  /**
   * Limit how many TeacherSubjectAssignments to delete.
   */
  limit?: number
}

/**
 * TeacherSubjectAssignment.grade
 */
export type TeacherSubjectAssignment$gradeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Grade
   */
  select?: Prisma.GradeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Grade
   */
  omit?: Prisma.GradeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GradeInclude<ExtArgs> | null
  where?: Prisma.GradeWhereInput
}

/**
 * TeacherSubjectAssignment without action
 */
export type TeacherSubjectAssignmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherSubjectAssignment
   */
  select?: Prisma.TeacherSubjectAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherSubjectAssignment
   */
  omit?: Prisma.TeacherSubjectAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherSubjectAssignmentInclude<ExtArgs> | null
}
