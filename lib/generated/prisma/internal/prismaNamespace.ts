
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  AuditLog: 'AuditLog',
  School: 'School',
  Program: 'Program',
  AcademicYear: 'AcademicYear',
  Term: 'Term',
  Grade: 'Grade',
  Class: 'Class',
  Subject: 'Subject',
  TimetablePeriod: 'TimetablePeriod',
  PeriodSlot: 'PeriodSlot',
  TimetableAssignment: 'TimetableAssignment',
  Manager: 'Manager',
  Student: 'Student',
  Staff: 'Staff',
  Parent: 'Parent',
  ParentStudent: 'ParentStudent',
  Lesson: 'Lesson',
  Exam: 'Exam',
  Assignment: 'Assignment',
  StudentAttendance: 'StudentAttendance',
  StaffAttendance: 'StaffAttendance',
  Result: 'Result',
  TermlyResult: 'TermlyResult',
  Invoice: 'Invoice',
  InvoiceLine: 'InvoiceLine',
  InvoicePayment: 'InvoicePayment',
  SalaryPayment: 'SalaryPayment',
  StaffBankAccount: 'StaffBankAccount',
  Event: 'Event',
  Announcement: 'Announcement',
  StudentClassHistory: 'StudentClassHistory',
  TeacherSubjectAssignment: 'TeacherSubjectAssignment'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "auditLog" | "school" | "program" | "academicYear" | "term" | "grade" | "class" | "subject" | "timetablePeriod" | "periodSlot" | "timetableAssignment" | "manager" | "student" | "staff" | "parent" | "parentStudent" | "lesson" | "exam" | "assignment" | "studentAttendance" | "staffAttendance" | "result" | "termlyResult" | "invoice" | "invoiceLine" | "invoicePayment" | "salaryPayment" | "staffBankAccount" | "event" | "announcement" | "studentClassHistory" | "teacherSubjectAssignment"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    AuditLog: {
      payload: Prisma.$AuditLogPayload<ExtArgs>
      fields: Prisma.AuditLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        findFirst: {
          args: Prisma.AuditLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        findMany: {
          args: Prisma.AuditLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        create: {
          args: Prisma.AuditLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        createMany: {
          args: Prisma.AuditLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        delete: {
          args: Prisma.AuditLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        update: {
          args: Prisma.AuditLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        deleteMany: {
          args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        upsert: {
          args: Prisma.AuditLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        aggregate: {
          args: Prisma.AuditLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuditLog>
        }
        groupBy: {
          args: Prisma.AuditLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuditLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuditLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuditLogCountAggregateOutputType> | number
        }
      }
    }
    School: {
      payload: Prisma.$SchoolPayload<ExtArgs>
      fields: Prisma.SchoolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SchoolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        findFirst: {
          args: Prisma.SchoolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        findMany: {
          args: Prisma.SchoolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>[]
        }
        create: {
          args: Prisma.SchoolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        createMany: {
          args: Prisma.SchoolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SchoolCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>[]
        }
        delete: {
          args: Prisma.SchoolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        update: {
          args: Prisma.SchoolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        deleteMany: {
          args: Prisma.SchoolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SchoolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SchoolUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>[]
        }
        upsert: {
          args: Prisma.SchoolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchoolPayload>
        }
        aggregate: {
          args: Prisma.SchoolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSchool>
        }
        groupBy: {
          args: Prisma.SchoolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SchoolGroupByOutputType>[]
        }
        count: {
          args: Prisma.SchoolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SchoolCountAggregateOutputType> | number
        }
      }
    }
    Program: {
      payload: Prisma.$ProgramPayload<ExtArgs>
      fields: Prisma.ProgramFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProgramFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        findFirst: {
          args: Prisma.ProgramFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        findMany: {
          args: Prisma.ProgramFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        create: {
          args: Prisma.ProgramCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        createMany: {
          args: Prisma.ProgramCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProgramCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        delete: {
          args: Prisma.ProgramDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        update: {
          args: Prisma.ProgramUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        deleteMany: {
          args: Prisma.ProgramDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProgramUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProgramUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        upsert: {
          args: Prisma.ProgramUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        aggregate: {
          args: Prisma.ProgramAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProgram>
        }
        groupBy: {
          args: Prisma.ProgramGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgramGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProgramCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgramCountAggregateOutputType> | number
        }
      }
    }
    AcademicYear: {
      payload: Prisma.$AcademicYearPayload<ExtArgs>
      fields: Prisma.AcademicYearFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AcademicYearFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AcademicYearFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        findFirst: {
          args: Prisma.AcademicYearFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AcademicYearFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        findMany: {
          args: Prisma.AcademicYearFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        create: {
          args: Prisma.AcademicYearCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        createMany: {
          args: Prisma.AcademicYearCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AcademicYearCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        delete: {
          args: Prisma.AcademicYearDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        update: {
          args: Prisma.AcademicYearUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        deleteMany: {
          args: Prisma.AcademicYearDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AcademicYearUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AcademicYearUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>[]
        }
        upsert: {
          args: Prisma.AcademicYearUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AcademicYearPayload>
        }
        aggregate: {
          args: Prisma.AcademicYearAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAcademicYear>
        }
        groupBy: {
          args: Prisma.AcademicYearGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicYearGroupByOutputType>[]
        }
        count: {
          args: Prisma.AcademicYearCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AcademicYearCountAggregateOutputType> | number
        }
      }
    }
    Term: {
      payload: Prisma.$TermPayload<ExtArgs>
      fields: Prisma.TermFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TermFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        findFirst: {
          args: Prisma.TermFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        findMany: {
          args: Prisma.TermFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        create: {
          args: Prisma.TermCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        createMany: {
          args: Prisma.TermCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TermCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        delete: {
          args: Prisma.TermDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        update: {
          args: Prisma.TermUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        deleteMany: {
          args: Prisma.TermDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TermUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TermUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>[]
        }
        upsert: {
          args: Prisma.TermUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermPayload>
        }
        aggregate: {
          args: Prisma.TermAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTerm>
        }
        groupBy: {
          args: Prisma.TermGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermGroupByOutputType>[]
        }
        count: {
          args: Prisma.TermCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermCountAggregateOutputType> | number
        }
      }
    }
    Grade: {
      payload: Prisma.$GradePayload<ExtArgs>
      fields: Prisma.GradeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GradeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        findFirst: {
          args: Prisma.GradeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        findMany: {
          args: Prisma.GradeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        create: {
          args: Prisma.GradeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        createMany: {
          args: Prisma.GradeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        delete: {
          args: Prisma.GradeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        update: {
          args: Prisma.GradeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        deleteMany: {
          args: Prisma.GradeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GradeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GradeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>[]
        }
        upsert: {
          args: Prisma.GradeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GradePayload>
        }
        aggregate: {
          args: Prisma.GradeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGrade>
        }
        groupBy: {
          args: Prisma.GradeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GradeGroupByOutputType>[]
        }
        count: {
          args: Prisma.GradeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GradeCountAggregateOutputType> | number
        }
      }
    }
    Class: {
      payload: Prisma.$ClassPayload<ExtArgs>
      fields: Prisma.ClassFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClassFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        findFirst: {
          args: Prisma.ClassFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        findMany: {
          args: Prisma.ClassFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>[]
        }
        create: {
          args: Prisma.ClassCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        createMany: {
          args: Prisma.ClassCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>[]
        }
        delete: {
          args: Prisma.ClassDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        update: {
          args: Prisma.ClassUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        deleteMany: {
          args: Prisma.ClassDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClassUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>[]
        }
        upsert: {
          args: Prisma.ClassUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClassPayload>
        }
        aggregate: {
          args: Prisma.ClassAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClass>
        }
        groupBy: {
          args: Prisma.ClassGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClassGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClassCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClassCountAggregateOutputType> | number
        }
      }
    }
    Subject: {
      payload: Prisma.$SubjectPayload<ExtArgs>
      fields: Prisma.SubjectFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SubjectFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        findFirst: {
          args: Prisma.SubjectFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        findMany: {
          args: Prisma.SubjectFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        create: {
          args: Prisma.SubjectCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        createMany: {
          args: Prisma.SubjectCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        delete: {
          args: Prisma.SubjectDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        update: {
          args: Prisma.SubjectUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        deleteMany: {
          args: Prisma.SubjectDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SubjectUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>[]
        }
        upsert: {
          args: Prisma.SubjectUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SubjectPayload>
        }
        aggregate: {
          args: Prisma.SubjectAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSubject>
        }
        groupBy: {
          args: Prisma.SubjectGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubjectGroupByOutputType>[]
        }
        count: {
          args: Prisma.SubjectCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SubjectCountAggregateOutputType> | number
        }
      }
    }
    TimetablePeriod: {
      payload: Prisma.$TimetablePeriodPayload<ExtArgs>
      fields: Prisma.TimetablePeriodFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TimetablePeriodFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TimetablePeriodFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        findFirst: {
          args: Prisma.TimetablePeriodFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TimetablePeriodFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        findMany: {
          args: Prisma.TimetablePeriodFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>[]
        }
        create: {
          args: Prisma.TimetablePeriodCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        createMany: {
          args: Prisma.TimetablePeriodCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TimetablePeriodCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>[]
        }
        delete: {
          args: Prisma.TimetablePeriodDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        update: {
          args: Prisma.TimetablePeriodUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        deleteMany: {
          args: Prisma.TimetablePeriodDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TimetablePeriodUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TimetablePeriodUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>[]
        }
        upsert: {
          args: Prisma.TimetablePeriodUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetablePeriodPayload>
        }
        aggregate: {
          args: Prisma.TimetablePeriodAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTimetablePeriod>
        }
        groupBy: {
          args: Prisma.TimetablePeriodGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimetablePeriodGroupByOutputType>[]
        }
        count: {
          args: Prisma.TimetablePeriodCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimetablePeriodCountAggregateOutputType> | number
        }
      }
    }
    PeriodSlot: {
      payload: Prisma.$PeriodSlotPayload<ExtArgs>
      fields: Prisma.PeriodSlotFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PeriodSlotFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PeriodSlotFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        findFirst: {
          args: Prisma.PeriodSlotFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PeriodSlotFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        findMany: {
          args: Prisma.PeriodSlotFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>[]
        }
        create: {
          args: Prisma.PeriodSlotCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        createMany: {
          args: Prisma.PeriodSlotCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PeriodSlotCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>[]
        }
        delete: {
          args: Prisma.PeriodSlotDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        update: {
          args: Prisma.PeriodSlotUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        deleteMany: {
          args: Prisma.PeriodSlotDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PeriodSlotUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PeriodSlotUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>[]
        }
        upsert: {
          args: Prisma.PeriodSlotUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PeriodSlotPayload>
        }
        aggregate: {
          args: Prisma.PeriodSlotAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePeriodSlot>
        }
        groupBy: {
          args: Prisma.PeriodSlotGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeriodSlotGroupByOutputType>[]
        }
        count: {
          args: Prisma.PeriodSlotCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeriodSlotCountAggregateOutputType> | number
        }
      }
    }
    TimetableAssignment: {
      payload: Prisma.$TimetableAssignmentPayload<ExtArgs>
      fields: Prisma.TimetableAssignmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TimetableAssignmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TimetableAssignmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        findFirst: {
          args: Prisma.TimetableAssignmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TimetableAssignmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        findMany: {
          args: Prisma.TimetableAssignmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>[]
        }
        create: {
          args: Prisma.TimetableAssignmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        createMany: {
          args: Prisma.TimetableAssignmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TimetableAssignmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>[]
        }
        delete: {
          args: Prisma.TimetableAssignmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        update: {
          args: Prisma.TimetableAssignmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        deleteMany: {
          args: Prisma.TimetableAssignmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TimetableAssignmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TimetableAssignmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>[]
        }
        upsert: {
          args: Prisma.TimetableAssignmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimetableAssignmentPayload>
        }
        aggregate: {
          args: Prisma.TimetableAssignmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTimetableAssignment>
        }
        groupBy: {
          args: Prisma.TimetableAssignmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimetableAssignmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.TimetableAssignmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimetableAssignmentCountAggregateOutputType> | number
        }
      }
    }
    Manager: {
      payload: Prisma.$ManagerPayload<ExtArgs>
      fields: Prisma.ManagerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ManagerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ManagerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        findFirst: {
          args: Prisma.ManagerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ManagerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        findMany: {
          args: Prisma.ManagerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>[]
        }
        create: {
          args: Prisma.ManagerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        createMany: {
          args: Prisma.ManagerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ManagerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>[]
        }
        delete: {
          args: Prisma.ManagerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        update: {
          args: Prisma.ManagerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        deleteMany: {
          args: Prisma.ManagerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ManagerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ManagerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>[]
        }
        upsert: {
          args: Prisma.ManagerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagerPayload>
        }
        aggregate: {
          args: Prisma.ManagerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateManager>
        }
        groupBy: {
          args: Prisma.ManagerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagerGroupByOutputType>[]
        }
        count: {
          args: Prisma.ManagerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagerCountAggregateOutputType> | number
        }
      }
    }
    Student: {
      payload: Prisma.$StudentPayload<ExtArgs>
      fields: Prisma.StudentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        findFirst: {
          args: Prisma.StudentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        findMany: {
          args: Prisma.StudentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        create: {
          args: Prisma.StudentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        createMany: {
          args: Prisma.StudentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        delete: {
          args: Prisma.StudentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        update: {
          args: Prisma.StudentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        deleteMany: {
          args: Prisma.StudentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>[]
        }
        upsert: {
          args: Prisma.StudentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentPayload>
        }
        aggregate: {
          args: Prisma.StudentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudent>
        }
        groupBy: {
          args: Prisma.StudentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentCountAggregateOutputType> | number
        }
      }
    }
    Staff: {
      payload: Prisma.$StaffPayload<ExtArgs>
      fields: Prisma.StaffFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StaffFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        findFirst: {
          args: Prisma.StaffFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        findMany: {
          args: Prisma.StaffFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>[]
        }
        create: {
          args: Prisma.StaffCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        createMany: {
          args: Prisma.StaffCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>[]
        }
        delete: {
          args: Prisma.StaffDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        update: {
          args: Prisma.StaffUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        deleteMany: {
          args: Prisma.StaffDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StaffUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StaffUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>[]
        }
        upsert: {
          args: Prisma.StaffUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffPayload>
        }
        aggregate: {
          args: Prisma.StaffAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStaff>
        }
        groupBy: {
          args: Prisma.StaffGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffGroupByOutputType>[]
        }
        count: {
          args: Prisma.StaffCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffCountAggregateOutputType> | number
        }
      }
    }
    Parent: {
      payload: Prisma.$ParentPayload<ExtArgs>
      fields: Prisma.ParentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        findFirst: {
          args: Prisma.ParentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        findMany: {
          args: Prisma.ParentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        create: {
          args: Prisma.ParentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        createMany: {
          args: Prisma.ParentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ParentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        delete: {
          args: Prisma.ParentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        update: {
          args: Prisma.ParentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        deleteMany: {
          args: Prisma.ParentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ParentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>[]
        }
        upsert: {
          args: Prisma.ParentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentPayload>
        }
        aggregate: {
          args: Prisma.ParentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParent>
        }
        groupBy: {
          args: Prisma.ParentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentCountAggregateOutputType> | number
        }
      }
    }
    ParentStudent: {
      payload: Prisma.$ParentStudentPayload<ExtArgs>
      fields: Prisma.ParentStudentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParentStudentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParentStudentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        findFirst: {
          args: Prisma.ParentStudentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParentStudentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        findMany: {
          args: Prisma.ParentStudentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        create: {
          args: Prisma.ParentStudentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        createMany: {
          args: Prisma.ParentStudentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ParentStudentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        delete: {
          args: Prisma.ParentStudentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        update: {
          args: Prisma.ParentStudentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        deleteMany: {
          args: Prisma.ParentStudentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParentStudentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ParentStudentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
        }
        upsert: {
          args: Prisma.ParentStudentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParentStudentPayload>
        }
        aggregate: {
          args: Prisma.ParentStudentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParentStudent>
        }
        groupBy: {
          args: Prisma.ParentStudentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentStudentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParentStudentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParentStudentCountAggregateOutputType> | number
        }
      }
    }
    Lesson: {
      payload: Prisma.$LessonPayload<ExtArgs>
      fields: Prisma.LessonFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LessonFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LessonFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        findFirst: {
          args: Prisma.LessonFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LessonFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        findMany: {
          args: Prisma.LessonFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>[]
        }
        create: {
          args: Prisma.LessonCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        createMany: {
          args: Prisma.LessonCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LessonCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>[]
        }
        delete: {
          args: Prisma.LessonDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        update: {
          args: Prisma.LessonUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        deleteMany: {
          args: Prisma.LessonDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LessonUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LessonUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>[]
        }
        upsert: {
          args: Prisma.LessonUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LessonPayload>
        }
        aggregate: {
          args: Prisma.LessonAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLesson>
        }
        groupBy: {
          args: Prisma.LessonGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LessonGroupByOutputType>[]
        }
        count: {
          args: Prisma.LessonCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LessonCountAggregateOutputType> | number
        }
      }
    }
    Exam: {
      payload: Prisma.$ExamPayload<ExtArgs>
      fields: Prisma.ExamFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ExamFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ExamFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        findFirst: {
          args: Prisma.ExamFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ExamFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        findMany: {
          args: Prisma.ExamFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>[]
        }
        create: {
          args: Prisma.ExamCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        createMany: {
          args: Prisma.ExamCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ExamCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>[]
        }
        delete: {
          args: Prisma.ExamDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        update: {
          args: Prisma.ExamUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        deleteMany: {
          args: Prisma.ExamDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ExamUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ExamUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>[]
        }
        upsert: {
          args: Prisma.ExamUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExamPayload>
        }
        aggregate: {
          args: Prisma.ExamAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateExam>
        }
        groupBy: {
          args: Prisma.ExamGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExamGroupByOutputType>[]
        }
        count: {
          args: Prisma.ExamCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExamCountAggregateOutputType> | number
        }
      }
    }
    Assignment: {
      payload: Prisma.$AssignmentPayload<ExtArgs>
      fields: Prisma.AssignmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        findFirst: {
          args: Prisma.AssignmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        findMany: {
          args: Prisma.AssignmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
        }
        create: {
          args: Prisma.AssignmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        createMany: {
          args: Prisma.AssignmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
        }
        delete: {
          args: Prisma.AssignmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        update: {
          args: Prisma.AssignmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        deleteMany: {
          args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
        }
        upsert: {
          args: Prisma.AssignmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentPayload>
        }
        aggregate: {
          args: Prisma.AssignmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssignment>
        }
        groupBy: {
          args: Prisma.AssignmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssignmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssignmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssignmentCountAggregateOutputType> | number
        }
      }
    }
    StudentAttendance: {
      payload: Prisma.$StudentAttendancePayload<ExtArgs>
      fields: Prisma.StudentAttendanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentAttendanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        findFirst: {
          args: Prisma.StudentAttendanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentAttendanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        findMany: {
          args: Prisma.StudentAttendanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        create: {
          args: Prisma.StudentAttendanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        createMany: {
          args: Prisma.StudentAttendanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentAttendanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        delete: {
          args: Prisma.StudentAttendanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        update: {
          args: Prisma.StudentAttendanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        deleteMany: {
          args: Prisma.StudentAttendanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentAttendanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentAttendanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
        }
        upsert: {
          args: Prisma.StudentAttendanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
        }
        aggregate: {
          args: Prisma.StudentAttendanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudentAttendance>
        }
        groupBy: {
          args: Prisma.StudentAttendanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentAttendanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentAttendanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentAttendanceCountAggregateOutputType> | number
        }
      }
    }
    StaffAttendance: {
      payload: Prisma.$StaffAttendancePayload<ExtArgs>
      fields: Prisma.StaffAttendanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StaffAttendanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StaffAttendanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        findFirst: {
          args: Prisma.StaffAttendanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StaffAttendanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        findMany: {
          args: Prisma.StaffAttendanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>[]
        }
        create: {
          args: Prisma.StaffAttendanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        createMany: {
          args: Prisma.StaffAttendanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StaffAttendanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>[]
        }
        delete: {
          args: Prisma.StaffAttendanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        update: {
          args: Prisma.StaffAttendanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        deleteMany: {
          args: Prisma.StaffAttendanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StaffAttendanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StaffAttendanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>[]
        }
        upsert: {
          args: Prisma.StaffAttendanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffAttendancePayload>
        }
        aggregate: {
          args: Prisma.StaffAttendanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStaffAttendance>
        }
        groupBy: {
          args: Prisma.StaffAttendanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffAttendanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.StaffAttendanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffAttendanceCountAggregateOutputType> | number
        }
      }
    }
    Result: {
      payload: Prisma.$ResultPayload<ExtArgs>
      fields: Prisma.ResultFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ResultFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ResultFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        findFirst: {
          args: Prisma.ResultFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ResultFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        findMany: {
          args: Prisma.ResultFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>[]
        }
        create: {
          args: Prisma.ResultCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        createMany: {
          args: Prisma.ResultCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ResultCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>[]
        }
        delete: {
          args: Prisma.ResultDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        update: {
          args: Prisma.ResultUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        deleteMany: {
          args: Prisma.ResultDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ResultUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ResultUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>[]
        }
        upsert: {
          args: Prisma.ResultUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResultPayload>
        }
        aggregate: {
          args: Prisma.ResultAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateResult>
        }
        groupBy: {
          args: Prisma.ResultGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ResultGroupByOutputType>[]
        }
        count: {
          args: Prisma.ResultCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ResultCountAggregateOutputType> | number
        }
      }
    }
    TermlyResult: {
      payload: Prisma.$TermlyResultPayload<ExtArgs>
      fields: Prisma.TermlyResultFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TermlyResultFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TermlyResultFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        findFirst: {
          args: Prisma.TermlyResultFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TermlyResultFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        findMany: {
          args: Prisma.TermlyResultFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>[]
        }
        create: {
          args: Prisma.TermlyResultCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        createMany: {
          args: Prisma.TermlyResultCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TermlyResultCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>[]
        }
        delete: {
          args: Prisma.TermlyResultDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        update: {
          args: Prisma.TermlyResultUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        deleteMany: {
          args: Prisma.TermlyResultDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TermlyResultUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TermlyResultUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>[]
        }
        upsert: {
          args: Prisma.TermlyResultUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TermlyResultPayload>
        }
        aggregate: {
          args: Prisma.TermlyResultAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTermlyResult>
        }
        groupBy: {
          args: Prisma.TermlyResultGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermlyResultGroupByOutputType>[]
        }
        count: {
          args: Prisma.TermlyResultCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TermlyResultCountAggregateOutputType> | number
        }
      }
    }
    Invoice: {
      payload: Prisma.$InvoicePayload<ExtArgs>
      fields: Prisma.InvoiceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        findFirst: {
          args: Prisma.InvoiceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        findMany: {
          args: Prisma.InvoiceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        create: {
          args: Prisma.InvoiceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        createMany: {
          args: Prisma.InvoiceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        delete: {
          args: Prisma.InvoiceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        update: {
          args: Prisma.InvoiceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        deleteMany: {
          args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        upsert: {
          args: Prisma.InvoiceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        aggregate: {
          args: Prisma.InvoiceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvoice>
        }
        groupBy: {
          args: Prisma.InvoiceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceGroupByOutputType>[]
        }
        count: {
          args: Prisma.InvoiceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceCountAggregateOutputType> | number
        }
      }
    }
    InvoiceLine: {
      payload: Prisma.$InvoiceLinePayload<ExtArgs>
      fields: Prisma.InvoiceLineFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InvoiceLineFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InvoiceLineFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        findFirst: {
          args: Prisma.InvoiceLineFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InvoiceLineFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        findMany: {
          args: Prisma.InvoiceLineFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>[]
        }
        create: {
          args: Prisma.InvoiceLineCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        createMany: {
          args: Prisma.InvoiceLineCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InvoiceLineCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>[]
        }
        delete: {
          args: Prisma.InvoiceLineDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        update: {
          args: Prisma.InvoiceLineUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        deleteMany: {
          args: Prisma.InvoiceLineDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InvoiceLineUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InvoiceLineUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>[]
        }
        upsert: {
          args: Prisma.InvoiceLineUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoiceLinePayload>
        }
        aggregate: {
          args: Prisma.InvoiceLineAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvoiceLine>
        }
        groupBy: {
          args: Prisma.InvoiceLineGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceLineGroupByOutputType>[]
        }
        count: {
          args: Prisma.InvoiceLineCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceLineCountAggregateOutputType> | number
        }
      }
    }
    InvoicePayment: {
      payload: Prisma.$InvoicePaymentPayload<ExtArgs>
      fields: Prisma.InvoicePaymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InvoicePaymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InvoicePaymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        findFirst: {
          args: Prisma.InvoicePaymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InvoicePaymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        findMany: {
          args: Prisma.InvoicePaymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>[]
        }
        create: {
          args: Prisma.InvoicePaymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        createMany: {
          args: Prisma.InvoicePaymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InvoicePaymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>[]
        }
        delete: {
          args: Prisma.InvoicePaymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        update: {
          args: Prisma.InvoicePaymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        deleteMany: {
          args: Prisma.InvoicePaymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InvoicePaymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InvoicePaymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>[]
        }
        upsert: {
          args: Prisma.InvoicePaymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePaymentPayload>
        }
        aggregate: {
          args: Prisma.InvoicePaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvoicePayment>
        }
        groupBy: {
          args: Prisma.InvoicePaymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoicePaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.InvoicePaymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoicePaymentCountAggregateOutputType> | number
        }
      }
    }
    SalaryPayment: {
      payload: Prisma.$SalaryPaymentPayload<ExtArgs>
      fields: Prisma.SalaryPaymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SalaryPaymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SalaryPaymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        findFirst: {
          args: Prisma.SalaryPaymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SalaryPaymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        findMany: {
          args: Prisma.SalaryPaymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>[]
        }
        create: {
          args: Prisma.SalaryPaymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        createMany: {
          args: Prisma.SalaryPaymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SalaryPaymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>[]
        }
        delete: {
          args: Prisma.SalaryPaymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        update: {
          args: Prisma.SalaryPaymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        deleteMany: {
          args: Prisma.SalaryPaymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SalaryPaymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SalaryPaymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>[]
        }
        upsert: {
          args: Prisma.SalaryPaymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SalaryPaymentPayload>
        }
        aggregate: {
          args: Prisma.SalaryPaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSalaryPayment>
        }
        groupBy: {
          args: Prisma.SalaryPaymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SalaryPaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.SalaryPaymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SalaryPaymentCountAggregateOutputType> | number
        }
      }
    }
    StaffBankAccount: {
      payload: Prisma.$StaffBankAccountPayload<ExtArgs>
      fields: Prisma.StaffBankAccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StaffBankAccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StaffBankAccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        findFirst: {
          args: Prisma.StaffBankAccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StaffBankAccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        findMany: {
          args: Prisma.StaffBankAccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>[]
        }
        create: {
          args: Prisma.StaffBankAccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        createMany: {
          args: Prisma.StaffBankAccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StaffBankAccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>[]
        }
        delete: {
          args: Prisma.StaffBankAccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        update: {
          args: Prisma.StaffBankAccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        deleteMany: {
          args: Prisma.StaffBankAccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StaffBankAccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StaffBankAccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>[]
        }
        upsert: {
          args: Prisma.StaffBankAccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StaffBankAccountPayload>
        }
        aggregate: {
          args: Prisma.StaffBankAccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStaffBankAccount>
        }
        groupBy: {
          args: Prisma.StaffBankAccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffBankAccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.StaffBankAccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StaffBankAccountCountAggregateOutputType> | number
        }
      }
    }
    Event: {
      payload: Prisma.$EventPayload<ExtArgs>
      fields: Prisma.EventFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EventFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        findFirst: {
          args: Prisma.EventFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        findMany: {
          args: Prisma.EventFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        create: {
          args: Prisma.EventCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        createMany: {
          args: Prisma.EventCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        delete: {
          args: Prisma.EventDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        update: {
          args: Prisma.EventUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        deleteMany: {
          args: Prisma.EventDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EventUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        upsert: {
          args: Prisma.EventUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        aggregate: {
          args: Prisma.EventAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEvent>
        }
        groupBy: {
          args: Prisma.EventGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EventGroupByOutputType>[]
        }
        count: {
          args: Prisma.EventCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EventCountAggregateOutputType> | number
        }
      }
    }
    Announcement: {
      payload: Prisma.$AnnouncementPayload<ExtArgs>
      fields: Prisma.AnnouncementFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AnnouncementFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AnnouncementFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        findFirst: {
          args: Prisma.AnnouncementFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AnnouncementFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        findMany: {
          args: Prisma.AnnouncementFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
        }
        create: {
          args: Prisma.AnnouncementCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        createMany: {
          args: Prisma.AnnouncementCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AnnouncementCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
        }
        delete: {
          args: Prisma.AnnouncementDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        update: {
          args: Prisma.AnnouncementUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        deleteMany: {
          args: Prisma.AnnouncementDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AnnouncementUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AnnouncementUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
        }
        upsert: {
          args: Prisma.AnnouncementUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AnnouncementPayload>
        }
        aggregate: {
          args: Prisma.AnnouncementAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAnnouncement>
        }
        groupBy: {
          args: Prisma.AnnouncementGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AnnouncementGroupByOutputType>[]
        }
        count: {
          args: Prisma.AnnouncementCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AnnouncementCountAggregateOutputType> | number
        }
      }
    }
    StudentClassHistory: {
      payload: Prisma.$StudentClassHistoryPayload<ExtArgs>
      fields: Prisma.StudentClassHistoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StudentClassHistoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StudentClassHistoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        findFirst: {
          args: Prisma.StudentClassHistoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StudentClassHistoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        findMany: {
          args: Prisma.StudentClassHistoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>[]
        }
        create: {
          args: Prisma.StudentClassHistoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        createMany: {
          args: Prisma.StudentClassHistoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StudentClassHistoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>[]
        }
        delete: {
          args: Prisma.StudentClassHistoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        update: {
          args: Prisma.StudentClassHistoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        deleteMany: {
          args: Prisma.StudentClassHistoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StudentClassHistoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StudentClassHistoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>[]
        }
        upsert: {
          args: Prisma.StudentClassHistoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StudentClassHistoryPayload>
        }
        aggregate: {
          args: Prisma.StudentClassHistoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStudentClassHistory>
        }
        groupBy: {
          args: Prisma.StudentClassHistoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentClassHistoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.StudentClassHistoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StudentClassHistoryCountAggregateOutputType> | number
        }
      }
    }
    TeacherSubjectAssignment: {
      payload: Prisma.$TeacherSubjectAssignmentPayload<ExtArgs>
      fields: Prisma.TeacherSubjectAssignmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TeacherSubjectAssignmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TeacherSubjectAssignmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        findFirst: {
          args: Prisma.TeacherSubjectAssignmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TeacherSubjectAssignmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        findMany: {
          args: Prisma.TeacherSubjectAssignmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>[]
        }
        create: {
          args: Prisma.TeacherSubjectAssignmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        createMany: {
          args: Prisma.TeacherSubjectAssignmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TeacherSubjectAssignmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>[]
        }
        delete: {
          args: Prisma.TeacherSubjectAssignmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        update: {
          args: Prisma.TeacherSubjectAssignmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        deleteMany: {
          args: Prisma.TeacherSubjectAssignmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TeacherSubjectAssignmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TeacherSubjectAssignmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>[]
        }
        upsert: {
          args: Prisma.TeacherSubjectAssignmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeacherSubjectAssignmentPayload>
        }
        aggregate: {
          args: Prisma.TeacherSubjectAssignmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeacherSubjectAssignment>
        }
        groupBy: {
          args: Prisma.TeacherSubjectAssignmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherSubjectAssignmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.TeacherSubjectAssignmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeacherSubjectAssignmentCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  timestamp: 'timestamp',
  schoolId: 'schoolId',
  auditedBy: 'auditedBy'
} as const

export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


export const SchoolScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  motto: 'motto',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


export const ProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schoolId: 'schoolId'
} as const

export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


export const AcademicYearScalarFieldEnum = {
  id: 'id',
  year: 'year',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  schoolId: 'schoolId'
} as const

export type AcademicYearScalarFieldEnum = (typeof AcademicYearScalarFieldEnum)[keyof typeof AcademicYearScalarFieldEnum]


export const TermScalarFieldEnum = {
  id: 'id',
  term: 'term',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  schoolId: 'schoolId',
  academicYearId: 'academicYearId'
} as const

export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


export const GradeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  schoolId: 'schoolId',
  programId: 'programId'
} as const

export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


export const ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  capacity: 'capacity',
  schoolId: 'schoolId',
  gradeId: 'gradeId'
} as const

export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


export const SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schoolId: 'schoolId'
} as const

export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


export const TimetablePeriodScalarFieldEnum = {
  id: 'id',
  startMinute: 'startMinute',
  endMinute: 'endMinute',
  schoolId: 'schoolId',
  classId: 'classId'
} as const

export type TimetablePeriodScalarFieldEnum = (typeof TimetablePeriodScalarFieldEnum)[keyof typeof TimetablePeriodScalarFieldEnum]


export const PeriodSlotScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  schoolId: 'schoolId',
  periodId: 'periodId'
} as const

export type PeriodSlotScalarFieldEnum = (typeof PeriodSlotScalarFieldEnum)[keyof typeof PeriodSlotScalarFieldEnum]


export const TimetableAssignmentScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  periodSlotId: 'periodSlotId',
  classId: 'classId',
  teacherId: 'teacherId',
  subjectId: 'subjectId'
} as const

export type TimetableAssignmentScalarFieldEnum = (typeof TimetableAssignmentScalarFieldEnum)[keyof typeof TimetableAssignmentScalarFieldEnum]


export const ManagerScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  username: 'username',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phone: 'phone',
  img: 'img',
  birthday: 'birthday',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ManagerScalarFieldEnum = (typeof ManagerScalarFieldEnum)[keyof typeof ManagerScalarFieldEnum]


export const StudentScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  registrationNumber: 'registrationNumber',
  name: 'name',
  surname: 'surname',
  address: 'address',
  img: 'img',
  birthday: 'birthday',
  medicalCondition: 'medicalCondition',
  sex: 'sex',
  admissionDate: 'admissionDate',
  activeState: 'activeState',
  activeStateReason: 'activeStateReason',
  schoolId: 'schoolId',
  classId: 'classId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


export const StaffScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  employeeId: 'employeeId',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  img: 'img',
  birthday: 'birthday',
  sex: 'sex',
  contractType: 'contractType',
  accessLevel: 'accessLevel',
  role: 'role',
  isFormTeacher: 'isFormTeacher',
  isActive: 'isActive',
  hireDate: 'hireDate',
  terminationDate: 'terminationDate',
  exitReason: 'exitReason',
  schoolId: 'schoolId',
  classId: 'classId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


export const ParentScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  primaryId: 'primaryId',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ParentScalarFieldEnum = (typeof ParentScalarFieldEnum)[keyof typeof ParentScalarFieldEnum]


export const ParentStudentScalarFieldEnum = {
  parentId: 'parentId',
  studentId: 'studentId',
  relation: 'relation',
  isPrimary: 'isPrimary'
} as const

export type ParentStudentScalarFieldEnum = (typeof ParentStudentScalarFieldEnum)[keyof typeof ParentStudentScalarFieldEnum]


export const LessonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  startTime: 'startTime',
  endTime: 'endTime',
  schoolId: 'schoolId',
  subjectId: 'subjectId',
  classId: 'classId',
  teacherId: 'teacherId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type LessonScalarFieldEnum = (typeof LessonScalarFieldEnum)[keyof typeof LessonScalarFieldEnum]


export const ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  startTime: 'startTime',
  endTime: 'endTime',
  maxScore: 'maxScore',
  type: 'type',
  questions: 'questions',
  attachedFile: 'attachedFile',
  schoolId: 'schoolId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  termId: 'termId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


export const AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  startDate: 'startDate',
  dueDate: 'dueDate',
  maxScore: 'maxScore',
  questions: 'questions',
  attachedFile: 'attachedFile',
  schoolId: 'schoolId',
  subjectId: 'subjectId',
  classId: 'classId',
  termId: 'termId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


export const StudentAttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  status: 'status',
  schoolId: 'schoolId',
  termId: 'termId',
  studentId: 'studentId',
  classId: 'classId',
  lessonId: 'lessonId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StudentAttendanceScalarFieldEnum = (typeof StudentAttendanceScalarFieldEnum)[keyof typeof StudentAttendanceScalarFieldEnum]


export const StaffAttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  clockInTime: 'clockInTime',
  reasonForAbsence: 'reasonForAbsence',
  schoolId: 'schoolId',
  termId: 'termId',
  staffId: 'staffId'
} as const

export type StaffAttendanceScalarFieldEnum = (typeof StaffAttendanceScalarFieldEnum)[keyof typeof StaffAttendanceScalarFieldEnum]


export const ResultScalarFieldEnum = {
  id: 'id',
  score: 'score',
  grade: 'grade',
  remarks: 'remarks',
  uploadedAt: 'uploadedAt',
  schoolId: 'schoolId',
  studentId: 'studentId',
  examId: 'examId',
  assignmentId: 'assignmentId',
  updatedAt: 'updatedAt'
} as const

export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


export const TermlyResultScalarFieldEnum = {
  id: 'id',
  average: 'average',
  position: 'position',
  remarks: 'remarks',
  behavior: 'behavior',
  schoolId: 'schoolId',
  termId: 'termId',
  studentId: 'studentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TermlyResultScalarFieldEnum = (typeof TermlyResultScalarFieldEnum)[keyof typeof TermlyResultScalarFieldEnum]


export const InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  amount: 'amount',
  dueDate: 'dueDate',
  status: 'status',
  issuedDate: 'issuedDate',
  schoolId: 'schoolId',
  termId: 'termId',
  studentId: 'studentId',
  gradeId: 'gradeId',
  classId: 'classId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


export const InvoiceLineScalarFieldEnum = {
  id: 'id',
  description: 'description',
  amount: 'amount',
  invoiceId: 'invoiceId'
} as const

export type InvoiceLineScalarFieldEnum = (typeof InvoiceLineScalarFieldEnum)[keyof typeof InvoiceLineScalarFieldEnum]


export const InvoicePaymentScalarFieldEnum = {
  id: 'id',
  amountPaid: 'amountPaid',
  currency: 'currency',
  reference: 'reference',
  paymentDate: 'paymentDate',
  narration: 'narration',
  payerName: 'payerName',
  method: 'method',
  status: 'status',
  providerReference: 'providerReference',
  schoolId: 'schoolId',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InvoicePaymentScalarFieldEnum = (typeof InvoicePaymentScalarFieldEnum)[keyof typeof InvoicePaymentScalarFieldEnum]


export const SalaryPaymentScalarFieldEnum = {
  id: 'id',
  totalAmount: 'totalAmount',
  deductions: 'deductions',
  deductionReason: 'deductionReason',
  amountPaid: 'amountPaid',
  payPeriod: 'payPeriod',
  status: 'status',
  paymentDate: 'paymentDate',
  reference: 'reference',
  schoolId: 'schoolId',
  staffId: 'staffId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SalaryPaymentScalarFieldEnum = (typeof SalaryPaymentScalarFieldEnum)[keyof typeof SalaryPaymentScalarFieldEnum]


export const StaffBankAccountScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  accountName: 'accountName',
  schoolId: 'schoolId',
  staffId: 'staffId'
} as const

export type StaffBankAccountScalarFieldEnum = (typeof StaffBankAccountScalarFieldEnum)[keyof typeof StaffBankAccountScalarFieldEnum]


export const EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  group: 'group',
  schoolId: 'schoolId',
  termId: 'termId',
  gradeId: 'gradeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


export const AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  isPublished: 'isPublished',
  draftedAt: 'draftedAt',
  publishedAt: 'publishedAt',
  updatedAt: 'updatedAt',
  schoolId: 'schoolId',
  termId: 'termId',
  classId: 'classId',
  gradeId: 'gradeId'
} as const

export type AnnouncementScalarFieldEnum = (typeof AnnouncementScalarFieldEnum)[keyof typeof AnnouncementScalarFieldEnum]


export const StudentClassHistoryScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  schoolId: 'schoolId',
  studentId: 'studentId',
  classId: 'classId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type StudentClassHistoryScalarFieldEnum = (typeof StudentClassHistoryScalarFieldEnum)[keyof typeof StudentClassHistoryScalarFieldEnum]


export const TeacherSubjectAssignmentScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  gradeId: 'gradeId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TeacherSubjectAssignmentScalarFieldEnum = (typeof TeacherSubjectAssignmentScalarFieldEnum)[keyof typeof TeacherSubjectAssignmentScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'ProgramType'
 */
export type EnumProgramTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramType'>
    


/**
 * Reference to a field of type 'ProgramType[]'
 */
export type ListEnumProgramTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramType[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'UserSex'
 */
export type EnumUserSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserSex'>
    


/**
 * Reference to a field of type 'UserSex[]'
 */
export type ListEnumUserSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserSex[]'>
    


/**
 * Reference to a field of type 'ActiveState'
 */
export type EnumActiveStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActiveState'>
    


/**
 * Reference to a field of type 'ActiveState[]'
 */
export type ListEnumActiveStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActiveState[]'>
    


/**
 * Reference to a field of type 'StaffContractType'
 */
export type EnumStaffContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffContractType'>
    


/**
 * Reference to a field of type 'StaffContractType[]'
 */
export type ListEnumStaffContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffContractType[]'>
    


/**
 * Reference to a field of type 'AccessLevel'
 */
export type EnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel'>
    


/**
 * Reference to a field of type 'AccessLevel[]'
 */
export type ListEnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel[]'>
    


/**
 * Reference to a field of type 'ParentStudentRelationship'
 */
export type EnumParentStudentRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParentStudentRelationship'>
    


/**
 * Reference to a field of type 'ParentStudentRelationship[]'
 */
export type ListEnumParentStudentRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParentStudentRelationship[]'>
    


/**
 * Reference to a field of type 'LessonType'
 */
export type EnumLessonTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LessonType'>
    


/**
 * Reference to a field of type 'LessonType[]'
 */
export type ListEnumLessonTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LessonType[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'ExamType'
 */
export type EnumExamTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExamType'>
    


/**
 * Reference to a field of type 'ExamType[]'
 */
export type ListEnumExamTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExamType[]'>
    


/**
 * Reference to a field of type 'AttendanceStatus'
 */
export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


/**
 * Reference to a field of type 'AttendanceStatus[]'
 */
export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


/**
 * Reference to a field of type 'InvoiceStatus'
 */
export type EnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus'>
    


/**
 * Reference to a field of type 'InvoiceStatus[]'
 */
export type ListEnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus[]'>
    


/**
 * Reference to a field of type 'PaymentStatus'
 */
export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


/**
 * Reference to a field of type 'PaymentStatus[]'
 */
export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


/**
 * Reference to a field of type 'EventGroup'
 */
export type EnumEventGroupFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventGroup'>
    


/**
 * Reference to a field of type 'EventGroup[]'
 */
export type ListEnumEventGroupFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventGroup[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  auditLog?: Prisma.AuditLogOmit
  school?: Prisma.SchoolOmit
  program?: Prisma.ProgramOmit
  academicYear?: Prisma.AcademicYearOmit
  term?: Prisma.TermOmit
  grade?: Prisma.GradeOmit
  class?: Prisma.ClassOmit
  subject?: Prisma.SubjectOmit
  timetablePeriod?: Prisma.TimetablePeriodOmit
  periodSlot?: Prisma.PeriodSlotOmit
  timetableAssignment?: Prisma.TimetableAssignmentOmit
  manager?: Prisma.ManagerOmit
  student?: Prisma.StudentOmit
  staff?: Prisma.StaffOmit
  parent?: Prisma.ParentOmit
  parentStudent?: Prisma.ParentStudentOmit
  lesson?: Prisma.LessonOmit
  exam?: Prisma.ExamOmit
  assignment?: Prisma.AssignmentOmit
  studentAttendance?: Prisma.StudentAttendanceOmit
  staffAttendance?: Prisma.StaffAttendanceOmit
  result?: Prisma.ResultOmit
  termlyResult?: Prisma.TermlyResultOmit
  invoice?: Prisma.InvoiceOmit
  invoiceLine?: Prisma.InvoiceLineOmit
  invoicePayment?: Prisma.InvoicePaymentOmit
  salaryPayment?: Prisma.SalaryPaymentOmit
  staffBankAccount?: Prisma.StaffBankAccountOmit
  event?: Prisma.EventOmit
  announcement?: Prisma.AnnouncementOmit
  studentClassHistory?: Prisma.StudentClassHistoryOmit
  teacherSubjectAssignment?: Prisma.TeacherSubjectAssignmentOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

